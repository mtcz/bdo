<?php
/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Requests.WasteRegister.ElectronicWasteRecordCard.V1.CreateKezsWasteManagementHandedOverRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kezs_equipment_group_card_id' => 'string',
        'waste_code_id' => 'int',
        'kpo_id' => 'string',
        'kpok_id' => 'string',
        'kpo_handover_date' => '\DateTime',
        'waste_process_id' => 'int',
        'waste_mass' => 'double',
        'country_id' => 'int',
        'locality' => 'string',
        'street' => 'string',
        'postal_code' => 'string',
        'building_number' => 'string',
        'local_number' => 'string',
        'waste_transport_start_date' => '\DateTime',
        'is_salvage_waste_process' => 'bool',
        'is_recycling' => 'bool',
        'is_entry_based_on_kpo' => 'bool',
        'is_entry_based_on_kpok' => 'bool',
        'is_export_from_rp' => 'bool',
        'is_equipment_owner_exempt_from_record' => 'bool',
        'is_handed_over' => 'bool',
        'additional_information' => 'string',
        'transport_type' => 'int',
        'waste_code_extended' => 'bool',
        'waste_code_extended_description' => 'string',
        'hazardous_waste_reclassification' => 'bool',
        'hazardous_waste_reclassification_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kezs_equipment_group_card_id' => 'uuid',
        'waste_code_id' => 'int32',
        'kpo_id' => 'uuid',
        'kpok_id' => 'uuid',
        'kpo_handover_date' => 'date-time',
        'waste_process_id' => 'int32',
        'waste_mass' => 'double',
        'country_id' => 'int32',
        'locality' => null,
        'street' => null,
        'postal_code' => null,
        'building_number' => null,
        'local_number' => null,
        'waste_transport_start_date' => 'date-time',
        'is_salvage_waste_process' => null,
        'is_recycling' => null,
        'is_entry_based_on_kpo' => null,
        'is_entry_based_on_kpok' => null,
        'is_export_from_rp' => null,
        'is_equipment_owner_exempt_from_record' => null,
        'is_handed_over' => null,
        'additional_information' => null,
        'transport_type' => 'int32',
        'waste_code_extended' => null,
        'waste_code_extended_description' => null,
        'hazardous_waste_reclassification' => null,
        'hazardous_waste_reclassification_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kezs_equipment_group_card_id' => 'kezsEquipmentGroupCardId',
        'waste_code_id' => 'wasteCodeId',
        'kpo_id' => 'kpoId',
        'kpok_id' => 'kpokId',
        'kpo_handover_date' => 'kpoHandoverDate',
        'waste_process_id' => 'wasteProcessId',
        'waste_mass' => 'wasteMass',
        'country_id' => 'countryId',
        'locality' => 'locality',
        'street' => 'street',
        'postal_code' => 'postalCode',
        'building_number' => 'buildingNumber',
        'local_number' => 'localNumber',
        'waste_transport_start_date' => 'wasteTransportStartDate',
        'is_salvage_waste_process' => 'isSalvageWasteProcess',
        'is_recycling' => 'isRecycling',
        'is_entry_based_on_kpo' => 'isEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'isEntryBasedOnKpok',
        'is_export_from_rp' => 'isExportFromRp',
        'is_equipment_owner_exempt_from_record' => 'isEquipmentOwnerExemptFromRecord',
        'is_handed_over' => 'isHandedOver',
        'additional_information' => 'additionalInformation',
        'transport_type' => 'transportType',
        'waste_code_extended' => 'wasteCodeExtended',
        'waste_code_extended_description' => 'wasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'hazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'hazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kezs_equipment_group_card_id' => 'setKezsEquipmentGroupCardId',
        'waste_code_id' => 'setWasteCodeId',
        'kpo_id' => 'setKpoId',
        'kpok_id' => 'setKpokId',
        'kpo_handover_date' => 'setKpoHandoverDate',
        'waste_process_id' => 'setWasteProcessId',
        'waste_mass' => 'setWasteMass',
        'country_id' => 'setCountryId',
        'locality' => 'setLocality',
        'street' => 'setStreet',
        'postal_code' => 'setPostalCode',
        'building_number' => 'setBuildingNumber',
        'local_number' => 'setLocalNumber',
        'waste_transport_start_date' => 'setWasteTransportStartDate',
        'is_salvage_waste_process' => 'setIsSalvageWasteProcess',
        'is_recycling' => 'setIsRecycling',
        'is_entry_based_on_kpo' => 'setIsEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'setIsEntryBasedOnKpok',
        'is_export_from_rp' => 'setIsExportFromRp',
        'is_equipment_owner_exempt_from_record' => 'setIsEquipmentOwnerExemptFromRecord',
        'is_handed_over' => 'setIsHandedOver',
        'additional_information' => 'setAdditionalInformation',
        'transport_type' => 'setTransportType',
        'waste_code_extended' => 'setWasteCodeExtended',
        'waste_code_extended_description' => 'setWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'setHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'setHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kezs_equipment_group_card_id' => 'getKezsEquipmentGroupCardId',
        'waste_code_id' => 'getWasteCodeId',
        'kpo_id' => 'getKpoId',
        'kpok_id' => 'getKpokId',
        'kpo_handover_date' => 'getKpoHandoverDate',
        'waste_process_id' => 'getWasteProcessId',
        'waste_mass' => 'getWasteMass',
        'country_id' => 'getCountryId',
        'locality' => 'getLocality',
        'street' => 'getStreet',
        'postal_code' => 'getPostalCode',
        'building_number' => 'getBuildingNumber',
        'local_number' => 'getLocalNumber',
        'waste_transport_start_date' => 'getWasteTransportStartDate',
        'is_salvage_waste_process' => 'getIsSalvageWasteProcess',
        'is_recycling' => 'getIsRecycling',
        'is_entry_based_on_kpo' => 'getIsEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'getIsEntryBasedOnKpok',
        'is_export_from_rp' => 'getIsExportFromRp',
        'is_equipment_owner_exempt_from_record' => 'getIsEquipmentOwnerExemptFromRecord',
        'is_handed_over' => 'getIsHandedOver',
        'additional_information' => 'getAdditionalInformation',
        'transport_type' => 'getTransportType',
        'waste_code_extended' => 'getWasteCodeExtended',
        'waste_code_extended_description' => 'getWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'getHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'getHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kezs_equipment_group_card_id'] = isset($data['kezs_equipment_group_card_id']) ? $data['kezs_equipment_group_card_id'] : null;
        $this->container['waste_code_id'] = isset($data['waste_code_id']) ? $data['waste_code_id'] : null;
        $this->container['kpo_id'] = isset($data['kpo_id']) ? $data['kpo_id'] : null;
        $this->container['kpok_id'] = isset($data['kpok_id']) ? $data['kpok_id'] : null;
        $this->container['kpo_handover_date'] = isset($data['kpo_handover_date']) ? $data['kpo_handover_date'] : null;
        $this->container['waste_process_id'] = isset($data['waste_process_id']) ? $data['waste_process_id'] : null;
        $this->container['waste_mass'] = isset($data['waste_mass']) ? $data['waste_mass'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['building_number'] = isset($data['building_number']) ? $data['building_number'] : null;
        $this->container['local_number'] = isset($data['local_number']) ? $data['local_number'] : null;
        $this->container['waste_transport_start_date'] = isset($data['waste_transport_start_date']) ? $data['waste_transport_start_date'] : null;
        $this->container['is_salvage_waste_process'] = isset($data['is_salvage_waste_process']) ? $data['is_salvage_waste_process'] : null;
        $this->container['is_recycling'] = isset($data['is_recycling']) ? $data['is_recycling'] : null;
        $this->container['is_entry_based_on_kpo'] = isset($data['is_entry_based_on_kpo']) ? $data['is_entry_based_on_kpo'] : null;
        $this->container['is_entry_based_on_kpok'] = isset($data['is_entry_based_on_kpok']) ? $data['is_entry_based_on_kpok'] : null;
        $this->container['is_export_from_rp'] = isset($data['is_export_from_rp']) ? $data['is_export_from_rp'] : null;
        $this->container['is_equipment_owner_exempt_from_record'] = isset($data['is_equipment_owner_exempt_from_record']) ? $data['is_equipment_owner_exempt_from_record'] : null;
        $this->container['is_handed_over'] = isset($data['is_handed_over']) ? $data['is_handed_over'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['waste_code_extended'] = isset($data['waste_code_extended']) ? $data['waste_code_extended'] : null;
        $this->container['waste_code_extended_description'] = isset($data['waste_code_extended_description']) ? $data['waste_code_extended_description'] : null;
        $this->container['hazardous_waste_reclassification'] = isset($data['hazardous_waste_reclassification']) ? $data['hazardous_waste_reclassification'] : null;
        $this->container['hazardous_waste_reclassification_description'] = isset($data['hazardous_waste_reclassification_description']) ? $data['hazardous_waste_reclassification_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kezs_equipment_group_card_id
     *
     * @return string
     */
    public function getKezsEquipmentGroupCardId()
    {
        return $this->container['kezs_equipment_group_card_id'];
    }

    /**
     * Sets kezs_equipment_group_card_id
     *
     * @param string $kezs_equipment_group_card_id Id grupy zebranego sprzętu
     *
     * @return $this
     */
    public function setKezsEquipmentGroupCardId($kezs_equipment_group_card_id)
    {
        $this->container['kezs_equipment_group_card_id'] = $kezs_equipment_group_card_id;

        return $this;
    }

    /**
     * Gets waste_code_id
     *
     * @return int
     */
    public function getWasteCodeId()
    {
        return $this->container['waste_code_id'];
    }

    /**
     * Sets waste_code_id
     *
     * @param int $waste_code_id Id kodu odpadu
     *
     * @return $this
     */
    public function setWasteCodeId($waste_code_id)
    {
        $this->container['waste_code_id'] = $waste_code_id;

        return $this;
    }

    /**
     * Gets kpo_id
     *
     * @return string
     */
    public function getKpoId()
    {
        return $this->container['kpo_id'];
    }

    /**
     * Sets kpo_id
     *
     * @param string $kpo_id Id karty przekazania odpadów
     *
     * @return $this
     */
    public function setKpoId($kpo_id)
    {
        $this->container['kpo_id'] = $kpo_id;

        return $this;
    }

    /**
     * Gets kpok_id
     *
     * @return string
     */
    public function getKpokId()
    {
        return $this->container['kpok_id'];
    }

    /**
     * Sets kpok_id
     *
     * @param string $kpok_id Id Karty Przekazania Odpadów Komunalnych
     *
     * @return $this
     */
    public function setKpokId($kpok_id)
    {
        $this->container['kpok_id'] = $kpok_id;

        return $this;
    }

    /**
     * Gets kpo_handover_date
     *
     * @return \DateTime
     */
    public function getKpoHandoverDate()
    {
        return $this->container['kpo_handover_date'];
    }

    /**
     * Sets kpo_handover_date
     *
     * @param \DateTime $kpo_handover_date Data przekazania do innego zakładu przetwarzania
     *
     * @return $this
     */
    public function setKpoHandoverDate($kpo_handover_date)
    {
        $this->container['kpo_handover_date'] = $kpo_handover_date;

        return $this;
    }

    /**
     * Gets waste_process_id
     *
     * @return int
     */
    public function getWasteProcessId()
    {
        return $this->container['waste_process_id'];
    }

    /**
     * Sets waste_process_id
     *
     * @param int $waste_process_id Id procesu przetwarzania odpadów
     *
     * @return $this
     */
    public function setWasteProcessId($waste_process_id)
    {
        $this->container['waste_process_id'] = $waste_process_id;

        return $this;
    }

    /**
     * Gets waste_mass
     *
     * @return double
     */
    public function getWasteMass()
    {
        return $this->container['waste_mass'];
    }

    /**
     * Sets waste_mass
     *
     * @param double $waste_mass Masa odpadów
     *
     * @return $this
     */
    public function setWasteMass($waste_mass)
    {
        $this->container['waste_mass'] = $waste_mass;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id Id kraju
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality Miejscowość
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Ulica
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Kod pocztowy
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return string
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param string $building_number Numer budynku
     *
     * @return $this
     */
    public function setBuildingNumber($building_number)
    {
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets local_number
     *
     * @return string
     */
    public function getLocalNumber()
    {
        return $this->container['local_number'];
    }

    /**
     * Sets local_number
     *
     * @param string $local_number Numer lokalu
     *
     * @return $this
     */
    public function setLocalNumber($local_number)
    {
        $this->container['local_number'] = $local_number;

        return $this;
    }

    /**
     * Gets waste_transport_start_date
     *
     * @return \DateTime
     */
    public function getWasteTransportStartDate()
    {
        return $this->container['waste_transport_start_date'];
    }

    /**
     * Sets waste_transport_start_date
     *
     * @param \DateTime $waste_transport_start_date Data rozpoczęcia transportu
     *
     * @return $this
     */
    public function setWasteTransportStartDate($waste_transport_start_date)
    {
        $this->container['waste_transport_start_date'] = $waste_transport_start_date;

        return $this;
    }

    /**
     * Gets is_salvage_waste_process
     *
     * @return bool
     */
    public function getIsSalvageWasteProcess()
    {
        return $this->container['is_salvage_waste_process'];
    }

    /**
     * Sets is_salvage_waste_process
     *
     * @param bool $is_salvage_waste_process Proces - odzysk
     *
     * @return $this
     */
    public function setIsSalvageWasteProcess($is_salvage_waste_process)
    {
        $this->container['is_salvage_waste_process'] = $is_salvage_waste_process;

        return $this;
    }

    /**
     * Gets is_recycling
     *
     * @return bool
     */
    public function getIsRecycling()
    {
        return $this->container['is_recycling'];
    }

    /**
     * Sets is_recycling
     *
     * @param bool $is_recycling Recykling
     *
     * @return $this
     */
    public function setIsRecycling($is_recycling)
    {
        $this->container['is_recycling'] = $is_recycling;

        return $this;
    }

    /**
     * Gets is_entry_based_on_kpo
     *
     * @return bool
     */
    public function getIsEntryBasedOnKpo()
    {
        return $this->container['is_entry_based_on_kpo'];
    }

    /**
     * Sets is_entry_based_on_kpo
     *
     * @param bool $is_entry_based_on_kpo Wpis dokonywany na podstawie karty przekazania odpadów
     *
     * @return $this
     */
    public function setIsEntryBasedOnKpo($is_entry_based_on_kpo)
    {
        $this->container['is_entry_based_on_kpo'] = $is_entry_based_on_kpo;

        return $this;
    }

    /**
     * Gets is_entry_based_on_kpok
     *
     * @return bool
     */
    public function getIsEntryBasedOnKpok()
    {
        return $this->container['is_entry_based_on_kpok'];
    }

    /**
     * Sets is_entry_based_on_kpok
     *
     * @param bool $is_entry_based_on_kpok Wpis dokonywany na podstawie karty przekazania odpadów komunalnych
     *
     * @return $this
     */
    public function setIsEntryBasedOnKpok($is_entry_based_on_kpok)
    {
        $this->container['is_entry_based_on_kpok'] = $is_entry_based_on_kpok;

        return $this;
    }

    /**
     * Gets is_export_from_rp
     *
     * @return bool
     */
    public function getIsExportFromRp()
    {
        return $this->container['is_export_from_rp'];
    }

    /**
     * Sets is_export_from_rp
     *
     * @param bool $is_export_from_rp Wywóz poza RP
     *
     * @return $this
     */
    public function setIsExportFromRp($is_export_from_rp)
    {
        $this->container['is_export_from_rp'] = $is_export_from_rp;

        return $this;
    }

    /**
     * Gets is_equipment_owner_exempt_from_record
     *
     * @return bool
     */
    public function getIsEquipmentOwnerExemptFromRecord()
    {
        return $this->container['is_equipment_owner_exempt_from_record'];
    }

    /**
     * Sets is_equipment_owner_exempt_from_record
     *
     * @param bool $is_equipment_owner_exempt_from_record Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
     *
     * @return $this
     */
    public function setIsEquipmentOwnerExemptFromRecord($is_equipment_owner_exempt_from_record)
    {
        $this->container['is_equipment_owner_exempt_from_record'] = $is_equipment_owner_exempt_from_record;

        return $this;
    }

    /**
     * Gets is_handed_over
     *
     * @return bool
     */
    public function getIsHandedOver()
    {
        return $this->container['is_handed_over'];
    }

    /**
     * Sets is_handed_over
     *
     * @param bool $is_handed_over Przekazane do innego zakładu przetwarzania
     *
     * @return $this
     */
    public function setIsHandedOver($is_handed_over)
    {
        $this->container['is_handed_over'] = $is_handed_over;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string $additional_information Informacje dodatkowe
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return int
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param int $transport_type Rodzaj środka transportu
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets waste_code_extended
     *
     * @return bool
     */
    public function getWasteCodeExtended()
    {
        return $this->container['waste_code_extended'];
    }

    /**
     * Sets waste_code_extended
     *
     * @param bool $waste_code_extended Kod ex
     *
     * @return $this
     */
    public function setWasteCodeExtended($waste_code_extended)
    {
        $this->container['waste_code_extended'] = $waste_code_extended;

        return $this;
    }

    /**
     * Gets waste_code_extended_description
     *
     * @return string
     */
    public function getWasteCodeExtendedDescription()
    {
        return $this->container['waste_code_extended_description'];
    }

    /**
     * Sets waste_code_extended_description
     *
     * @param string $waste_code_extended_description Rodzaj odpadu ex
     *
     * @return $this
     */
    public function setWasteCodeExtendedDescription($waste_code_extended_description)
    {
        $this->container['waste_code_extended_description'] = $waste_code_extended_description;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification
     *
     * @return bool
     */
    public function getHazardousWasteReclassification()
    {
        return $this->container['hazardous_waste_reclassification'];
    }

    /**
     * Sets hazardous_waste_reclassification
     *
     * @param bool $hazardous_waste_reclassification Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
     *
     * @return $this
     */
    public function setHazardousWasteReclassification($hazardous_waste_reclassification)
    {
        $this->container['hazardous_waste_reclassification'] = $hazardous_waste_reclassification;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification_description
     *
     * @return string
     */
    public function getHazardousWasteReclassificationDescription()
    {
        return $this->container['hazardous_waste_reclassification_description'];
    }

    /**
     * Sets hazardous_waste_reclassification_description
     *
     * @param string $hazardous_waste_reclassification_description Rodzaj odpadu
     *
     * @return $this
     */
    public function setHazardousWasteReclassificationDescription($hazardous_waste_reclassification_description)
    {
        $this->container['hazardous_waste_reclassification_description'] = $hazardous_waste_reclassification_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


