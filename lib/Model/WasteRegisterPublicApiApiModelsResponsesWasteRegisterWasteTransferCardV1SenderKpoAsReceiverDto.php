<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.WasteTransferCard.V1.SenderKpoAsReceiverDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kpo_id' => 'string',
        'card_number' => 'string',
        'nip' => 'string',
        'identification_number' => 'string',
        'name_or_first_name_and_last_name' => 'string',
        'receive_confirmation_time' => '\DateTime',
        'address_html' => 'string',
        'teryt_pk' => 'string',
        'building_number' => 'string',
        'local_number' => 'string',
        'postal_code' => 'string',
        'has_no_building_number' => 'bool',
        'foreign_company' => 'bool',
        'country_id' => 'int',
        'country_name' => 'string',
        'locality' => 'string',
        'street' => 'string',
        'waste_mass' => 'double',
        'is_used' => 'bool',
        'waste_code' => 'string',
        'waste_code_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kpo_id' => 'uuid',
        'card_number' => null,
        'nip' => null,
        'identification_number' => null,
        'name_or_first_name_and_last_name' => null,
        'receive_confirmation_time' => 'date-time',
        'address_html' => null,
        'teryt_pk' => null,
        'building_number' => null,
        'local_number' => null,
        'postal_code' => null,
        'has_no_building_number' => null,
        'foreign_company' => null,
        'country_id' => 'int32',
        'country_name' => null,
        'locality' => null,
        'street' => null,
        'waste_mass' => 'double',
        'is_used' => null,
        'waste_code' => null,
        'waste_code_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kpo_id' => 'kpoId',
        'card_number' => 'cardNumber',
        'nip' => 'nip',
        'identification_number' => 'identificationNumber',
        'name_or_first_name_and_last_name' => 'nameOrFirstNameAndLastName',
        'receive_confirmation_time' => 'receiveConfirmationTime',
        'address_html' => 'addressHtml',
        'teryt_pk' => 'terytPk',
        'building_number' => 'buildingNumber',
        'local_number' => 'localNumber',
        'postal_code' => 'postalCode',
        'has_no_building_number' => 'hasNoBuildingNumber',
        'foreign_company' => 'foreignCompany',
        'country_id' => 'countryId',
        'country_name' => 'countryName',
        'locality' => 'locality',
        'street' => 'street',
        'waste_mass' => 'wasteMass',
        'is_used' => 'isUsed',
        'waste_code' => 'wasteCode',
        'waste_code_description' => 'wasteCodeDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kpo_id' => 'setKpoId',
        'card_number' => 'setCardNumber',
        'nip' => 'setNip',
        'identification_number' => 'setIdentificationNumber',
        'name_or_first_name_and_last_name' => 'setNameOrFirstNameAndLastName',
        'receive_confirmation_time' => 'setReceiveConfirmationTime',
        'address_html' => 'setAddressHtml',
        'teryt_pk' => 'setTerytPk',
        'building_number' => 'setBuildingNumber',
        'local_number' => 'setLocalNumber',
        'postal_code' => 'setPostalCode',
        'has_no_building_number' => 'setHasNoBuildingNumber',
        'foreign_company' => 'setForeignCompany',
        'country_id' => 'setCountryId',
        'country_name' => 'setCountryName',
        'locality' => 'setLocality',
        'street' => 'setStreet',
        'waste_mass' => 'setWasteMass',
        'is_used' => 'setIsUsed',
        'waste_code' => 'setWasteCode',
        'waste_code_description' => 'setWasteCodeDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kpo_id' => 'getKpoId',
        'card_number' => 'getCardNumber',
        'nip' => 'getNip',
        'identification_number' => 'getIdentificationNumber',
        'name_or_first_name_and_last_name' => 'getNameOrFirstNameAndLastName',
        'receive_confirmation_time' => 'getReceiveConfirmationTime',
        'address_html' => 'getAddressHtml',
        'teryt_pk' => 'getTerytPk',
        'building_number' => 'getBuildingNumber',
        'local_number' => 'getLocalNumber',
        'postal_code' => 'getPostalCode',
        'has_no_building_number' => 'getHasNoBuildingNumber',
        'foreign_company' => 'getForeignCompany',
        'country_id' => 'getCountryId',
        'country_name' => 'getCountryName',
        'locality' => 'getLocality',
        'street' => 'getStreet',
        'waste_mass' => 'getWasteMass',
        'is_used' => 'getIsUsed',
        'waste_code' => 'getWasteCode',
        'waste_code_description' => 'getWasteCodeDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kpo_id'] = isset($data['kpo_id']) ? $data['kpo_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['nip'] = isset($data['nip']) ? $data['nip'] : null;
        $this->container['identification_number'] = isset($data['identification_number']) ? $data['identification_number'] : null;
        $this->container['name_or_first_name_and_last_name'] = isset($data['name_or_first_name_and_last_name']) ? $data['name_or_first_name_and_last_name'] : null;
        $this->container['receive_confirmation_time'] = isset($data['receive_confirmation_time']) ? $data['receive_confirmation_time'] : null;
        $this->container['address_html'] = isset($data['address_html']) ? $data['address_html'] : null;
        $this->container['teryt_pk'] = isset($data['teryt_pk']) ? $data['teryt_pk'] : null;
        $this->container['building_number'] = isset($data['building_number']) ? $data['building_number'] : null;
        $this->container['local_number'] = isset($data['local_number']) ? $data['local_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['has_no_building_number'] = isset($data['has_no_building_number']) ? $data['has_no_building_number'] : null;
        $this->container['foreign_company'] = isset($data['foreign_company']) ? $data['foreign_company'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['waste_mass'] = isset($data['waste_mass']) ? $data['waste_mass'] : null;
        $this->container['is_used'] = isset($data['is_used']) ? $data['is_used'] : null;
        $this->container['waste_code'] = isset($data['waste_code']) ? $data['waste_code'] : null;
        $this->container['waste_code_description'] = isset($data['waste_code_description']) ? $data['waste_code_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kpo_id
     *
     * @return string
     */
    public function getKpoId()
    {
        return $this->container['kpo_id'];
    }

    /**
     * Sets kpo_id
     *
     * @param string $kpo_id Id karty przekazania odpadów
     *
     * @return $this
     */
    public function setKpoId($kpo_id)
    {
        $this->container['kpo_id'] = $kpo_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer Karty Przekazania Odpadów
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets nip
     *
     * @return string
     */
    public function getNip()
    {
        return $this->container['nip'];
    }

    /**
     * Sets nip
     *
     * @param string $nip NIP
     *
     * @return $this
     */
    public function setNip($nip)
    {
        $this->container['nip'] = $nip;

        return $this;
    }

    /**
     * Gets identification_number
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identification_number'];
    }

    /**
     * Sets identification_number
     *
     * @param string $identification_number Numer rejestrowy
     *
     * @return $this
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->container['identification_number'] = $identification_number;

        return $this;
    }

    /**
     * Gets name_or_first_name_and_last_name
     *
     * @return string
     */
    public function getNameOrFirstNameAndLastName()
    {
        return $this->container['name_or_first_name_and_last_name'];
    }

    /**
     * Sets name_or_first_name_and_last_name
     *
     * @param string $name_or_first_name_and_last_name Nazwa lub Imię i Nazwisko
     *
     * @return $this
     */
    public function setNameOrFirstNameAndLastName($name_or_first_name_and_last_name)
    {
        $this->container['name_or_first_name_and_last_name'] = $name_or_first_name_and_last_name;

        return $this;
    }

    /**
     * Gets receive_confirmation_time
     *
     * @return \DateTime
     */
    public function getReceiveConfirmationTime()
    {
        return $this->container['receive_confirmation_time'];
    }

    /**
     * Sets receive_confirmation_time
     *
     * @param \DateTime $receive_confirmation_time Data otrzymania potwierdzenia
     *
     * @return $this
     */
    public function setReceiveConfirmationTime($receive_confirmation_time)
    {
        $this->container['receive_confirmation_time'] = $receive_confirmation_time;

        return $this;
    }

    /**
     * Gets address_html
     *
     * @return string
     */
    public function getAddressHtml()
    {
        return $this->container['address_html'];
    }

    /**
     * Sets address_html
     *
     * @param string $address_html Adres
     *
     * @return $this
     */
    public function setAddressHtml($address_html)
    {
        $this->container['address_html'] = $address_html;

        return $this;
    }

    /**
     * Gets teryt_pk
     *
     * @return string
     */
    public function getTerytPk()
    {
        return $this->container['teryt_pk'];
    }

    /**
     * Sets teryt_pk
     *
     * @param string $teryt_pk Numer TERYT
     *
     * @return $this
     */
    public function setTerytPk($teryt_pk)
    {
        $this->container['teryt_pk'] = $teryt_pk;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return string
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param string $building_number Numer budynku
     *
     * @return $this
     */
    public function setBuildingNumber($building_number)
    {
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets local_number
     *
     * @return string
     */
    public function getLocalNumber()
    {
        return $this->container['local_number'];
    }

    /**
     * Sets local_number
     *
     * @param string $local_number Numer lokalu
     *
     * @return $this
     */
    public function setLocalNumber($local_number)
    {
        $this->container['local_number'] = $local_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Kod pocztowy
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets has_no_building_number
     *
     * @return bool
     */
    public function getHasNoBuildingNumber()
    {
        return $this->container['has_no_building_number'];
    }

    /**
     * Sets has_no_building_number
     *
     * @param bool $has_no_building_number Nie podano numeru budynku
     *
     * @return $this
     */
    public function setHasNoBuildingNumber($has_no_building_number)
    {
        $this->container['has_no_building_number'] = $has_no_building_number;

        return $this;
    }

    /**
     * Gets foreign_company
     *
     * @return bool
     */
    public function getForeignCompany()
    {
        return $this->container['foreign_company'];
    }

    /**
     * Sets foreign_company
     *
     * @param bool $foreign_company Podmiot zagraniczny
     *
     * @return $this
     */
    public function setForeignCompany($foreign_company)
    {
        $this->container['foreign_company'] = $foreign_company;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id Id kraju
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name Kraj
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality Miejscowość
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Ulica
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets waste_mass
     *
     * @return double
     */
    public function getWasteMass()
    {
        return $this->container['waste_mass'];
    }

    /**
     * Sets waste_mass
     *
     * @param double $waste_mass Masa odpadów
     *
     * @return $this
     */
    public function setWasteMass($waste_mass)
    {
        $this->container['waste_mass'] = $waste_mass;

        return $this;
    }

    /**
     * Gets is_used
     *
     * @return bool
     */
    public function getIsUsed()
    {
        return $this->container['is_used'];
    }

    /**
     * Sets is_used
     *
     * @param bool $is_used is_used
     *
     * @return $this
     */
    public function setIsUsed($is_used)
    {
        $this->container['is_used'] = $is_used;

        return $this;
    }

    /**
     * Gets waste_code
     *
     * @return string
     */
    public function getWasteCode()
    {
        return $this->container['waste_code'];
    }

    /**
     * Sets waste_code
     *
     * @param string $waste_code waste_code
     *
     * @return $this
     */
    public function setWasteCode($waste_code)
    {
        $this->container['waste_code'] = $waste_code;

        return $this;
    }

    /**
     * Gets waste_code_description
     *
     * @return string
     */
    public function getWasteCodeDescription()
    {
        return $this->container['waste_code_description'];
    }

    /**
     * Sets waste_code_description
     *
     * @param string $waste_code_description waste_code_description
     *
     * @return $this
     */
    public function setWasteCodeDescription($waste_code_description)
    {
        $this->container['waste_code_description'] = $waste_code_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


