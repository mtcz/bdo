<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MuncipalWasteRecordCard.V1.GetKeokTransferredResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keok_transferred_id' => 'string',
        'keok_id' => 'string',
        'transferred_waste_mass' => 'double',
        'transport_date' => '\DateTime',
        'kpok_id' => 'string',
        'kpok_card_number' => 'string',
        'additional_info' => 'string',
        'created_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keok_transferred_id' => 'uuid',
        'keok_id' => 'uuid',
        'transferred_waste_mass' => 'double',
        'transport_date' => 'date-time',
        'kpok_id' => 'uuid',
        'kpok_card_number' => null,
        'additional_info' => null,
        'created_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keok_transferred_id' => 'keokTransferredId',
        'keok_id' => 'keokId',
        'transferred_waste_mass' => 'transferredWasteMass',
        'transport_date' => 'transportDate',
        'kpok_id' => 'kpokId',
        'kpok_card_number' => 'kpokCardNumber',
        'additional_info' => 'additionalInfo',
        'created_by_user' => 'createdByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keok_transferred_id' => 'setKeokTransferredId',
        'keok_id' => 'setKeokId',
        'transferred_waste_mass' => 'setTransferredWasteMass',
        'transport_date' => 'setTransportDate',
        'kpok_id' => 'setKpokId',
        'kpok_card_number' => 'setKpokCardNumber',
        'additional_info' => 'setAdditionalInfo',
        'created_by_user' => 'setCreatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keok_transferred_id' => 'getKeokTransferredId',
        'keok_id' => 'getKeokId',
        'transferred_waste_mass' => 'getTransferredWasteMass',
        'transport_date' => 'getTransportDate',
        'kpok_id' => 'getKpokId',
        'kpok_card_number' => 'getKpokCardNumber',
        'additional_info' => 'getAdditionalInfo',
        'created_by_user' => 'getCreatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keok_transferred_id'] = isset($data['keok_transferred_id']) ? $data['keok_transferred_id'] : null;
        $this->container['keok_id'] = isset($data['keok_id']) ? $data['keok_id'] : null;
        $this->container['transferred_waste_mass'] = isset($data['transferred_waste_mass']) ? $data['transferred_waste_mass'] : null;
        $this->container['transport_date'] = isset($data['transport_date']) ? $data['transport_date'] : null;
        $this->container['kpok_id'] = isset($data['kpok_id']) ? $data['kpok_id'] : null;
        $this->container['kpok_card_number'] = isset($data['kpok_card_number']) ? $data['kpok_card_number'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['created_by_user'] = isset($data['created_by_user']) ? $data['created_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keok_transferred_id
     *
     * @return string
     */
    public function getKeokTransferredId()
    {
        return $this->container['keok_transferred_id'];
    }

    /**
     * Sets keok_transferred_id
     *
     * @param string $keok_transferred_id 
     *
     * @return $this
     */
    public function setKeokTransferredId($keok_transferred_id)
    {
        $this->container['keok_transferred_id'] = $keok_transferred_id;

        return $this;
    }

    /**
     * Gets keok_id
     *
     * @return string
     */
    public function getKeokId()
    {
        return $this->container['keok_id'];
    }

    /**
     * Sets keok_id
     *
     * @param string $keok_id 
     *
     * @return $this
     */
    public function setKeokId($keok_id)
    {
        $this->container['keok_id'] = $keok_id;

        return $this;
    }

    /**
     * Gets transferred_waste_mass
     *
     * @return double
     */
    public function getTransferredWasteMass()
    {
        return $this->container['transferred_waste_mass'];
    }

    /**
     * Sets transferred_waste_mass
     *
     * @param double $transferred_waste_mass 
     *
     * @return $this
     */
    public function setTransferredWasteMass($transferred_waste_mass)
    {
        $this->container['transferred_waste_mass'] = $transferred_waste_mass;

        return $this;
    }

    /**
     * Gets transport_date
     *
     * @return \DateTime
     */
    public function getTransportDate()
    {
        return $this->container['transport_date'];
    }

    /**
     * Sets transport_date
     *
     * @param \DateTime $transport_date 
     *
     * @return $this
     */
    public function setTransportDate($transport_date)
    {
        $this->container['transport_date'] = $transport_date;

        return $this;
    }

    /**
     * Gets kpok_id
     *
     * @return string
     */
    public function getKpokId()
    {
        return $this->container['kpok_id'];
    }

    /**
     * Sets kpok_id
     *
     * @param string $kpok_id Id Karty Przekazania OdpadÃ³w Komunalnych
     *
     * @return $this
     */
    public function setKpokId($kpok_id)
    {
        $this->container['kpok_id'] = $kpok_id;

        return $this;
    }

    /**
     * Gets kpok_card_number
     *
     * @return string
     */
    public function getKpokCardNumber()
    {
        return $this->container['kpok_card_number'];
    }

    /**
     * Sets kpok_card_number
     *
     * @param string $kpok_card_number 
     *
     * @return $this
     */
    public function setKpokCardNumber($kpok_card_number)
    {
        $this->container['kpok_card_number'] = $kpok_card_number;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string $additional_info Informacje dodatkowe
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string $created_by_user Utworzone przez uÅ¼ytkownika
     *
     * @return $this
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


