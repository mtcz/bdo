<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokProcessedWasteMassSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokProcessedWasteMassSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokProcessedWasteMassSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MuncipalWasteRecordCard.V1.KeokProcessedWasteMassSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_waste_mass' => 'double',
        'recycle_waste_mass' => 'double',
        'filling_up_disadvantaged_areas_waste_mass' => 'double',
        'preparation_for_reuse_waste_mass' => 'double',
        'another_recovery_process_waste_mass' => 'double',
        'neutralization_waste_mass' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_waste_mass' => 'double',
        'recycle_waste_mass' => 'double',
        'filling_up_disadvantaged_areas_waste_mass' => 'double',
        'preparation_for_reuse_waste_mass' => 'double',
        'another_recovery_process_waste_mass' => 'double',
        'neutralization_waste_mass' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_waste_mass' => 'totalWasteMass',
        'recycle_waste_mass' => 'recycleWasteMass',
        'filling_up_disadvantaged_areas_waste_mass' => 'fillingUpDisadvantagedAreasWasteMass',
        'preparation_for_reuse_waste_mass' => 'preparationForReuseWasteMass',
        'another_recovery_process_waste_mass' => 'anotherRecoveryProcessWasteMass',
        'neutralization_waste_mass' => 'neutralizationWasteMass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_waste_mass' => 'setTotalWasteMass',
        'recycle_waste_mass' => 'setRecycleWasteMass',
        'filling_up_disadvantaged_areas_waste_mass' => 'setFillingUpDisadvantagedAreasWasteMass',
        'preparation_for_reuse_waste_mass' => 'setPreparationForReuseWasteMass',
        'another_recovery_process_waste_mass' => 'setAnotherRecoveryProcessWasteMass',
        'neutralization_waste_mass' => 'setNeutralizationWasteMass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_waste_mass' => 'getTotalWasteMass',
        'recycle_waste_mass' => 'getRecycleWasteMass',
        'filling_up_disadvantaged_areas_waste_mass' => 'getFillingUpDisadvantagedAreasWasteMass',
        'preparation_for_reuse_waste_mass' => 'getPreparationForReuseWasteMass',
        'another_recovery_process_waste_mass' => 'getAnotherRecoveryProcessWasteMass',
        'neutralization_waste_mass' => 'getNeutralizationWasteMass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_waste_mass'] = isset($data['total_waste_mass']) ? $data['total_waste_mass'] : null;
        $this->container['recycle_waste_mass'] = isset($data['recycle_waste_mass']) ? $data['recycle_waste_mass'] : null;
        $this->container['filling_up_disadvantaged_areas_waste_mass'] = isset($data['filling_up_disadvantaged_areas_waste_mass']) ? $data['filling_up_disadvantaged_areas_waste_mass'] : null;
        $this->container['preparation_for_reuse_waste_mass'] = isset($data['preparation_for_reuse_waste_mass']) ? $data['preparation_for_reuse_waste_mass'] : null;
        $this->container['another_recovery_process_waste_mass'] = isset($data['another_recovery_process_waste_mass']) ? $data['another_recovery_process_waste_mass'] : null;
        $this->container['neutralization_waste_mass'] = isset($data['neutralization_waste_mass']) ? $data['neutralization_waste_mass'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_waste_mass
     *
     * @return double
     */
    public function getTotalWasteMass()
    {
        return $this->container['total_waste_mass'];
    }

    /**
     * Sets total_waste_mass
     *
     * @param double $total_waste_mass 
     *
     * @return $this
     */
    public function setTotalWasteMass($total_waste_mass)
    {
        $this->container['total_waste_mass'] = $total_waste_mass;

        return $this;
    }

    /**
     * Gets recycle_waste_mass
     *
     * @return double
     */
    public function getRecycleWasteMass()
    {
        return $this->container['recycle_waste_mass'];
    }

    /**
     * Sets recycle_waste_mass
     *
     * @param double $recycle_waste_mass 
     *
     * @return $this
     */
    public function setRecycleWasteMass($recycle_waste_mass)
    {
        $this->container['recycle_waste_mass'] = $recycle_waste_mass;

        return $this;
    }

    /**
     * Gets filling_up_disadvantaged_areas_waste_mass
     *
     * @return double
     */
    public function getFillingUpDisadvantagedAreasWasteMass()
    {
        return $this->container['filling_up_disadvantaged_areas_waste_mass'];
    }

    /**
     * Sets filling_up_disadvantaged_areas_waste_mass
     *
     * @param double $filling_up_disadvantaged_areas_waste_mass 
     *
     * @return $this
     */
    public function setFillingUpDisadvantagedAreasWasteMass($filling_up_disadvantaged_areas_waste_mass)
    {
        $this->container['filling_up_disadvantaged_areas_waste_mass'] = $filling_up_disadvantaged_areas_waste_mass;

        return $this;
    }

    /**
     * Gets preparation_for_reuse_waste_mass
     *
     * @return double
     */
    public function getPreparationForReuseWasteMass()
    {
        return $this->container['preparation_for_reuse_waste_mass'];
    }

    /**
     * Sets preparation_for_reuse_waste_mass
     *
     * @param double $preparation_for_reuse_waste_mass 
     *
     * @return $this
     */
    public function setPreparationForReuseWasteMass($preparation_for_reuse_waste_mass)
    {
        $this->container['preparation_for_reuse_waste_mass'] = $preparation_for_reuse_waste_mass;

        return $this;
    }

    /**
     * Gets another_recovery_process_waste_mass
     *
     * @return double
     */
    public function getAnotherRecoveryProcessWasteMass()
    {
        return $this->container['another_recovery_process_waste_mass'];
    }

    /**
     * Sets another_recovery_process_waste_mass
     *
     * @param double $another_recovery_process_waste_mass 
     *
     * @return $this
     */
    public function setAnotherRecoveryProcessWasteMass($another_recovery_process_waste_mass)
    {
        $this->container['another_recovery_process_waste_mass'] = $another_recovery_process_waste_mass;

        return $this;
    }

    /**
     * Gets neutralization_waste_mass
     *
     * @return double
     */
    public function getNeutralizationWasteMass()
    {
        return $this->container['neutralization_waste_mass'];
    }

    /**
     * Sets neutralization_waste_mass
     *
     * @param double $neutralization_waste_mass 
     *
     * @return $this
     */
    public function setNeutralizationWasteMass($neutralization_waste_mass)
    {
        $this->container['neutralization_waste_mass'] = $neutralization_waste_mass;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


