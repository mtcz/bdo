<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MuncipalWasteTransferCard.V1.KpokTransferPrintingPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_number' => 'string',
        'card_status' => 'string',
        'calendar_year' => 'string',
        'sender_name_or_first_name_and_last_name' => 'string',
        'sender_address' => 'string',
        'sender_eup_number' => 'string',
        'sender_eup_name' => 'string',
        'sender_eup_address' => 'string',
        'sender_identification_number' => 'string',
        'sender_nip' => 'string',
        'sender_nip_eu' => 'string',
        'carrier_name_or_first_name_and_last_name' => 'string',
        'carrier_address' => 'string',
        'carrier_identification_number' => 'string',
        'carrier_nip' => 'string',
        'carrier_nip_eu' => 'string',
        'receiver_name_or_first_name_and_last_name' => 'string',
        'receiver_address' => 'string',
        'receiver_eup_number' => 'string',
        'receiver_eup_name' => 'string',
        'receiver_eup_address' => 'string',
        'receiver_identification_number' => 'string',
        'receiver_nip' => 'string',
        'receiver_nip_eu' => 'string',
        'commune_name' => 'string',
        'commune_area' => 'string',
        'waste_code_and_description' => 'string',
        'waste_mass' => 'string',
        'remarks' => 'string',
        'vehicle_reg_number' => 'string',
        'real_transport_date' => 'string',
        'real_transport_time' => 'string',
        'receive_confirmation_date' => 'string',
        'receive_confirmation_time' => 'string',
        'approval_date' => 'string',
        'approval_time' => 'string',
        'approved_by_user' => 'string',
        'transport_confirmation_date' => 'string',
        'transport_confirmation_time' => 'string',
        'transport_confirmed_by_user' => 'string',
        'receive_confirmed_by_user' => 'string',
        'waste_code_extended' => 'bool',
        'waste_code_extended_description' => 'string',
        'hazardous_waste_reclassification' => 'bool',
        'hazardous_waste_reclassification_description' => 'string',
        'additional_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_number' => null,
        'card_status' => null,
        'calendar_year' => null,
        'sender_name_or_first_name_and_last_name' => null,
        'sender_address' => null,
        'sender_eup_number' => null,
        'sender_eup_name' => null,
        'sender_eup_address' => null,
        'sender_identification_number' => null,
        'sender_nip' => null,
        'sender_nip_eu' => null,
        'carrier_name_or_first_name_and_last_name' => null,
        'carrier_address' => null,
        'carrier_identification_number' => null,
        'carrier_nip' => null,
        'carrier_nip_eu' => null,
        'receiver_name_or_first_name_and_last_name' => null,
        'receiver_address' => null,
        'receiver_eup_number' => null,
        'receiver_eup_name' => null,
        'receiver_eup_address' => null,
        'receiver_identification_number' => null,
        'receiver_nip' => null,
        'receiver_nip_eu' => null,
        'commune_name' => null,
        'commune_area' => null,
        'waste_code_and_description' => null,
        'waste_mass' => null,
        'remarks' => null,
        'vehicle_reg_number' => null,
        'real_transport_date' => null,
        'real_transport_time' => null,
        'receive_confirmation_date' => null,
        'receive_confirmation_time' => null,
        'approval_date' => null,
        'approval_time' => null,
        'approved_by_user' => null,
        'transport_confirmation_date' => null,
        'transport_confirmation_time' => null,
        'transport_confirmed_by_user' => null,
        'receive_confirmed_by_user' => null,
        'waste_code_extended' => null,
        'waste_code_extended_description' => null,
        'hazardous_waste_reclassification' => null,
        'hazardous_waste_reclassification_description' => null,
        'additional_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_number' => 'cardNumber',
        'card_status' => 'cardStatus',
        'calendar_year' => 'calendarYear',
        'sender_name_or_first_name_and_last_name' => 'senderNameOrFirstNameAndLastName',
        'sender_address' => 'senderAddress',
        'sender_eup_number' => 'senderEupNumber',
        'sender_eup_name' => 'senderEupName',
        'sender_eup_address' => 'senderEupAddress',
        'sender_identification_number' => 'senderIdentificationNumber',
        'sender_nip' => 'senderNip',
        'sender_nip_eu' => 'senderNipEu',
        'carrier_name_or_first_name_and_last_name' => 'carrierNameOrFirstNameAndLastName',
        'carrier_address' => 'carrierAddress',
        'carrier_identification_number' => 'carrierIdentificationNumber',
        'carrier_nip' => 'carrierNip',
        'carrier_nip_eu' => 'carrierNipEu',
        'receiver_name_or_first_name_and_last_name' => 'receiverNameOrFirstNameAndLastName',
        'receiver_address' => 'receiverAddress',
        'receiver_eup_number' => 'receiverEupNumber',
        'receiver_eup_name' => 'receiverEupName',
        'receiver_eup_address' => 'receiverEupAddress',
        'receiver_identification_number' => 'receiverIdentificationNumber',
        'receiver_nip' => 'receiverNip',
        'receiver_nip_eu' => 'receiverNipEu',
        'commune_name' => 'communeName',
        'commune_area' => 'communeArea',
        'waste_code_and_description' => 'wasteCodeAndDescription',
        'waste_mass' => 'wasteMass',
        'remarks' => 'remarks',
        'vehicle_reg_number' => 'vehicleRegNumber',
        'real_transport_date' => 'realTransportDate',
        'real_transport_time' => 'realTransportTime',
        'receive_confirmation_date' => 'receiveConfirmationDate',
        'receive_confirmation_time' => 'receiveConfirmationTime',
        'approval_date' => 'approvalDate',
        'approval_time' => 'approvalTime',
        'approved_by_user' => 'approvedByUser',
        'transport_confirmation_date' => 'transportConfirmationDate',
        'transport_confirmation_time' => 'transportConfirmationTime',
        'transport_confirmed_by_user' => 'transportConfirmedByUser',
        'receive_confirmed_by_user' => 'receiveConfirmedByUser',
        'waste_code_extended' => 'wasteCodeExtended',
        'waste_code_extended_description' => 'wasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'hazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'hazardousWasteReclassificationDescription',
        'additional_info' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_number' => 'setCardNumber',
        'card_status' => 'setCardStatus',
        'calendar_year' => 'setCalendarYear',
        'sender_name_or_first_name_and_last_name' => 'setSenderNameOrFirstNameAndLastName',
        'sender_address' => 'setSenderAddress',
        'sender_eup_number' => 'setSenderEupNumber',
        'sender_eup_name' => 'setSenderEupName',
        'sender_eup_address' => 'setSenderEupAddress',
        'sender_identification_number' => 'setSenderIdentificationNumber',
        'sender_nip' => 'setSenderNip',
        'sender_nip_eu' => 'setSenderNipEu',
        'carrier_name_or_first_name_and_last_name' => 'setCarrierNameOrFirstNameAndLastName',
        'carrier_address' => 'setCarrierAddress',
        'carrier_identification_number' => 'setCarrierIdentificationNumber',
        'carrier_nip' => 'setCarrierNip',
        'carrier_nip_eu' => 'setCarrierNipEu',
        'receiver_name_or_first_name_and_last_name' => 'setReceiverNameOrFirstNameAndLastName',
        'receiver_address' => 'setReceiverAddress',
        'receiver_eup_number' => 'setReceiverEupNumber',
        'receiver_eup_name' => 'setReceiverEupName',
        'receiver_eup_address' => 'setReceiverEupAddress',
        'receiver_identification_number' => 'setReceiverIdentificationNumber',
        'receiver_nip' => 'setReceiverNip',
        'receiver_nip_eu' => 'setReceiverNipEu',
        'commune_name' => 'setCommuneName',
        'commune_area' => 'setCommuneArea',
        'waste_code_and_description' => 'setWasteCodeAndDescription',
        'waste_mass' => 'setWasteMass',
        'remarks' => 'setRemarks',
        'vehicle_reg_number' => 'setVehicleRegNumber',
        'real_transport_date' => 'setRealTransportDate',
        'real_transport_time' => 'setRealTransportTime',
        'receive_confirmation_date' => 'setReceiveConfirmationDate',
        'receive_confirmation_time' => 'setReceiveConfirmationTime',
        'approval_date' => 'setApprovalDate',
        'approval_time' => 'setApprovalTime',
        'approved_by_user' => 'setApprovedByUser',
        'transport_confirmation_date' => 'setTransportConfirmationDate',
        'transport_confirmation_time' => 'setTransportConfirmationTime',
        'transport_confirmed_by_user' => 'setTransportConfirmedByUser',
        'receive_confirmed_by_user' => 'setReceiveConfirmedByUser',
        'waste_code_extended' => 'setWasteCodeExtended',
        'waste_code_extended_description' => 'setWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'setHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'setHazardousWasteReclassificationDescription',
        'additional_info' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_number' => 'getCardNumber',
        'card_status' => 'getCardStatus',
        'calendar_year' => 'getCalendarYear',
        'sender_name_or_first_name_and_last_name' => 'getSenderNameOrFirstNameAndLastName',
        'sender_address' => 'getSenderAddress',
        'sender_eup_number' => 'getSenderEupNumber',
        'sender_eup_name' => 'getSenderEupName',
        'sender_eup_address' => 'getSenderEupAddress',
        'sender_identification_number' => 'getSenderIdentificationNumber',
        'sender_nip' => 'getSenderNip',
        'sender_nip_eu' => 'getSenderNipEu',
        'carrier_name_or_first_name_and_last_name' => 'getCarrierNameOrFirstNameAndLastName',
        'carrier_address' => 'getCarrierAddress',
        'carrier_identification_number' => 'getCarrierIdentificationNumber',
        'carrier_nip' => 'getCarrierNip',
        'carrier_nip_eu' => 'getCarrierNipEu',
        'receiver_name_or_first_name_and_last_name' => 'getReceiverNameOrFirstNameAndLastName',
        'receiver_address' => 'getReceiverAddress',
        'receiver_eup_number' => 'getReceiverEupNumber',
        'receiver_eup_name' => 'getReceiverEupName',
        'receiver_eup_address' => 'getReceiverEupAddress',
        'receiver_identification_number' => 'getReceiverIdentificationNumber',
        'receiver_nip' => 'getReceiverNip',
        'receiver_nip_eu' => 'getReceiverNipEu',
        'commune_name' => 'getCommuneName',
        'commune_area' => 'getCommuneArea',
        'waste_code_and_description' => 'getWasteCodeAndDescription',
        'waste_mass' => 'getWasteMass',
        'remarks' => 'getRemarks',
        'vehicle_reg_number' => 'getVehicleRegNumber',
        'real_transport_date' => 'getRealTransportDate',
        'real_transport_time' => 'getRealTransportTime',
        'receive_confirmation_date' => 'getReceiveConfirmationDate',
        'receive_confirmation_time' => 'getReceiveConfirmationTime',
        'approval_date' => 'getApprovalDate',
        'approval_time' => 'getApprovalTime',
        'approved_by_user' => 'getApprovedByUser',
        'transport_confirmation_date' => 'getTransportConfirmationDate',
        'transport_confirmation_time' => 'getTransportConfirmationTime',
        'transport_confirmed_by_user' => 'getTransportConfirmedByUser',
        'receive_confirmed_by_user' => 'getReceiveConfirmedByUser',
        'waste_code_extended' => 'getWasteCodeExtended',
        'waste_code_extended_description' => 'getWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'getHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'getHazardousWasteReclassificationDescription',
        'additional_info' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_status'] = isset($data['card_status']) ? $data['card_status'] : null;
        $this->container['calendar_year'] = isset($data['calendar_year']) ? $data['calendar_year'] : null;
        $this->container['sender_name_or_first_name_and_last_name'] = isset($data['sender_name_or_first_name_and_last_name']) ? $data['sender_name_or_first_name_and_last_name'] : null;
        $this->container['sender_address'] = isset($data['sender_address']) ? $data['sender_address'] : null;
        $this->container['sender_eup_number'] = isset($data['sender_eup_number']) ? $data['sender_eup_number'] : null;
        $this->container['sender_eup_name'] = isset($data['sender_eup_name']) ? $data['sender_eup_name'] : null;
        $this->container['sender_eup_address'] = isset($data['sender_eup_address']) ? $data['sender_eup_address'] : null;
        $this->container['sender_identification_number'] = isset($data['sender_identification_number']) ? $data['sender_identification_number'] : null;
        $this->container['sender_nip'] = isset($data['sender_nip']) ? $data['sender_nip'] : null;
        $this->container['sender_nip_eu'] = isset($data['sender_nip_eu']) ? $data['sender_nip_eu'] : null;
        $this->container['carrier_name_or_first_name_and_last_name'] = isset($data['carrier_name_or_first_name_and_last_name']) ? $data['carrier_name_or_first_name_and_last_name'] : null;
        $this->container['carrier_address'] = isset($data['carrier_address']) ? $data['carrier_address'] : null;
        $this->container['carrier_identification_number'] = isset($data['carrier_identification_number']) ? $data['carrier_identification_number'] : null;
        $this->container['carrier_nip'] = isset($data['carrier_nip']) ? $data['carrier_nip'] : null;
        $this->container['carrier_nip_eu'] = isset($data['carrier_nip_eu']) ? $data['carrier_nip_eu'] : null;
        $this->container['receiver_name_or_first_name_and_last_name'] = isset($data['receiver_name_or_first_name_and_last_name']) ? $data['receiver_name_or_first_name_and_last_name'] : null;
        $this->container['receiver_address'] = isset($data['receiver_address']) ? $data['receiver_address'] : null;
        $this->container['receiver_eup_number'] = isset($data['receiver_eup_number']) ? $data['receiver_eup_number'] : null;
        $this->container['receiver_eup_name'] = isset($data['receiver_eup_name']) ? $data['receiver_eup_name'] : null;
        $this->container['receiver_eup_address'] = isset($data['receiver_eup_address']) ? $data['receiver_eup_address'] : null;
        $this->container['receiver_identification_number'] = isset($data['receiver_identification_number']) ? $data['receiver_identification_number'] : null;
        $this->container['receiver_nip'] = isset($data['receiver_nip']) ? $data['receiver_nip'] : null;
        $this->container['receiver_nip_eu'] = isset($data['receiver_nip_eu']) ? $data['receiver_nip_eu'] : null;
        $this->container['commune_name'] = isset($data['commune_name']) ? $data['commune_name'] : null;
        $this->container['commune_area'] = isset($data['commune_area']) ? $data['commune_area'] : null;
        $this->container['waste_code_and_description'] = isset($data['waste_code_and_description']) ? $data['waste_code_and_description'] : null;
        $this->container['waste_mass'] = isset($data['waste_mass']) ? $data['waste_mass'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['vehicle_reg_number'] = isset($data['vehicle_reg_number']) ? $data['vehicle_reg_number'] : null;
        $this->container['real_transport_date'] = isset($data['real_transport_date']) ? $data['real_transport_date'] : null;
        $this->container['real_transport_time'] = isset($data['real_transport_time']) ? $data['real_transport_time'] : null;
        $this->container['receive_confirmation_date'] = isset($data['receive_confirmation_date']) ? $data['receive_confirmation_date'] : null;
        $this->container['receive_confirmation_time'] = isset($data['receive_confirmation_time']) ? $data['receive_confirmation_time'] : null;
        $this->container['approval_date'] = isset($data['approval_date']) ? $data['approval_date'] : null;
        $this->container['approval_time'] = isset($data['approval_time']) ? $data['approval_time'] : null;
        $this->container['approved_by_user'] = isset($data['approved_by_user']) ? $data['approved_by_user'] : null;
        $this->container['transport_confirmation_date'] = isset($data['transport_confirmation_date']) ? $data['transport_confirmation_date'] : null;
        $this->container['transport_confirmation_time'] = isset($data['transport_confirmation_time']) ? $data['transport_confirmation_time'] : null;
        $this->container['transport_confirmed_by_user'] = isset($data['transport_confirmed_by_user']) ? $data['transport_confirmed_by_user'] : null;
        $this->container['receive_confirmed_by_user'] = isset($data['receive_confirmed_by_user']) ? $data['receive_confirmed_by_user'] : null;
        $this->container['waste_code_extended'] = isset($data['waste_code_extended']) ? $data['waste_code_extended'] : null;
        $this->container['waste_code_extended_description'] = isset($data['waste_code_extended_description']) ? $data['waste_code_extended_description'] : null;
        $this->container['hazardous_waste_reclassification'] = isset($data['hazardous_waste_reclassification']) ? $data['hazardous_waste_reclassification'] : null;
        $this->container['hazardous_waste_reclassification_description'] = isset($data['hazardous_waste_reclassification_description']) ? $data['hazardous_waste_reclassification_description'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer karty
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_status
     *
     * @return string
     */
    public function getCardStatus()
    {
        return $this->container['card_status'];
    }

    /**
     * Sets card_status
     *
     * @param string $card_status Status karty
     *
     * @return $this
     */
    public function setCardStatus($card_status)
    {
        $this->container['card_status'] = $card_status;

        return $this;
    }

    /**
     * Gets calendar_year
     *
     * @return string
     */
    public function getCalendarYear()
    {
        return $this->container['calendar_year'];
    }

    /**
     * Sets calendar_year
     *
     * @param string $calendar_year Rok kalendarzowy
     *
     * @return $this
     */
    public function setCalendarYear($calendar_year)
    {
        $this->container['calendar_year'] = $calendar_year;

        return $this;
    }

    /**
     * Gets sender_name_or_first_name_and_last_name
     *
     * @return string
     */
    public function getSenderNameOrFirstNameAndLastName()
    {
        return $this->container['sender_name_or_first_name_and_last_name'];
    }

    /**
     * Sets sender_name_or_first_name_and_last_name
     *
     * @param string $sender_name_or_first_name_and_last_name Nazwa lub Imię i Nazwisko przekazującego
     *
     * @return $this
     */
    public function setSenderNameOrFirstNameAndLastName($sender_name_or_first_name_and_last_name)
    {
        $this->container['sender_name_or_first_name_and_last_name'] = $sender_name_or_first_name_and_last_name;

        return $this;
    }

    /**
     * Gets sender_address
     *
     * @return string
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     *
     * @param string $sender_address Adres przekazującego
     *
     * @return $this
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets sender_eup_number
     *
     * @return string
     */
    public function getSenderEupNumber()
    {
        return $this->container['sender_eup_number'];
    }

    /**
     * Sets sender_eup_number
     *
     * @param string $sender_eup_number Numer miejsca prowadzenia działalności
     *
     * @return $this
     */
    public function setSenderEupNumber($sender_eup_number)
    {
        $this->container['sender_eup_number'] = $sender_eup_number;

        return $this;
    }

    /**
     * Gets sender_eup_name
     *
     * @return string
     */
    public function getSenderEupName()
    {
        return $this->container['sender_eup_name'];
    }

    /**
     * Sets sender_eup_name
     *
     * @param string $sender_eup_name Nazwa miejsca prowadzenia działalności
     *
     * @return $this
     */
    public function setSenderEupName($sender_eup_name)
    {
        $this->container['sender_eup_name'] = $sender_eup_name;

        return $this;
    }

    /**
     * Gets sender_eup_address
     *
     * @return string
     */
    public function getSenderEupAddress()
    {
        return $this->container['sender_eup_address'];
    }

    /**
     * Sets sender_eup_address
     *
     * @param string $sender_eup_address Adres miejsca prowadzenia działalności
     *
     * @return $this
     */
    public function setSenderEupAddress($sender_eup_address)
    {
        $this->container['sender_eup_address'] = $sender_eup_address;

        return $this;
    }

    /**
     * Gets sender_identification_number
     *
     * @return string
     */
    public function getSenderIdentificationNumber()
    {
        return $this->container['sender_identification_number'];
    }

    /**
     * Sets sender_identification_number
     *
     * @param string $sender_identification_number Numer rejestrowy przekazującego
     *
     * @return $this
     */
    public function setSenderIdentificationNumber($sender_identification_number)
    {
        $this->container['sender_identification_number'] = $sender_identification_number;

        return $this;
    }

    /**
     * Gets sender_nip
     *
     * @return string
     */
    public function getSenderNip()
    {
        return $this->container['sender_nip'];
    }

    /**
     * Sets sender_nip
     *
     * @param string $sender_nip NIP przekazującego
     *
     * @return $this
     */
    public function setSenderNip($sender_nip)
    {
        $this->container['sender_nip'] = $sender_nip;

        return $this;
    }

    /**
     * Gets sender_nip_eu
     *
     * @return string
     */
    public function getSenderNipEu()
    {
        return $this->container['sender_nip_eu'];
    }

    /**
     * Sets sender_nip_eu
     *
     * @param string $sender_nip_eu NIP europejski przekazującego
     *
     * @return $this
     */
    public function setSenderNipEu($sender_nip_eu)
    {
        $this->container['sender_nip_eu'] = $sender_nip_eu;

        return $this;
    }

    /**
     * Gets carrier_name_or_first_name_and_last_name
     *
     * @return string
     */
    public function getCarrierNameOrFirstNameAndLastName()
    {
        return $this->container['carrier_name_or_first_name_and_last_name'];
    }

    /**
     * Sets carrier_name_or_first_name_and_last_name
     *
     * @param string $carrier_name_or_first_name_and_last_name Nazwa lub Imię i Nazwisko transportującego
     *
     * @return $this
     */
    public function setCarrierNameOrFirstNameAndLastName($carrier_name_or_first_name_and_last_name)
    {
        $this->container['carrier_name_or_first_name_and_last_name'] = $carrier_name_or_first_name_and_last_name;

        return $this;
    }

    /**
     * Gets carrier_address
     *
     * @return string
     */
    public function getCarrierAddress()
    {
        return $this->container['carrier_address'];
    }

    /**
     * Sets carrier_address
     *
     * @param string $carrier_address Adres transportującego
     *
     * @return $this
     */
    public function setCarrierAddress($carrier_address)
    {
        $this->container['carrier_address'] = $carrier_address;

        return $this;
    }

    /**
     * Gets carrier_identification_number
     *
     * @return string
     */
    public function getCarrierIdentificationNumber()
    {
        return $this->container['carrier_identification_number'];
    }

    /**
     * Sets carrier_identification_number
     *
     * @param string $carrier_identification_number Numer rejestrowy transportującego
     *
     * @return $this
     */
    public function setCarrierIdentificationNumber($carrier_identification_number)
    {
        $this->container['carrier_identification_number'] = $carrier_identification_number;

        return $this;
    }

    /**
     * Gets carrier_nip
     *
     * @return string
     */
    public function getCarrierNip()
    {
        return $this->container['carrier_nip'];
    }

    /**
     * Sets carrier_nip
     *
     * @param string $carrier_nip NIP transportującego
     *
     * @return $this
     */
    public function setCarrierNip($carrier_nip)
    {
        $this->container['carrier_nip'] = $carrier_nip;

        return $this;
    }

    /**
     * Gets carrier_nip_eu
     *
     * @return string
     */
    public function getCarrierNipEu()
    {
        return $this->container['carrier_nip_eu'];
    }

    /**
     * Sets carrier_nip_eu
     *
     * @param string $carrier_nip_eu NIP europejski transportującego
     *
     * @return $this
     */
    public function setCarrierNipEu($carrier_nip_eu)
    {
        $this->container['carrier_nip_eu'] = $carrier_nip_eu;

        return $this;
    }

    /**
     * Gets receiver_name_or_first_name_and_last_name
     *
     * @return string
     */
    public function getReceiverNameOrFirstNameAndLastName()
    {
        return $this->container['receiver_name_or_first_name_and_last_name'];
    }

    /**
     * Sets receiver_name_or_first_name_and_last_name
     *
     * @param string $receiver_name_or_first_name_and_last_name Nazwa lub Imię i Nazwisko przejmującego
     *
     * @return $this
     */
    public function setReceiverNameOrFirstNameAndLastName($receiver_name_or_first_name_and_last_name)
    {
        $this->container['receiver_name_or_first_name_and_last_name'] = $receiver_name_or_first_name_and_last_name;

        return $this;
    }

    /**
     * Gets receiver_address
     *
     * @return string
     */
    public function getReceiverAddress()
    {
        return $this->container['receiver_address'];
    }

    /**
     * Sets receiver_address
     *
     * @param string $receiver_address Adres przejmującego
     *
     * @return $this
     */
    public function setReceiverAddress($receiver_address)
    {
        $this->container['receiver_address'] = $receiver_address;

        return $this;
    }

    /**
     * Gets receiver_eup_number
     *
     * @return string
     */
    public function getReceiverEupNumber()
    {
        return $this->container['receiver_eup_number'];
    }

    /**
     * Sets receiver_eup_number
     *
     * @param string $receiver_eup_number Numer miejsca prowadzenia działalności
     *
     * @return $this
     */
    public function setReceiverEupNumber($receiver_eup_number)
    {
        $this->container['receiver_eup_number'] = $receiver_eup_number;

        return $this;
    }

    /**
     * Gets receiver_eup_name
     *
     * @return string
     */
    public function getReceiverEupName()
    {
        return $this->container['receiver_eup_name'];
    }

    /**
     * Sets receiver_eup_name
     *
     * @param string $receiver_eup_name Nazwa miejsca prowadzenia działalności przejmującego
     *
     * @return $this
     */
    public function setReceiverEupName($receiver_eup_name)
    {
        $this->container['receiver_eup_name'] = $receiver_eup_name;

        return $this;
    }

    /**
     * Gets receiver_eup_address
     *
     * @return string
     */
    public function getReceiverEupAddress()
    {
        return $this->container['receiver_eup_address'];
    }

    /**
     * Sets receiver_eup_address
     *
     * @param string $receiver_eup_address Adres miejsca prowadzenia działalności przejmującego
     *
     * @return $this
     */
    public function setReceiverEupAddress($receiver_eup_address)
    {
        $this->container['receiver_eup_address'] = $receiver_eup_address;

        return $this;
    }

    /**
     * Gets receiver_identification_number
     *
     * @return string
     */
    public function getReceiverIdentificationNumber()
    {
        return $this->container['receiver_identification_number'];
    }

    /**
     * Sets receiver_identification_number
     *
     * @param string $receiver_identification_number Numer rejestrowy przejmującego
     *
     * @return $this
     */
    public function setReceiverIdentificationNumber($receiver_identification_number)
    {
        $this->container['receiver_identification_number'] = $receiver_identification_number;

        return $this;
    }

    /**
     * Gets receiver_nip
     *
     * @return string
     */
    public function getReceiverNip()
    {
        return $this->container['receiver_nip'];
    }

    /**
     * Sets receiver_nip
     *
     * @param string $receiver_nip NIP przejmującego
     *
     * @return $this
     */
    public function setReceiverNip($receiver_nip)
    {
        $this->container['receiver_nip'] = $receiver_nip;

        return $this;
    }

    /**
     * Gets receiver_nip_eu
     *
     * @return string
     */
    public function getReceiverNipEu()
    {
        return $this->container['receiver_nip_eu'];
    }

    /**
     * Sets receiver_nip_eu
     *
     * @param string $receiver_nip_eu NIP europejski przejmującego
     *
     * @return $this
     */
    public function setReceiverNipEu($receiver_nip_eu)
    {
        $this->container['receiver_nip_eu'] = $receiver_nip_eu;

        return $this;
    }

    /**
     * Gets commune_name
     *
     * @return string
     */
    public function getCommuneName()
    {
        return $this->container['commune_name'];
    }

    /**
     * Sets commune_name
     *
     * @param string $commune_name Nazwa gminy
     *
     * @return $this
     */
    public function setCommuneName($commune_name)
    {
        $this->container['commune_name'] = $commune_name;

        return $this;
    }

    /**
     * Gets commune_area
     *
     * @return string
     */
    public function getCommuneArea()
    {
        return $this->container['commune_area'];
    }

    /**
     * Sets commune_area
     *
     * @param string $commune_area Obszar gminy
     *
     * @return $this
     */
    public function setCommuneArea($commune_area)
    {
        $this->container['commune_area'] = $commune_area;

        return $this;
    }

    /**
     * Gets waste_code_and_description
     *
     * @return string
     */
    public function getWasteCodeAndDescription()
    {
        return $this->container['waste_code_and_description'];
    }

    /**
     * Sets waste_code_and_description
     *
     * @param string $waste_code_and_description Kod i opis odpadu
     *
     * @return $this
     */
    public function setWasteCodeAndDescription($waste_code_and_description)
    {
        $this->container['waste_code_and_description'] = $waste_code_and_description;

        return $this;
    }

    /**
     * Gets waste_mass
     *
     * @return string
     */
    public function getWasteMass()
    {
        return $this->container['waste_mass'];
    }

    /**
     * Sets waste_mass
     *
     * @param string $waste_mass Masa odpadów
     *
     * @return $this
     */
    public function setWasteMass($waste_mass)
    {
        $this->container['waste_mass'] = $waste_mass;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks Uwagi
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets vehicle_reg_number
     *
     * @return string
     */
    public function getVehicleRegNumber()
    {
        return $this->container['vehicle_reg_number'];
    }

    /**
     * Sets vehicle_reg_number
     *
     * @param string $vehicle_reg_number Numer rejestracyjny środka transportu
     *
     * @return $this
     */
    public function setVehicleRegNumber($vehicle_reg_number)
    {
        $this->container['vehicle_reg_number'] = $vehicle_reg_number;

        return $this;
    }

    /**
     * Gets real_transport_date
     *
     * @return string
     */
    public function getRealTransportDate()
    {
        return $this->container['real_transport_date'];
    }

    /**
     * Sets real_transport_date
     *
     * @param string $real_transport_date Rzeczywista data rozpoczęcia transportu
     *
     * @return $this
     */
    public function setRealTransportDate($real_transport_date)
    {
        $this->container['real_transport_date'] = $real_transport_date;

        return $this;
    }

    /**
     * Gets real_transport_time
     *
     * @return string
     */
    public function getRealTransportTime()
    {
        return $this->container['real_transport_time'];
    }

    /**
     * Sets real_transport_time
     *
     * @param string $real_transport_time Rzeczywista godzina rozpoczęcia transportu
     *
     * @return $this
     */
    public function setRealTransportTime($real_transport_time)
    {
        $this->container['real_transport_time'] = $real_transport_time;

        return $this;
    }

    /**
     * Gets receive_confirmation_date
     *
     * @return string
     */
    public function getReceiveConfirmationDate()
    {
        return $this->container['receive_confirmation_date'];
    }

    /**
     * Sets receive_confirmation_date
     *
     * @param string $receive_confirmation_date Data otrzymania potwierdzenia
     *
     * @return $this
     */
    public function setReceiveConfirmationDate($receive_confirmation_date)
    {
        $this->container['receive_confirmation_date'] = $receive_confirmation_date;

        return $this;
    }

    /**
     * Gets receive_confirmation_time
     *
     * @return string
     */
    public function getReceiveConfirmationTime()
    {
        return $this->container['receive_confirmation_time'];
    }

    /**
     * Sets receive_confirmation_time
     *
     * @param string $receive_confirmation_time Data otrzymania potwierdzenia
     *
     * @return $this
     */
    public function setReceiveConfirmationTime($receive_confirmation_time)
    {
        $this->container['receive_confirmation_time'] = $receive_confirmation_time;

        return $this;
    }

    /**
     * Gets approval_date
     *
     * @return string
     */
    public function getApprovalDate()
    {
        return $this->container['approval_date'];
    }

    /**
     * Sets approval_date
     *
     * @param string $approval_date Data zatwierdzenia karty
     *
     * @return $this
     */
    public function setApprovalDate($approval_date)
    {
        $this->container['approval_date'] = $approval_date;

        return $this;
    }

    /**
     * Gets approval_time
     *
     * @return string
     */
    public function getApprovalTime()
    {
        return $this->container['approval_time'];
    }

    /**
     * Sets approval_time
     *
     * @param string $approval_time Godzina zatwierdzenia kart
     *
     * @return $this
     */
    public function setApprovalTime($approval_time)
    {
        $this->container['approval_time'] = $approval_time;

        return $this;
    }

    /**
     * Gets approved_by_user
     *
     * @return string
     */
    public function getApprovedByUser()
    {
        return $this->container['approved_by_user'];
    }

    /**
     * Sets approved_by_user
     *
     * @param string $approved_by_user Imię i Nazwisko użytkownika zatwierdzającego kartę
     *
     * @return $this
     */
    public function setApprovedByUser($approved_by_user)
    {
        $this->container['approved_by_user'] = $approved_by_user;

        return $this;
    }

    /**
     * Gets transport_confirmation_date
     *
     * @return string
     */
    public function getTransportConfirmationDate()
    {
        return $this->container['transport_confirmation_date'];
    }

    /**
     * Sets transport_confirmation_date
     *
     * @param string $transport_confirmation_date Data potwierdzenia transportu
     *
     * @return $this
     */
    public function setTransportConfirmationDate($transport_confirmation_date)
    {
        $this->container['transport_confirmation_date'] = $transport_confirmation_date;

        return $this;
    }

    /**
     * Gets transport_confirmation_time
     *
     * @return string
     */
    public function getTransportConfirmationTime()
    {
        return $this->container['transport_confirmation_time'];
    }

    /**
     * Sets transport_confirmation_time
     *
     * @param string $transport_confirmation_time Godzina potwierdzenia transportu
     *
     * @return $this
     */
    public function setTransportConfirmationTime($transport_confirmation_time)
    {
        $this->container['transport_confirmation_time'] = $transport_confirmation_time;

        return $this;
    }

    /**
     * Gets transport_confirmed_by_user
     *
     * @return string
     */
    public function getTransportConfirmedByUser()
    {
        return $this->container['transport_confirmed_by_user'];
    }

    /**
     * Sets transport_confirmed_by_user
     *
     * @param string $transport_confirmed_by_user Użytkownik potwierdzający transport
     *
     * @return $this
     */
    public function setTransportConfirmedByUser($transport_confirmed_by_user)
    {
        $this->container['transport_confirmed_by_user'] = $transport_confirmed_by_user;

        return $this;
    }

    /**
     * Gets receive_confirmed_by_user
     *
     * @return string
     */
    public function getReceiveConfirmedByUser()
    {
        return $this->container['receive_confirmed_by_user'];
    }

    /**
     * Sets receive_confirmed_by_user
     *
     * @param string $receive_confirmed_by_user Użytkownik potwierdzający przejęcie
     *
     * @return $this
     */
    public function setReceiveConfirmedByUser($receive_confirmed_by_user)
    {
        $this->container['receive_confirmed_by_user'] = $receive_confirmed_by_user;

        return $this;
    }

    /**
     * Gets waste_code_extended
     *
     * @return bool
     */
    public function getWasteCodeExtended()
    {
        return $this->container['waste_code_extended'];
    }

    /**
     * Sets waste_code_extended
     *
     * @param bool $waste_code_extended Kod ex
     *
     * @return $this
     */
    public function setWasteCodeExtended($waste_code_extended)
    {
        $this->container['waste_code_extended'] = $waste_code_extended;

        return $this;
    }

    /**
     * Gets waste_code_extended_description
     *
     * @return string
     */
    public function getWasteCodeExtendedDescription()
    {
        return $this->container['waste_code_extended_description'];
    }

    /**
     * Sets waste_code_extended_description
     *
     * @param string $waste_code_extended_description Rodzaj odpadu ex
     *
     * @return $this
     */
    public function setWasteCodeExtendedDescription($waste_code_extended_description)
    {
        $this->container['waste_code_extended_description'] = $waste_code_extended_description;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification
     *
     * @return bool
     */
    public function getHazardousWasteReclassification()
    {
        return $this->container['hazardous_waste_reclassification'];
    }

    /**
     * Sets hazardous_waste_reclassification
     *
     * @param bool $hazardous_waste_reclassification Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
     *
     * @return $this
     */
    public function setHazardousWasteReclassification($hazardous_waste_reclassification)
    {
        $this->container['hazardous_waste_reclassification'] = $hazardous_waste_reclassification;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification_description
     *
     * @return string
     */
    public function getHazardousWasteReclassificationDescription()
    {
        return $this->container['hazardous_waste_reclassification_description'];
    }

    /**
     * Sets hazardous_waste_reclassification_description
     *
     * @param string $hazardous_waste_reclassification_description Rodzaj odpadu
     *
     * @return $this
     */
    public function setHazardousWasteReclassificationDescription($hazardous_waste_reclassification_description)
    {
        $this->container['hazardous_waste_reclassification_description'] = $hazardous_waste_reclassification_description;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string $additional_info additional_info
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


