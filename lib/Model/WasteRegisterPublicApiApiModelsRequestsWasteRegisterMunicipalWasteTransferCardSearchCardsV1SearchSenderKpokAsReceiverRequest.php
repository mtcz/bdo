<?php
/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Requests.WasteRegister.MunicipalWasteTransferCard.SearchCards.V1.SearchSenderKpokAsReceiverRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_size' => 'int',
        'card_number' => 'string',
        'sender_nip' => 'string',
        'sender_identification_number' => 'string',
        'sender_name' => 'string',
        'receive_confirmation_time' => '\DateTime',
        'card_status_code_names' => 'string',
        'waste_code_name' => 'string',
        'pagination_parameters' => '\Swagger\Client\Model\BDOApiClientModelsPaginationParameters',
        'is_used' => 'bool',
        'commune_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_size' => 'int64',
        'card_number' => null,
        'sender_nip' => null,
        'sender_identification_number' => null,
        'sender_name' => null,
        'receive_confirmation_time' => 'date-time',
        'card_status_code_names' => null,
        'waste_code_name' => null,
        'pagination_parameters' => null,
        'is_used' => null,
        'commune_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_size' => 'pageSize',
        'card_number' => 'cardNumber',
        'sender_nip' => 'senderNip',
        'sender_identification_number' => 'senderIdentificationNumber',
        'sender_name' => 'senderName',
        'receive_confirmation_time' => 'receiveConfirmationTime',
        'card_status_code_names' => 'cardStatusCodeNames',
        'waste_code_name' => 'wasteCodeName',
        'pagination_parameters' => 'paginationParameters',
        'is_used' => 'isUsed',
        'commune_id' => 'communeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_size' => 'setPageSize',
        'card_number' => 'setCardNumber',
        'sender_nip' => 'setSenderNip',
        'sender_identification_number' => 'setSenderIdentificationNumber',
        'sender_name' => 'setSenderName',
        'receive_confirmation_time' => 'setReceiveConfirmationTime',
        'card_status_code_names' => 'setCardStatusCodeNames',
        'waste_code_name' => 'setWasteCodeName',
        'pagination_parameters' => 'setPaginationParameters',
        'is_used' => 'setIsUsed',
        'commune_id' => 'setCommuneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_size' => 'getPageSize',
        'card_number' => 'getCardNumber',
        'sender_nip' => 'getSenderNip',
        'sender_identification_number' => 'getSenderIdentificationNumber',
        'sender_name' => 'getSenderName',
        'receive_confirmation_time' => 'getReceiveConfirmationTime',
        'card_status_code_names' => 'getCardStatusCodeNames',
        'waste_code_name' => 'getWasteCodeName',
        'pagination_parameters' => 'getPaginationParameters',
        'is_used' => 'getIsUsed',
        'commune_id' => 'getCommuneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['sender_nip'] = isset($data['sender_nip']) ? $data['sender_nip'] : null;
        $this->container['sender_identification_number'] = isset($data['sender_identification_number']) ? $data['sender_identification_number'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['receive_confirmation_time'] = isset($data['receive_confirmation_time']) ? $data['receive_confirmation_time'] : null;
        $this->container['card_status_code_names'] = isset($data['card_status_code_names']) ? $data['card_status_code_names'] : null;
        $this->container['waste_code_name'] = isset($data['waste_code_name']) ? $data['waste_code_name'] : null;
        $this->container['pagination_parameters'] = isset($data['pagination_parameters']) ? $data['pagination_parameters'] : null;
        $this->container['is_used'] = isset($data['is_used']) ? $data['is_used'] : null;
        $this->container['commune_id'] = isset($data['commune_id']) ? $data['commune_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Maksymalna liczba wyników wyszukiwania
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer karty
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets sender_nip
     *
     * @return string
     */
    public function getSenderNip()
    {
        return $this->container['sender_nip'];
    }

    /**
     * Sets sender_nip
     *
     * @param string $sender_nip NIP podmiotu przekazującego
     *
     * @return $this
     */
    public function setSenderNip($sender_nip)
    {
        $this->container['sender_nip'] = $sender_nip;

        return $this;
    }

    /**
     * Gets sender_identification_number
     *
     * @return string
     */
    public function getSenderIdentificationNumber()
    {
        return $this->container['sender_identification_number'];
    }

    /**
     * Sets sender_identification_number
     *
     * @param string $sender_identification_number Numer identyfikacyjny podmiotu przekazującego
     *
     * @return $this
     */
    public function setSenderIdentificationNumber($sender_identification_number)
    {
        $this->container['sender_identification_number'] = $sender_identification_number;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name Nazwa podmiotu przekazującego
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets receive_confirmation_time
     *
     * @return \DateTime
     */
    public function getReceiveConfirmationTime()
    {
        return $this->container['receive_confirmation_time'];
    }

    /**
     * Sets receive_confirmation_time
     *
     * @param \DateTime $receive_confirmation_time Data otrzymania potwierdzenia
     *
     * @return $this
     */
    public function setReceiveConfirmationTime($receive_confirmation_time)
    {
        $this->container['receive_confirmation_time'] = $receive_confirmation_time;

        return $this;
    }

    /**
     * Gets card_status_code_names
     *
     * @return string
     */
    public function getCardStatusCodeNames()
    {
        return $this->container['card_status_code_names'];
    }

    /**
     * Sets card_status_code_names
     *
     * @param string $card_status_code_names Lista statusów Kart Przekazania Odpadów Komunalnych rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus
     *
     * @return $this
     */
    public function setCardStatusCodeNames($card_status_code_names)
    {
        $this->container['card_status_code_names'] = $card_status_code_names;

        return $this;
    }

    /**
     * Gets waste_code_name
     *
     * @return string
     */
    public function getWasteCodeName()
    {
        return $this->container['waste_code_name'];
    }

    /**
     * Sets waste_code_name
     *
     * @param string $waste_code_name Kod odpadów
     *
     * @return $this
     */
    public function setWasteCodeName($waste_code_name)
    {
        $this->container['waste_code_name'] = $waste_code_name;

        return $this;
    }

    /**
     * Gets pagination_parameters
     *
     * @return \Swagger\Client\Model\BDOApiClientModelsPaginationParameters
     */
    public function getPaginationParameters()
    {
        return $this->container['pagination_parameters'];
    }

    /**
     * Sets pagination_parameters
     *
     * @param \Swagger\Client\Model\BDOApiClientModelsPaginationParameters $pagination_parameters pagination_parameters
     *
     * @return $this
     */
    public function setPaginationParameters($pagination_parameters)
    {
        $this->container['pagination_parameters'] = $pagination_parameters;

        return $this;
    }

    /**
     * Gets is_used
     *
     * @return bool
     */
    public function getIsUsed()
    {
        return $this->container['is_used'];
    }

    /**
     * Sets is_used
     *
     * @param bool $is_used is_used
     *
     * @return $this
     */
    public function setIsUsed($is_used)
    {
        $this->container['is_used'] = $is_used;

        return $this;
    }

    /**
     * Gets commune_id
     *
     * @return string
     */
    public function getCommuneId()
    {
        return $this->container['commune_id'];
    }

    /**
     * Sets commune_id
     *
     * @param string $commune_id commune_id
     *
     * @return $this
     */
    public function setCommuneId($commune_id)
    {
        $this->container['commune_id'] = $commune_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


