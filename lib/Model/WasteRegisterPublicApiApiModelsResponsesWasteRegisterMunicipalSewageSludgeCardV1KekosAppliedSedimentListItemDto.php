<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosAppliedSedimentListItemDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosAppliedSedimentListItemDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosAppliedSedimentListItemDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MunicipalSewageSludgeCard.V1.KekosAppliedSedimentListItemDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kekos_applied_sediment_id' => 'string',
        'sludge_application_date' => '\DateTime',
        'batch_number' => 'string',
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'is_application_purpose_crops' => 'bool',
        'is_application_purpose_plants' => 'bool',
        'is_application_purpose_inedible_plants' => 'bool',
        'is_application_purpose_reclamation' => 'bool',
        'is_application_purpose_land_adjustment' => 'bool',
        'kekos_land_surface_ruler' => 'string',
        'created_by_user_first_name_and_last_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kekos_applied_sediment_id' => 'uuid',
        'sludge_application_date' => 'date-time',
        'batch_number' => null,
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'is_application_purpose_crops' => null,
        'is_application_purpose_plants' => null,
        'is_application_purpose_inedible_plants' => null,
        'is_application_purpose_reclamation' => null,
        'is_application_purpose_land_adjustment' => null,
        'kekos_land_surface_ruler' => null,
        'created_by_user_first_name_and_last_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kekos_applied_sediment_id' => 'kekosAppliedSedimentId',
        'sludge_application_date' => 'sludgeApplicationDate',
        'batch_number' => 'batchNumber',
        'applied_sludge_mass' => 'appliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'appliedSludgeDryMatterMass',
        'is_application_purpose_crops' => 'isApplicationPurposeCrops',
        'is_application_purpose_plants' => 'isApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'isApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'isApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'isApplicationPurposeLandAdjustment',
        'kekos_land_surface_ruler' => 'kekosLandSurfaceRuler',
        'created_by_user_first_name_and_last_name' => 'createdByUserFirstNameAndLastName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kekos_applied_sediment_id' => 'setKekosAppliedSedimentId',
        'sludge_application_date' => 'setSludgeApplicationDate',
        'batch_number' => 'setBatchNumber',
        'applied_sludge_mass' => 'setAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'setAppliedSludgeDryMatterMass',
        'is_application_purpose_crops' => 'setIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'setIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'setIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'setIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'setIsApplicationPurposeLandAdjustment',
        'kekos_land_surface_ruler' => 'setKekosLandSurfaceRuler',
        'created_by_user_first_name_and_last_name' => 'setCreatedByUserFirstNameAndLastName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kekos_applied_sediment_id' => 'getKekosAppliedSedimentId',
        'sludge_application_date' => 'getSludgeApplicationDate',
        'batch_number' => 'getBatchNumber',
        'applied_sludge_mass' => 'getAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'getAppliedSludgeDryMatterMass',
        'is_application_purpose_crops' => 'getIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'getIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'getIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'getIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'getIsApplicationPurposeLandAdjustment',
        'kekos_land_surface_ruler' => 'getKekosLandSurfaceRuler',
        'created_by_user_first_name_and_last_name' => 'getCreatedByUserFirstNameAndLastName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kekos_applied_sediment_id'] = isset($data['kekos_applied_sediment_id']) ? $data['kekos_applied_sediment_id'] : null;
        $this->container['sludge_application_date'] = isset($data['sludge_application_date']) ? $data['sludge_application_date'] : null;
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['applied_sludge_mass'] = isset($data['applied_sludge_mass']) ? $data['applied_sludge_mass'] : null;
        $this->container['applied_sludge_dry_matter_mass'] = isset($data['applied_sludge_dry_matter_mass']) ? $data['applied_sludge_dry_matter_mass'] : null;
        $this->container['is_application_purpose_crops'] = isset($data['is_application_purpose_crops']) ? $data['is_application_purpose_crops'] : null;
        $this->container['is_application_purpose_plants'] = isset($data['is_application_purpose_plants']) ? $data['is_application_purpose_plants'] : null;
        $this->container['is_application_purpose_inedible_plants'] = isset($data['is_application_purpose_inedible_plants']) ? $data['is_application_purpose_inedible_plants'] : null;
        $this->container['is_application_purpose_reclamation'] = isset($data['is_application_purpose_reclamation']) ? $data['is_application_purpose_reclamation'] : null;
        $this->container['is_application_purpose_land_adjustment'] = isset($data['is_application_purpose_land_adjustment']) ? $data['is_application_purpose_land_adjustment'] : null;
        $this->container['kekos_land_surface_ruler'] = isset($data['kekos_land_surface_ruler']) ? $data['kekos_land_surface_ruler'] : null;
        $this->container['created_by_user_first_name_and_last_name'] = isset($data['created_by_user_first_name_and_last_name']) ? $data['created_by_user_first_name_and_last_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kekos_applied_sediment_id
     *
     * @return string
     */
    public function getKekosAppliedSedimentId()
    {
        return $this->container['kekos_applied_sediment_id'];
    }

    /**
     * Sets kekos_applied_sediment_id
     *
     * @param string $kekos_applied_sediment_id Id wpisu Zastosowane osady
     *
     * @return $this
     */
    public function setKekosAppliedSedimentId($kekos_applied_sediment_id)
    {
        $this->container['kekos_applied_sediment_id'] = $kekos_applied_sediment_id;

        return $this;
    }

    /**
     * Gets sludge_application_date
     *
     * @return \DateTime
     */
    public function getSludgeApplicationDate()
    {
        return $this->container['sludge_application_date'];
    }

    /**
     * Sets sludge_application_date
     *
     * @param \DateTime $sludge_application_date Data zastosowania komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setSludgeApplicationDate($sludge_application_date)
    {
        $this->container['sludge_application_date'] = $sludge_application_date;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string $batch_number 
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets applied_sludge_mass
     *
     * @return double
     */
    public function getAppliedSludgeMass()
    {
        return $this->container['applied_sludge_mass'];
    }

    /**
     * Sets applied_sludge_mass
     *
     * @param double $applied_sludge_mass Masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeMass($applied_sludge_mass)
    {
        $this->container['applied_sludge_mass'] = $applied_sludge_mass;

        return $this;
    }

    /**
     * Gets applied_sludge_dry_matter_mass
     *
     * @return double
     */
    public function getAppliedSludgeDryMatterMass()
    {
        return $this->container['applied_sludge_dry_matter_mass'];
    }

    /**
     * Sets applied_sludge_dry_matter_mass
     *
     * @param double $applied_sludge_dry_matter_mass Sucha masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeDryMatterMass($applied_sludge_dry_matter_mass)
    {
        $this->container['applied_sludge_dry_matter_mass'] = $applied_sludge_dry_matter_mass;

        return $this;
    }

    /**
     * Gets is_application_purpose_crops
     *
     * @return bool
     */
    public function getIsApplicationPurposeCrops()
    {
        return $this->container['is_application_purpose_crops'];
    }

    /**
     * Sets is_application_purpose_crops
     *
     * @param bool $is_application_purpose_crops Cel: w rolnictwie
     *
     * @return $this
     */
    public function setIsApplicationPurposeCrops($is_application_purpose_crops)
    {
        $this->container['is_application_purpose_crops'] = $is_application_purpose_crops;

        return $this;
    }

    /**
     * Gets is_application_purpose_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposePlants()
    {
        return $this->container['is_application_purpose_plants'];
    }

    /**
     * Sets is_application_purpose_plants
     *
     * @param bool $is_application_purpose_plants Cel: do uprawy roślin przeznaczonych do produkcji kompostu
     *
     * @return $this
     */
    public function setIsApplicationPurposePlants($is_application_purpose_plants)
    {
        $this->container['is_application_purpose_plants'] = $is_application_purpose_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_inedible_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposeInediblePlants()
    {
        return $this->container['is_application_purpose_inedible_plants'];
    }

    /**
     * Sets is_application_purpose_inedible_plants
     *
     * @param bool $is_application_purpose_inedible_plants Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz
     *
     * @return $this
     */
    public function setIsApplicationPurposeInediblePlants($is_application_purpose_inedible_plants)
    {
        $this->container['is_application_purpose_inedible_plants'] = $is_application_purpose_inedible_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_reclamation
     *
     * @return bool
     */
    public function getIsApplicationPurposeReclamation()
    {
        return $this->container['is_application_purpose_reclamation'];
    }

    /**
     * Sets is_application_purpose_reclamation
     *
     * @param bool $is_application_purpose_reclamation Cel: do rekultywacji terenów w tym gruntów na cele rolne
     *
     * @return $this
     */
    public function setIsApplicationPurposeReclamation($is_application_purpose_reclamation)
    {
        $this->container['is_application_purpose_reclamation'] = $is_application_purpose_reclamation;

        return $this;
    }

    /**
     * Gets is_application_purpose_land_adjustment
     *
     * @return bool
     */
    public function getIsApplicationPurposeLandAdjustment()
    {
        return $this->container['is_application_purpose_land_adjustment'];
    }

    /**
     * Sets is_application_purpose_land_adjustment
     *
     * @param bool $is_application_purpose_land_adjustment Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..)
     *
     * @return $this
     */
    public function setIsApplicationPurposeLandAdjustment($is_application_purpose_land_adjustment)
    {
        $this->container['is_application_purpose_land_adjustment'] = $is_application_purpose_land_adjustment;

        return $this;
    }

    /**
     * Gets kekos_land_surface_ruler
     *
     * @return string
     */
    public function getKekosLandSurfaceRuler()
    {
        return $this->container['kekos_land_surface_ruler'];
    }

    /**
     * Sets kekos_land_surface_ruler
     *
     * @param string $kekos_land_surface_ruler 
     *
     * @return $this
     */
    public function setKekosLandSurfaceRuler($kekos_land_surface_ruler)
    {
        $this->container['kekos_land_surface_ruler'] = $kekos_land_surface_ruler;

        return $this;
    }

    /**
     * Gets created_by_user_first_name_and_last_name
     *
     * @return string
     */
    public function getCreatedByUserFirstNameAndLastName()
    {
        return $this->container['created_by_user_first_name_and_last_name'];
    }

    /**
     * Sets created_by_user_first_name_and_last_name
     *
     * @param string $created_by_user_first_name_and_last_name Imię i nazwisko użytkownika tworzącego kartę
     *
     * @return $this
     */
    public function setCreatedByUserFirstNameAndLastName($created_by_user_first_name_and_last_name)
    {
        $this->container['created_by_user_first_name_and_last_name'] = $created_by_user_first_name_and_last_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


