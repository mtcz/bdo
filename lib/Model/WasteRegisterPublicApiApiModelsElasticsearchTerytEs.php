<?php
/**
 * WasteRegisterPublicApiApiModelsElasticsearchTerytEs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsElasticsearchTerytEs Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsElasticsearchTerytEs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Elasticsearch.TerytEs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pk' => 'string',
        'fulltext' => 'string',
        'formatted_fulltext' => 'string',
        'html_fulltext' => 'string',
        'wojewodztwo' => 'string',
        'powiat' => 'string',
        'gmina' => 'string',
        'rodzaj_gminy' => 'string',
        'miejscowosc' => 'string',
        'miejscowosc_podstawowa' => 'string',
        'rodzaj_miejscowosci' => 'string',
        'ulica' => 'string',
        'rodzaj_ulicy' => 'string',
        'brak_ulicy' => 'string',
        'exact_gm_mie' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pk' => null,
        'fulltext' => null,
        'formatted_fulltext' => null,
        'html_fulltext' => null,
        'wojewodztwo' => null,
        'powiat' => null,
        'gmina' => null,
        'rodzaj_gminy' => null,
        'miejscowosc' => null,
        'miejscowosc_podstawowa' => null,
        'rodzaj_miejscowosci' => null,
        'ulica' => null,
        'rodzaj_ulicy' => null,
        'brak_ulicy' => null,
        'exact_gm_mie' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pk' => 'pk',
        'fulltext' => 'fulltext',
        'formatted_fulltext' => 'formatted_fulltext',
        'html_fulltext' => 'html_fulltext',
        'wojewodztwo' => 'wojewodztwo',
        'powiat' => 'powiat',
        'gmina' => 'gmina',
        'rodzaj_gminy' => 'rodzaj_gminy',
        'miejscowosc' => 'miejscowosc',
        'miejscowosc_podstawowa' => 'miejscowosc_podstawowa',
        'rodzaj_miejscowosci' => 'rodzaj_miejscowosci',
        'ulica' => 'ulica',
        'rodzaj_ulicy' => 'rodzaj_ulicy',
        'brak_ulicy' => 'brak_ulicy',
        'exact_gm_mie' => 'exact_gm_mie'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pk' => 'setPk',
        'fulltext' => 'setFulltext',
        'formatted_fulltext' => 'setFormattedFulltext',
        'html_fulltext' => 'setHtmlFulltext',
        'wojewodztwo' => 'setWojewodztwo',
        'powiat' => 'setPowiat',
        'gmina' => 'setGmina',
        'rodzaj_gminy' => 'setRodzajGminy',
        'miejscowosc' => 'setMiejscowosc',
        'miejscowosc_podstawowa' => 'setMiejscowoscPodstawowa',
        'rodzaj_miejscowosci' => 'setRodzajMiejscowosci',
        'ulica' => 'setUlica',
        'rodzaj_ulicy' => 'setRodzajUlicy',
        'brak_ulicy' => 'setBrakUlicy',
        'exact_gm_mie' => 'setExactGmMie'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pk' => 'getPk',
        'fulltext' => 'getFulltext',
        'formatted_fulltext' => 'getFormattedFulltext',
        'html_fulltext' => 'getHtmlFulltext',
        'wojewodztwo' => 'getWojewodztwo',
        'powiat' => 'getPowiat',
        'gmina' => 'getGmina',
        'rodzaj_gminy' => 'getRodzajGminy',
        'miejscowosc' => 'getMiejscowosc',
        'miejscowosc_podstawowa' => 'getMiejscowoscPodstawowa',
        'rodzaj_miejscowosci' => 'getRodzajMiejscowosci',
        'ulica' => 'getUlica',
        'rodzaj_ulicy' => 'getRodzajUlicy',
        'brak_ulicy' => 'getBrakUlicy',
        'exact_gm_mie' => 'getExactGmMie'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pk'] = isset($data['pk']) ? $data['pk'] : null;
        $this->container['fulltext'] = isset($data['fulltext']) ? $data['fulltext'] : null;
        $this->container['formatted_fulltext'] = isset($data['formatted_fulltext']) ? $data['formatted_fulltext'] : null;
        $this->container['html_fulltext'] = isset($data['html_fulltext']) ? $data['html_fulltext'] : null;
        $this->container['wojewodztwo'] = isset($data['wojewodztwo']) ? $data['wojewodztwo'] : null;
        $this->container['powiat'] = isset($data['powiat']) ? $data['powiat'] : null;
        $this->container['gmina'] = isset($data['gmina']) ? $data['gmina'] : null;
        $this->container['rodzaj_gminy'] = isset($data['rodzaj_gminy']) ? $data['rodzaj_gminy'] : null;
        $this->container['miejscowosc'] = isset($data['miejscowosc']) ? $data['miejscowosc'] : null;
        $this->container['miejscowosc_podstawowa'] = isset($data['miejscowosc_podstawowa']) ? $data['miejscowosc_podstawowa'] : null;
        $this->container['rodzaj_miejscowosci'] = isset($data['rodzaj_miejscowosci']) ? $data['rodzaj_miejscowosci'] : null;
        $this->container['ulica'] = isset($data['ulica']) ? $data['ulica'] : null;
        $this->container['rodzaj_ulicy'] = isset($data['rodzaj_ulicy']) ? $data['rodzaj_ulicy'] : null;
        $this->container['brak_ulicy'] = isset($data['brak_ulicy']) ? $data['brak_ulicy'] : null;
        $this->container['exact_gm_mie'] = isset($data['exact_gm_mie']) ? $data['exact_gm_mie'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pk
     *
     * @return string
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param string $pk pk
     *
     * @return $this
     */
    public function setPk($pk)
    {
        $this->container['pk'] = $pk;

        return $this;
    }

    /**
     * Gets fulltext
     *
     * @return string
     */
    public function getFulltext()
    {
        return $this->container['fulltext'];
    }

    /**
     * Sets fulltext
     *
     * @param string $fulltext fulltext
     *
     * @return $this
     */
    public function setFulltext($fulltext)
    {
        $this->container['fulltext'] = $fulltext;

        return $this;
    }

    /**
     * Gets formatted_fulltext
     *
     * @return string
     */
    public function getFormattedFulltext()
    {
        return $this->container['formatted_fulltext'];
    }

    /**
     * Sets formatted_fulltext
     *
     * @param string $formatted_fulltext formatted_fulltext
     *
     * @return $this
     */
    public function setFormattedFulltext($formatted_fulltext)
    {
        $this->container['formatted_fulltext'] = $formatted_fulltext;

        return $this;
    }

    /**
     * Gets html_fulltext
     *
     * @return string
     */
    public function getHtmlFulltext()
    {
        return $this->container['html_fulltext'];
    }

    /**
     * Sets html_fulltext
     *
     * @param string $html_fulltext html_fulltext
     *
     * @return $this
     */
    public function setHtmlFulltext($html_fulltext)
    {
        $this->container['html_fulltext'] = $html_fulltext;

        return $this;
    }

    /**
     * Gets wojewodztwo
     *
     * @return string
     */
    public function getWojewodztwo()
    {
        return $this->container['wojewodztwo'];
    }

    /**
     * Sets wojewodztwo
     *
     * @param string $wojewodztwo wojewodztwo
     *
     * @return $this
     */
    public function setWojewodztwo($wojewodztwo)
    {
        $this->container['wojewodztwo'] = $wojewodztwo;

        return $this;
    }

    /**
     * Gets powiat
     *
     * @return string
     */
    public function getPowiat()
    {
        return $this->container['powiat'];
    }

    /**
     * Sets powiat
     *
     * @param string $powiat powiat
     *
     * @return $this
     */
    public function setPowiat($powiat)
    {
        $this->container['powiat'] = $powiat;

        return $this;
    }

    /**
     * Gets gmina
     *
     * @return string
     */
    public function getGmina()
    {
        return $this->container['gmina'];
    }

    /**
     * Sets gmina
     *
     * @param string $gmina gmina
     *
     * @return $this
     */
    public function setGmina($gmina)
    {
        $this->container['gmina'] = $gmina;

        return $this;
    }

    /**
     * Gets rodzaj_gminy
     *
     * @return string
     */
    public function getRodzajGminy()
    {
        return $this->container['rodzaj_gminy'];
    }

    /**
     * Sets rodzaj_gminy
     *
     * @param string $rodzaj_gminy rodzaj_gminy
     *
     * @return $this
     */
    public function setRodzajGminy($rodzaj_gminy)
    {
        $this->container['rodzaj_gminy'] = $rodzaj_gminy;

        return $this;
    }

    /**
     * Gets miejscowosc
     *
     * @return string
     */
    public function getMiejscowosc()
    {
        return $this->container['miejscowosc'];
    }

    /**
     * Sets miejscowosc
     *
     * @param string $miejscowosc miejscowosc
     *
     * @return $this
     */
    public function setMiejscowosc($miejscowosc)
    {
        $this->container['miejscowosc'] = $miejscowosc;

        return $this;
    }

    /**
     * Gets miejscowosc_podstawowa
     *
     * @return string
     */
    public function getMiejscowoscPodstawowa()
    {
        return $this->container['miejscowosc_podstawowa'];
    }

    /**
     * Sets miejscowosc_podstawowa
     *
     * @param string $miejscowosc_podstawowa miejscowosc_podstawowa
     *
     * @return $this
     */
    public function setMiejscowoscPodstawowa($miejscowosc_podstawowa)
    {
        $this->container['miejscowosc_podstawowa'] = $miejscowosc_podstawowa;

        return $this;
    }

    /**
     * Gets rodzaj_miejscowosci
     *
     * @return string
     */
    public function getRodzajMiejscowosci()
    {
        return $this->container['rodzaj_miejscowosci'];
    }

    /**
     * Sets rodzaj_miejscowosci
     *
     * @param string $rodzaj_miejscowosci rodzaj_miejscowosci
     *
     * @return $this
     */
    public function setRodzajMiejscowosci($rodzaj_miejscowosci)
    {
        $this->container['rodzaj_miejscowosci'] = $rodzaj_miejscowosci;

        return $this;
    }

    /**
     * Gets ulica
     *
     * @return string
     */
    public function getUlica()
    {
        return $this->container['ulica'];
    }

    /**
     * Sets ulica
     *
     * @param string $ulica ulica
     *
     * @return $this
     */
    public function setUlica($ulica)
    {
        $this->container['ulica'] = $ulica;

        return $this;
    }

    /**
     * Gets rodzaj_ulicy
     *
     * @return string
     */
    public function getRodzajUlicy()
    {
        return $this->container['rodzaj_ulicy'];
    }

    /**
     * Sets rodzaj_ulicy
     *
     * @param string $rodzaj_ulicy rodzaj_ulicy
     *
     * @return $this
     */
    public function setRodzajUlicy($rodzaj_ulicy)
    {
        $this->container['rodzaj_ulicy'] = $rodzaj_ulicy;

        return $this;
    }

    /**
     * Gets brak_ulicy
     *
     * @return string
     */
    public function getBrakUlicy()
    {
        return $this->container['brak_ulicy'];
    }

    /**
     * Sets brak_ulicy
     *
     * @param string $brak_ulicy brak_ulicy
     *
     * @return $this
     */
    public function setBrakUlicy($brak_ulicy)
    {
        $this->container['brak_ulicy'] = $brak_ulicy;

        return $this;
    }

    /**
     * Gets exact_gm_mie
     *
     * @return string
     */
    public function getExactGmMie()
    {
        return $this->container['exact_gm_mie'];
    }

    /**
     * Sets exact_gm_mie
     *
     * @param string $exact_gm_mie exact_gm_mie
     *
     * @return $this
     */
    public function setExactGmMie($exact_gm_mie)
    {
        $this->container['exact_gm_mie'] = $exact_gm_mie;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


