<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemPrintingPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemPrintingPage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemPrintingPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MuncipalWasteRecordCard.V1.KeokListItemPrintingPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'full_name' => 'string',
        'received_waste_mass' => 'double',
        'received_card_number' => 'string',
        'collectedd_waste_mass' => 'double',
        'collected_card_number' => 'string',
        'processed_waste_mass' => 'double',
        'rd' => 'string',
        'pcb_cpntent' => 'double',
        'is_recycle' => 'bool',
        'is_filling_up_disadvantaged_areas' => 'bool',
        'is_preparation_for_re_use' => 'bool',
        'is_preparation_for_reuse' => 'bool',
        'is_another_recovery_process' => 'bool',
        'is_neutralization' => 'bool',
        'transferred_waste_mass' => 'double',
        'transferred_card_number' => 'string',
        'additional_information' => 'string',
        'collected_waste_mass' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date-time',
        'full_name' => null,
        'received_waste_mass' => 'double',
        'received_card_number' => null,
        'collectedd_waste_mass' => 'double',
        'collected_card_number' => null,
        'processed_waste_mass' => 'double',
        'rd' => null,
        'pcb_cpntent' => 'double',
        'is_recycle' => null,
        'is_filling_up_disadvantaged_areas' => null,
        'is_preparation_for_re_use' => null,
        'is_preparation_for_reuse' => null,
        'is_another_recovery_process' => null,
        'is_neutralization' => null,
        'transferred_waste_mass' => 'double',
        'transferred_card_number' => null,
        'additional_information' => null,
        'collected_waste_mass' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'full_name' => 'fullName',
        'received_waste_mass' => 'receivedWasteMass',
        'received_card_number' => 'receivedCardNumber',
        'collectedd_waste_mass' => 'collecteddWasteMass',
        'collected_card_number' => 'collectedCardNumber',
        'processed_waste_mass' => 'processedWasteMass',
        'rd' => 'rd',
        'pcb_cpntent' => 'pcbCpntent',
        'is_recycle' => 'isRecycle',
        'is_filling_up_disadvantaged_areas' => 'isFillingUpDisadvantagedAreas',
        'is_preparation_for_re_use' => 'isPreparationForReUse',
        'is_preparation_for_reuse' => 'isPreparationForReuse',
        'is_another_recovery_process' => 'isAnotherRecoveryProcess',
        'is_neutralization' => 'isNeutralization',
        'transferred_waste_mass' => 'transferredWasteMass',
        'transferred_card_number' => 'transferredCardNumber',
        'additional_information' => 'additionalInformation',
        'collected_waste_mass' => 'collectedWasteMass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'full_name' => 'setFullName',
        'received_waste_mass' => 'setReceivedWasteMass',
        'received_card_number' => 'setReceivedCardNumber',
        'collectedd_waste_mass' => 'setCollecteddWasteMass',
        'collected_card_number' => 'setCollectedCardNumber',
        'processed_waste_mass' => 'setProcessedWasteMass',
        'rd' => 'setRd',
        'pcb_cpntent' => 'setPcbCpntent',
        'is_recycle' => 'setIsRecycle',
        'is_filling_up_disadvantaged_areas' => 'setIsFillingUpDisadvantagedAreas',
        'is_preparation_for_re_use' => 'setIsPreparationForReUse',
        'is_preparation_for_reuse' => 'setIsPreparationForReuse',
        'is_another_recovery_process' => 'setIsAnotherRecoveryProcess',
        'is_neutralization' => 'setIsNeutralization',
        'transferred_waste_mass' => 'setTransferredWasteMass',
        'transferred_card_number' => 'setTransferredCardNumber',
        'additional_information' => 'setAdditionalInformation',
        'collected_waste_mass' => 'setCollectedWasteMass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'full_name' => 'getFullName',
        'received_waste_mass' => 'getReceivedWasteMass',
        'received_card_number' => 'getReceivedCardNumber',
        'collectedd_waste_mass' => 'getCollecteddWasteMass',
        'collected_card_number' => 'getCollectedCardNumber',
        'processed_waste_mass' => 'getProcessedWasteMass',
        'rd' => 'getRd',
        'pcb_cpntent' => 'getPcbCpntent',
        'is_recycle' => 'getIsRecycle',
        'is_filling_up_disadvantaged_areas' => 'getIsFillingUpDisadvantagedAreas',
        'is_preparation_for_re_use' => 'getIsPreparationForReUse',
        'is_preparation_for_reuse' => 'getIsPreparationForReuse',
        'is_another_recovery_process' => 'getIsAnotherRecoveryProcess',
        'is_neutralization' => 'getIsNeutralization',
        'transferred_waste_mass' => 'getTransferredWasteMass',
        'transferred_card_number' => 'getTransferredCardNumber',
        'additional_information' => 'getAdditionalInformation',
        'collected_waste_mass' => 'getCollectedWasteMass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['received_waste_mass'] = isset($data['received_waste_mass']) ? $data['received_waste_mass'] : null;
        $this->container['received_card_number'] = isset($data['received_card_number']) ? $data['received_card_number'] : null;
        $this->container['collectedd_waste_mass'] = isset($data['collectedd_waste_mass']) ? $data['collectedd_waste_mass'] : null;
        $this->container['collected_card_number'] = isset($data['collected_card_number']) ? $data['collected_card_number'] : null;
        $this->container['processed_waste_mass'] = isset($data['processed_waste_mass']) ? $data['processed_waste_mass'] : null;
        $this->container['rd'] = isset($data['rd']) ? $data['rd'] : null;
        $this->container['pcb_cpntent'] = isset($data['pcb_cpntent']) ? $data['pcb_cpntent'] : null;
        $this->container['is_recycle'] = isset($data['is_recycle']) ? $data['is_recycle'] : null;
        $this->container['is_filling_up_disadvantaged_areas'] = isset($data['is_filling_up_disadvantaged_areas']) ? $data['is_filling_up_disadvantaged_areas'] : null;
        $this->container['is_preparation_for_re_use'] = isset($data['is_preparation_for_re_use']) ? $data['is_preparation_for_re_use'] : null;
        $this->container['is_preparation_for_reuse'] = isset($data['is_preparation_for_reuse']) ? $data['is_preparation_for_reuse'] : null;
        $this->container['is_another_recovery_process'] = isset($data['is_another_recovery_process']) ? $data['is_another_recovery_process'] : null;
        $this->container['is_neutralization'] = isset($data['is_neutralization']) ? $data['is_neutralization'] : null;
        $this->container['transferred_waste_mass'] = isset($data['transferred_waste_mass']) ? $data['transferred_waste_mass'] : null;
        $this->container['transferred_card_number'] = isset($data['transferred_card_number']) ? $data['transferred_card_number'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['collected_waste_mass'] = isset($data['collected_waste_mass']) ? $data['collected_waste_mass'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Data
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name 
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets received_waste_mass
     *
     * @return double
     */
    public function getReceivedWasteMass()
    {
        return $this->container['received_waste_mass'];
    }

    /**
     * Sets received_waste_mass
     *
     * @param double $received_waste_mass 
     *
     * @return $this
     */
    public function setReceivedWasteMass($received_waste_mass)
    {
        $this->container['received_waste_mass'] = $received_waste_mass;

        return $this;
    }

    /**
     * Gets received_card_number
     *
     * @return string
     */
    public function getReceivedCardNumber()
    {
        return $this->container['received_card_number'];
    }

    /**
     * Sets received_card_number
     *
     * @param string $received_card_number 
     *
     * @return $this
     */
    public function setReceivedCardNumber($received_card_number)
    {
        $this->container['received_card_number'] = $received_card_number;

        return $this;
    }

    /**
     * Gets collectedd_waste_mass
     *
     * @return double
     */
    public function getCollecteddWasteMass()
    {
        return $this->container['collectedd_waste_mass'];
    }

    /**
     * Sets collectedd_waste_mass
     *
     * @param double $collectedd_waste_mass 
     *
     * @return $this
     */
    public function setCollecteddWasteMass($collectedd_waste_mass)
    {
        $this->container['collectedd_waste_mass'] = $collectedd_waste_mass;

        return $this;
    }

    /**
     * Gets collected_card_number
     *
     * @return string
     */
    public function getCollectedCardNumber()
    {
        return $this->container['collected_card_number'];
    }

    /**
     * Sets collected_card_number
     *
     * @param string $collected_card_number 
     *
     * @return $this
     */
    public function setCollectedCardNumber($collected_card_number)
    {
        $this->container['collected_card_number'] = $collected_card_number;

        return $this;
    }

    /**
     * Gets processed_waste_mass
     *
     * @return double
     */
    public function getProcessedWasteMass()
    {
        return $this->container['processed_waste_mass'];
    }

    /**
     * Sets processed_waste_mass
     *
     * @param double $processed_waste_mass 
     *
     * @return $this
     */
    public function setProcessedWasteMass($processed_waste_mass)
    {
        $this->container['processed_waste_mass'] = $processed_waste_mass;

        return $this;
    }

    /**
     * Gets rd
     *
     * @return string
     */
    public function getRd()
    {
        return $this->container['rd'];
    }

    /**
     * Sets rd
     *
     * @param string $rd 
     *
     * @return $this
     */
    public function setRd($rd)
    {
        $this->container['rd'] = $rd;

        return $this;
    }

    /**
     * Gets pcb_cpntent
     *
     * @return double
     */
    public function getPcbCpntent()
    {
        return $this->container['pcb_cpntent'];
    }

    /**
     * Sets pcb_cpntent
     *
     * @param double $pcb_cpntent 
     *
     * @return $this
     */
    public function setPcbCpntent($pcb_cpntent)
    {
        $this->container['pcb_cpntent'] = $pcb_cpntent;

        return $this;
    }

    /**
     * Gets is_recycle
     *
     * @return bool
     */
    public function getIsRecycle()
    {
        return $this->container['is_recycle'];
    }

    /**
     * Sets is_recycle
     *
     * @param bool $is_recycle Recykling
     *
     * @return $this
     */
    public function setIsRecycle($is_recycle)
    {
        $this->container['is_recycle'] = $is_recycle;

        return $this;
    }

    /**
     * Gets is_filling_up_disadvantaged_areas
     *
     * @return bool
     */
    public function getIsFillingUpDisadvantagedAreas()
    {
        return $this->container['is_filling_up_disadvantaged_areas'];
    }

    /**
     * Sets is_filling_up_disadvantaged_areas
     *
     * @param bool $is_filling_up_disadvantaged_areas Wypełnianie terenów niekorzystnie przekształconych
     *
     * @return $this
     */
    public function setIsFillingUpDisadvantagedAreas($is_filling_up_disadvantaged_areas)
    {
        $this->container['is_filling_up_disadvantaged_areas'] = $is_filling_up_disadvantaged_areas;

        return $this;
    }

    /**
     * Gets is_preparation_for_re_use
     *
     * @return bool
     */
    public function getIsPreparationForReUse()
    {
        return $this->container['is_preparation_for_re_use'];
    }

    /**
     * Sets is_preparation_for_re_use
     *
     * @param bool $is_preparation_for_re_use Przygotowanie do ponownego uzycia
     *
     * @return $this
     */
    public function setIsPreparationForReUse($is_preparation_for_re_use)
    {
        $this->container['is_preparation_for_re_use'] = $is_preparation_for_re_use;

        return $this;
    }

    /**
     * Gets is_preparation_for_reuse
     *
     * @return bool
     */
    public function getIsPreparationForReuse()
    {
        return $this->container['is_preparation_for_reuse'];
    }

    /**
     * Sets is_preparation_for_reuse
     *
     * @param bool $is_preparation_for_reuse is_preparation_for_reuse
     *
     * @return $this
     */
    public function setIsPreparationForReuse($is_preparation_for_reuse)
    {
        $this->container['is_preparation_for_reuse'] = $is_preparation_for_reuse;

        return $this;
    }

    /**
     * Gets is_another_recovery_process
     *
     * @return bool
     */
    public function getIsAnotherRecoveryProcess()
    {
        return $this->container['is_another_recovery_process'];
    }

    /**
     * Sets is_another_recovery_process
     *
     * @param bool $is_another_recovery_process Inny proces odzysku
     *
     * @return $this
     */
    public function setIsAnotherRecoveryProcess($is_another_recovery_process)
    {
        $this->container['is_another_recovery_process'] = $is_another_recovery_process;

        return $this;
    }

    /**
     * Gets is_neutralization
     *
     * @return bool
     */
    public function getIsNeutralization()
    {
        return $this->container['is_neutralization'];
    }

    /**
     * Sets is_neutralization
     *
     * @param bool $is_neutralization Un - unieszkodliwianie
     *
     * @return $this
     */
    public function setIsNeutralization($is_neutralization)
    {
        $this->container['is_neutralization'] = $is_neutralization;

        return $this;
    }

    /**
     * Gets transferred_waste_mass
     *
     * @return double
     */
    public function getTransferredWasteMass()
    {
        return $this->container['transferred_waste_mass'];
    }

    /**
     * Sets transferred_waste_mass
     *
     * @param double $transferred_waste_mass 
     *
     * @return $this
     */
    public function setTransferredWasteMass($transferred_waste_mass)
    {
        $this->container['transferred_waste_mass'] = $transferred_waste_mass;

        return $this;
    }

    /**
     * Gets transferred_card_number
     *
     * @return string
     */
    public function getTransferredCardNumber()
    {
        return $this->container['transferred_card_number'];
    }

    /**
     * Sets transferred_card_number
     *
     * @param string $transferred_card_number 
     *
     * @return $this
     */
    public function setTransferredCardNumber($transferred_card_number)
    {
        $this->container['transferred_card_number'] = $transferred_card_number;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string $additional_information additional_information
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets collected_waste_mass
     *
     * @return double
     */
    public function getCollectedWasteMass()
    {
        return $this->container['collected_waste_mass'];
    }

    /**
     * Sets collected_waste_mass
     *
     * @param double $collected_waste_mass collected_waste_mass
     *
     * @return $this
     */
    public function setCollectedWasteMass($collected_waste_mass)
    {
        $this->container['collected_waste_mass'] = $collected_waste_mass;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


