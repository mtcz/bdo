<?php
/**
 * WasteRegisterPublicApiApiModelsRequestsAuthV1AuthPaginationParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsRequestsAuthV1AuthPaginationParameters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsRequestsAuthV1AuthPaginationParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Requests.Auth.V1.AuthPaginationParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Aorder',
        'page' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Apage',
        'get_order_column' => 'string',
        'get_order_direction' => 'string',
        'get_ordering' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order' => null,
        'page' => null,
        'get_order_column' => null,
        'get_order_direction' => null,
        'get_ordering' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'page' => 'page',
        'get_order_column' => 'getOrderColumn',
        'get_order_direction' => 'getOrderDirection',
        'get_ordering' => 'getOrdering'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'page' => 'setPage',
        'get_order_column' => 'setGetOrderColumn',
        'get_order_direction' => 'setGetOrderDirection',
        'get_ordering' => 'setGetOrdering'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'page' => 'getPage',
        'get_order_column' => 'getGetOrderColumn',
        'get_order_direction' => 'getGetOrderDirection',
        'get_ordering' => 'getGetOrdering'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['get_order_column'] = isset($data['get_order_column']) ? $data['get_order_column'] : null;
        $this->container['get_order_direction'] = isset($data['get_order_direction']) ? $data['get_order_direction'] : null;
        $this->container['get_ordering'] = isset($data['get_ordering']) ? $data['get_ordering'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Aorder
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Aorder $order Ustawienia sortowania wyników
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets page
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Apage
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsAuthV1Apage $page Ustawienia strony z wynikami
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets get_order_column
     *
     * @return string
     */
    public function getGetOrderColumn()
    {
        return $this->container['get_order_column'];
    }

    /**
     * Sets get_order_column
     *
     * @param string $get_order_column Identyfikator kolumny, według której ma być zrelizowane sortowanie
     *
     * @return $this
     */
    public function setGetOrderColumn($get_order_column)
    {
        $this->container['get_order_column'] = $get_order_column;

        return $this;
    }

    /**
     * Gets get_order_direction
     *
     * @return string
     */
    public function getGetOrderDirection()
    {
        return $this->container['get_order_direction'];
    }

    /**
     * Sets get_order_direction
     *
     * @param string $get_order_direction Kierunek sortowania
     *
     * @return $this
     */
    public function setGetOrderDirection($get_order_direction)
    {
        $this->container['get_order_direction'] = $get_order_direction;

        return $this;
    }

    /**
     * Gets get_ordering
     *
     * @return string
     */
    public function getGetOrdering()
    {
        return $this->container['get_ordering'];
    }

    /**
     * Sets get_ordering
     *
     * @param string $get_ordering Sortowanie
     *
     * @return $this
     */
    public function setGetOrdering($get_ordering)
    {
        $this->container['get_ordering'] = $get_ordering;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


