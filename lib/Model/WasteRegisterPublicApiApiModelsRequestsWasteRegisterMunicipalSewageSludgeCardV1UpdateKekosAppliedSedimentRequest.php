<?php
/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Requests.WasteRegister.MunicipalSewageSludgeCard.V1.UpdateKekosAppliedSedimentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kekos_applied_sediment_id' => 'string',
        'kekos_research_card_id' => 'string',
        'kpo_id' => 'string',
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'sludge_application_date' => '\DateTime',
        'sludge_application_place_teryt_pk' => 'string',
        'sludge_application_surface' => 'double',
        'kekos_batch_of_generated_sediment_id' => 'string',
        'is_application_purpose_crops' => 'bool',
        'is_application_purpose_plants' => 'bool',
        'is_application_purpose_inedible_plants' => 'bool',
        'is_application_purpose_reclamation' => 'bool',
        'is_application_purpose_land_adjustment' => 'bool',
        'is_soil_group_light' => 'bool',
        'is_soil_group_medium' => 'bool',
        'is_soil_group_heavy' => 'bool',
        'land_surface_rulers' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto[]',
        'lot_precincts' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kekos_applied_sediment_id' => 'uuid',
        'kekos_research_card_id' => 'uuid',
        'kpo_id' => 'uuid',
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'sludge_application_date' => 'date-time',
        'sludge_application_place_teryt_pk' => null,
        'sludge_application_surface' => 'double',
        'kekos_batch_of_generated_sediment_id' => 'uuid',
        'is_application_purpose_crops' => null,
        'is_application_purpose_plants' => null,
        'is_application_purpose_inedible_plants' => null,
        'is_application_purpose_reclamation' => null,
        'is_application_purpose_land_adjustment' => null,
        'is_soil_group_light' => null,
        'is_soil_group_medium' => null,
        'is_soil_group_heavy' => null,
        'land_surface_rulers' => null,
        'lot_precincts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kekos_applied_sediment_id' => 'kekosAppliedSedimentId',
        'kekos_research_card_id' => 'kekosResearchCardId',
        'kpo_id' => 'kpoId',
        'applied_sludge_mass' => 'appliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'appliedSludgeDryMatterMass',
        'sludge_application_date' => 'sludgeApplicationDate',
        'sludge_application_place_teryt_pk' => 'sludgeApplicationPlaceTerytPk',
        'sludge_application_surface' => 'sludgeApplicationSurface',
        'kekos_batch_of_generated_sediment_id' => 'kekosBatchOfGeneratedSedimentId',
        'is_application_purpose_crops' => 'isApplicationPurposeCrops',
        'is_application_purpose_plants' => 'isApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'isApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'isApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'isApplicationPurposeLandAdjustment',
        'is_soil_group_light' => 'isSoilGroupLight',
        'is_soil_group_medium' => 'isSoilGroupMedium',
        'is_soil_group_heavy' => 'isSoilGroupHeavy',
        'land_surface_rulers' => 'landSurfaceRulers',
        'lot_precincts' => 'lotPrecincts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kekos_applied_sediment_id' => 'setKekosAppliedSedimentId',
        'kekos_research_card_id' => 'setKekosResearchCardId',
        'kpo_id' => 'setKpoId',
        'applied_sludge_mass' => 'setAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'setAppliedSludgeDryMatterMass',
        'sludge_application_date' => 'setSludgeApplicationDate',
        'sludge_application_place_teryt_pk' => 'setSludgeApplicationPlaceTerytPk',
        'sludge_application_surface' => 'setSludgeApplicationSurface',
        'kekos_batch_of_generated_sediment_id' => 'setKekosBatchOfGeneratedSedimentId',
        'is_application_purpose_crops' => 'setIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'setIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'setIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'setIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'setIsApplicationPurposeLandAdjustment',
        'is_soil_group_light' => 'setIsSoilGroupLight',
        'is_soil_group_medium' => 'setIsSoilGroupMedium',
        'is_soil_group_heavy' => 'setIsSoilGroupHeavy',
        'land_surface_rulers' => 'setLandSurfaceRulers',
        'lot_precincts' => 'setLotPrecincts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kekos_applied_sediment_id' => 'getKekosAppliedSedimentId',
        'kekos_research_card_id' => 'getKekosResearchCardId',
        'kpo_id' => 'getKpoId',
        'applied_sludge_mass' => 'getAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'getAppliedSludgeDryMatterMass',
        'sludge_application_date' => 'getSludgeApplicationDate',
        'sludge_application_place_teryt_pk' => 'getSludgeApplicationPlaceTerytPk',
        'sludge_application_surface' => 'getSludgeApplicationSurface',
        'kekos_batch_of_generated_sediment_id' => 'getKekosBatchOfGeneratedSedimentId',
        'is_application_purpose_crops' => 'getIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'getIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'getIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'getIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'getIsApplicationPurposeLandAdjustment',
        'is_soil_group_light' => 'getIsSoilGroupLight',
        'is_soil_group_medium' => 'getIsSoilGroupMedium',
        'is_soil_group_heavy' => 'getIsSoilGroupHeavy',
        'land_surface_rulers' => 'getLandSurfaceRulers',
        'lot_precincts' => 'getLotPrecincts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kekos_applied_sediment_id'] = isset($data['kekos_applied_sediment_id']) ? $data['kekos_applied_sediment_id'] : null;
        $this->container['kekos_research_card_id'] = isset($data['kekos_research_card_id']) ? $data['kekos_research_card_id'] : null;
        $this->container['kpo_id'] = isset($data['kpo_id']) ? $data['kpo_id'] : null;
        $this->container['applied_sludge_mass'] = isset($data['applied_sludge_mass']) ? $data['applied_sludge_mass'] : null;
        $this->container['applied_sludge_dry_matter_mass'] = isset($data['applied_sludge_dry_matter_mass']) ? $data['applied_sludge_dry_matter_mass'] : null;
        $this->container['sludge_application_date'] = isset($data['sludge_application_date']) ? $data['sludge_application_date'] : null;
        $this->container['sludge_application_place_teryt_pk'] = isset($data['sludge_application_place_teryt_pk']) ? $data['sludge_application_place_teryt_pk'] : null;
        $this->container['sludge_application_surface'] = isset($data['sludge_application_surface']) ? $data['sludge_application_surface'] : null;
        $this->container['kekos_batch_of_generated_sediment_id'] = isset($data['kekos_batch_of_generated_sediment_id']) ? $data['kekos_batch_of_generated_sediment_id'] : null;
        $this->container['is_application_purpose_crops'] = isset($data['is_application_purpose_crops']) ? $data['is_application_purpose_crops'] : null;
        $this->container['is_application_purpose_plants'] = isset($data['is_application_purpose_plants']) ? $data['is_application_purpose_plants'] : null;
        $this->container['is_application_purpose_inedible_plants'] = isset($data['is_application_purpose_inedible_plants']) ? $data['is_application_purpose_inedible_plants'] : null;
        $this->container['is_application_purpose_reclamation'] = isset($data['is_application_purpose_reclamation']) ? $data['is_application_purpose_reclamation'] : null;
        $this->container['is_application_purpose_land_adjustment'] = isset($data['is_application_purpose_land_adjustment']) ? $data['is_application_purpose_land_adjustment'] : null;
        $this->container['is_soil_group_light'] = isset($data['is_soil_group_light']) ? $data['is_soil_group_light'] : null;
        $this->container['is_soil_group_medium'] = isset($data['is_soil_group_medium']) ? $data['is_soil_group_medium'] : null;
        $this->container['is_soil_group_heavy'] = isset($data['is_soil_group_heavy']) ? $data['is_soil_group_heavy'] : null;
        $this->container['land_surface_rulers'] = isset($data['land_surface_rulers']) ? $data['land_surface_rulers'] : null;
        $this->container['lot_precincts'] = isset($data['lot_precincts']) ? $data['lot_precincts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kekos_applied_sediment_id
     *
     * @return string
     */
    public function getKekosAppliedSedimentId()
    {
        return $this->container['kekos_applied_sediment_id'];
    }

    /**
     * Sets kekos_applied_sediment_id
     *
     * @param string $kekos_applied_sediment_id Id wpisu Zastosowane osady
     *
     * @return $this
     */
    public function setKekosAppliedSedimentId($kekos_applied_sediment_id)
    {
        $this->container['kekos_applied_sediment_id'] = $kekos_applied_sediment_id;

        return $this;
    }

    /**
     * Gets kekos_research_card_id
     *
     * @return string
     */
    public function getKekosResearchCardId()
    {
        return $this->container['kekos_research_card_id'];
    }

    /**
     * Sets kekos_research_card_id
     *
     * @param string $kekos_research_card_id Id karty badań
     *
     * @return $this
     */
    public function setKekosResearchCardId($kekos_research_card_id)
    {
        $this->container['kekos_research_card_id'] = $kekos_research_card_id;

        return $this;
    }

    /**
     * Gets kpo_id
     *
     * @return string
     */
    public function getKpoId()
    {
        return $this->container['kpo_id'];
    }

    /**
     * Sets kpo_id
     *
     * @param string $kpo_id Id karty przekazania odpadów
     *
     * @return $this
     */
    public function setKpoId($kpo_id)
    {
        $this->container['kpo_id'] = $kpo_id;

        return $this;
    }

    /**
     * Gets applied_sludge_mass
     *
     * @return double
     */
    public function getAppliedSludgeMass()
    {
        return $this->container['applied_sludge_mass'];
    }

    /**
     * Sets applied_sludge_mass
     *
     * @param double $applied_sludge_mass Masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeMass($applied_sludge_mass)
    {
        $this->container['applied_sludge_mass'] = $applied_sludge_mass;

        return $this;
    }

    /**
     * Gets applied_sludge_dry_matter_mass
     *
     * @return double
     */
    public function getAppliedSludgeDryMatterMass()
    {
        return $this->container['applied_sludge_dry_matter_mass'];
    }

    /**
     * Sets applied_sludge_dry_matter_mass
     *
     * @param double $applied_sludge_dry_matter_mass Sucha masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeDryMatterMass($applied_sludge_dry_matter_mass)
    {
        $this->container['applied_sludge_dry_matter_mass'] = $applied_sludge_dry_matter_mass;

        return $this;
    }

    /**
     * Gets sludge_application_date
     *
     * @return \DateTime
     */
    public function getSludgeApplicationDate()
    {
        return $this->container['sludge_application_date'];
    }

    /**
     * Sets sludge_application_date
     *
     * @param \DateTime $sludge_application_date Data zastosowania komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setSludgeApplicationDate($sludge_application_date)
    {
        $this->container['sludge_application_date'] = $sludge_application_date;

        return $this;
    }

    /**
     * Gets sludge_application_place_teryt_pk
     *
     * @return string
     */
    public function getSludgeApplicationPlaceTerytPk()
    {
        return $this->container['sludge_application_place_teryt_pk'];
    }

    /**
     * Sets sludge_application_place_teryt_pk
     *
     * @param string $sludge_application_place_teryt_pk Miejsce stosowania komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setSludgeApplicationPlaceTerytPk($sludge_application_place_teryt_pk)
    {
        $this->container['sludge_application_place_teryt_pk'] = $sludge_application_place_teryt_pk;

        return $this;
    }

    /**
     * Gets sludge_application_surface
     *
     * @return double
     */
    public function getSludgeApplicationSurface()
    {
        return $this->container['sludge_application_surface'];
    }

    /**
     * Sets sludge_application_surface
     *
     * @param double $sludge_application_surface Powierzchnia zastosowania komunalnych osadów ściekowych [ha]
     *
     * @return $this
     */
    public function setSludgeApplicationSurface($sludge_application_surface)
    {
        $this->container['sludge_application_surface'] = $sludge_application_surface;

        return $this;
    }

    /**
     * Gets kekos_batch_of_generated_sediment_id
     *
     * @return string
     */
    public function getKekosBatchOfGeneratedSedimentId()
    {
        return $this->container['kekos_batch_of_generated_sediment_id'];
    }

    /**
     * Sets kekos_batch_of_generated_sediment_id
     *
     * @param string $kekos_batch_of_generated_sediment_id Id wpisu Wytworzone osady
     *
     * @return $this
     */
    public function setKekosBatchOfGeneratedSedimentId($kekos_batch_of_generated_sediment_id)
    {
        $this->container['kekos_batch_of_generated_sediment_id'] = $kekos_batch_of_generated_sediment_id;

        return $this;
    }

    /**
     * Gets is_application_purpose_crops
     *
     * @return bool
     */
    public function getIsApplicationPurposeCrops()
    {
        return $this->container['is_application_purpose_crops'];
    }

    /**
     * Sets is_application_purpose_crops
     *
     * @param bool $is_application_purpose_crops Cel: w rolnictwie
     *
     * @return $this
     */
    public function setIsApplicationPurposeCrops($is_application_purpose_crops)
    {
        $this->container['is_application_purpose_crops'] = $is_application_purpose_crops;

        return $this;
    }

    /**
     * Gets is_application_purpose_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposePlants()
    {
        return $this->container['is_application_purpose_plants'];
    }

    /**
     * Sets is_application_purpose_plants
     *
     * @param bool $is_application_purpose_plants Cel: do uprawy roślin przeznaczonych do produkcji kompostu
     *
     * @return $this
     */
    public function setIsApplicationPurposePlants($is_application_purpose_plants)
    {
        $this->container['is_application_purpose_plants'] = $is_application_purpose_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_inedible_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposeInediblePlants()
    {
        return $this->container['is_application_purpose_inedible_plants'];
    }

    /**
     * Sets is_application_purpose_inedible_plants
     *
     * @param bool $is_application_purpose_inedible_plants Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz
     *
     * @return $this
     */
    public function setIsApplicationPurposeInediblePlants($is_application_purpose_inedible_plants)
    {
        $this->container['is_application_purpose_inedible_plants'] = $is_application_purpose_inedible_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_reclamation
     *
     * @return bool
     */
    public function getIsApplicationPurposeReclamation()
    {
        return $this->container['is_application_purpose_reclamation'];
    }

    /**
     * Sets is_application_purpose_reclamation
     *
     * @param bool $is_application_purpose_reclamation Cel: do rekultywacji terenów w tym gruntów na cele rolne
     *
     * @return $this
     */
    public function setIsApplicationPurposeReclamation($is_application_purpose_reclamation)
    {
        $this->container['is_application_purpose_reclamation'] = $is_application_purpose_reclamation;

        return $this;
    }

    /**
     * Gets is_application_purpose_land_adjustment
     *
     * @return bool
     */
    public function getIsApplicationPurposeLandAdjustment()
    {
        return $this->container['is_application_purpose_land_adjustment'];
    }

    /**
     * Sets is_application_purpose_land_adjustment
     *
     * @param bool $is_application_purpose_land_adjustment Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..)
     *
     * @return $this
     */
    public function setIsApplicationPurposeLandAdjustment($is_application_purpose_land_adjustment)
    {
        $this->container['is_application_purpose_land_adjustment'] = $is_application_purpose_land_adjustment;

        return $this;
    }

    /**
     * Gets is_soil_group_light
     *
     * @return bool
     */
    public function getIsSoilGroupLight()
    {
        return $this->container['is_soil_group_light'];
    }

    /**
     * Sets is_soil_group_light
     *
     * @param bool $is_soil_group_light Grupa glepy: lekka
     *
     * @return $this
     */
    public function setIsSoilGroupLight($is_soil_group_light)
    {
        $this->container['is_soil_group_light'] = $is_soil_group_light;

        return $this;
    }

    /**
     * Gets is_soil_group_medium
     *
     * @return bool
     */
    public function getIsSoilGroupMedium()
    {
        return $this->container['is_soil_group_medium'];
    }

    /**
     * Sets is_soil_group_medium
     *
     * @param bool $is_soil_group_medium Grupa glepy: średnia
     *
     * @return $this
     */
    public function setIsSoilGroupMedium($is_soil_group_medium)
    {
        $this->container['is_soil_group_medium'] = $is_soil_group_medium;

        return $this;
    }

    /**
     * Gets is_soil_group_heavy
     *
     * @return bool
     */
    public function getIsSoilGroupHeavy()
    {
        return $this->container['is_soil_group_heavy'];
    }

    /**
     * Sets is_soil_group_heavy
     *
     * @param bool $is_soil_group_heavy Grupa glepy: ciężka
     *
     * @return $this
     */
    public function setIsSoilGroupHeavy($is_soil_group_heavy)
    {
        $this->container['is_soil_group_heavy'] = $is_soil_group_heavy;

        return $this;
    }

    /**
     * Gets land_surface_rulers
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto[]
     */
    public function getLandSurfaceRulers()
    {
        return $this->container['land_surface_rulers'];
    }

    /**
     * Sets land_surface_rulers
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto[] $land_surface_rulers Informacje o miejscu stosowania osadów
     *
     * @return $this
     */
    public function setLandSurfaceRulers($land_surface_rulers)
    {
        $this->container['land_surface_rulers'] = $land_surface_rulers;

        return $this;
    }

    /**
     * Gets lot_precincts
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto[]
     */
    public function getLotPrecincts()
    {
        return $this->container['lot_precincts'];
    }

    /**
     * Sets lot_precincts
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto[] $lot_precincts Lista numerów działek i obrębów geodezyjnych
     *
     * @return $this
     */
    public function setLotPrecincts($lot_precincts)
    {
        $this->container['lot_precincts'] = $lot_precincts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


