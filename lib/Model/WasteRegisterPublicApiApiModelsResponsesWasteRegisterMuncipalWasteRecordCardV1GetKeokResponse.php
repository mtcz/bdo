<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MuncipalWasteRecordCard.V1.GetKeokResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keok_id' => 'string',
        'eup_id' => 'string',
        'card_number' => 'string',
        'waste_code_id' => 'int',
        'waste_code' => 'string',
        'waste_code_name' => 'string',
        'year' => 'int',
        'waste_origin_teryt_id' => 'string',
        'waste_origin_address_html' => 'string',
        'waste_origin_address_formatted' => 'string',
        'initial_waste_mass' => 'double',
        'is_waste_receive' => 'bool',
        'is_waste_collecting' => 'bool',
        'is_salvage' => 'bool',
        'is_neutralization' => 'bool',
        'can_be_edited' => 'bool',
        'waste_code_extended' => 'bool',
        'waste_code_extended_description' => 'string',
        'hazardous_waste_reclassification' => 'bool',
        'hazardous_waste_reclassification_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keok_id' => 'uuid',
        'eup_id' => 'uuid',
        'card_number' => null,
        'waste_code_id' => 'int32',
        'waste_code' => null,
        'waste_code_name' => null,
        'year' => 'int32',
        'waste_origin_teryt_id' => null,
        'waste_origin_address_html' => null,
        'waste_origin_address_formatted' => null,
        'initial_waste_mass' => 'double',
        'is_waste_receive' => null,
        'is_waste_collecting' => null,
        'is_salvage' => null,
        'is_neutralization' => null,
        'can_be_edited' => null,
        'waste_code_extended' => null,
        'waste_code_extended_description' => null,
        'hazardous_waste_reclassification' => null,
        'hazardous_waste_reclassification_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keok_id' => 'keokId',
        'eup_id' => 'eupId',
        'card_number' => 'cardNumber',
        'waste_code_id' => 'wasteCodeId',
        'waste_code' => 'wasteCode',
        'waste_code_name' => 'wasteCodeName',
        'year' => 'year',
        'waste_origin_teryt_id' => 'wasteOriginTerytId',
        'waste_origin_address_html' => 'wasteOriginAddressHtml',
        'waste_origin_address_formatted' => 'wasteOriginAddressFormatted',
        'initial_waste_mass' => 'initialWasteMass',
        'is_waste_receive' => 'isWasteReceive',
        'is_waste_collecting' => 'isWasteCollecting',
        'is_salvage' => 'isSalvage',
        'is_neutralization' => 'isNeutralization',
        'can_be_edited' => 'canBeEdited',
        'waste_code_extended' => 'wasteCodeExtended',
        'waste_code_extended_description' => 'wasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'hazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'hazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keok_id' => 'setKeokId',
        'eup_id' => 'setEupId',
        'card_number' => 'setCardNumber',
        'waste_code_id' => 'setWasteCodeId',
        'waste_code' => 'setWasteCode',
        'waste_code_name' => 'setWasteCodeName',
        'year' => 'setYear',
        'waste_origin_teryt_id' => 'setWasteOriginTerytId',
        'waste_origin_address_html' => 'setWasteOriginAddressHtml',
        'waste_origin_address_formatted' => 'setWasteOriginAddressFormatted',
        'initial_waste_mass' => 'setInitialWasteMass',
        'is_waste_receive' => 'setIsWasteReceive',
        'is_waste_collecting' => 'setIsWasteCollecting',
        'is_salvage' => 'setIsSalvage',
        'is_neutralization' => 'setIsNeutralization',
        'can_be_edited' => 'setCanBeEdited',
        'waste_code_extended' => 'setWasteCodeExtended',
        'waste_code_extended_description' => 'setWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'setHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'setHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keok_id' => 'getKeokId',
        'eup_id' => 'getEupId',
        'card_number' => 'getCardNumber',
        'waste_code_id' => 'getWasteCodeId',
        'waste_code' => 'getWasteCode',
        'waste_code_name' => 'getWasteCodeName',
        'year' => 'getYear',
        'waste_origin_teryt_id' => 'getWasteOriginTerytId',
        'waste_origin_address_html' => 'getWasteOriginAddressHtml',
        'waste_origin_address_formatted' => 'getWasteOriginAddressFormatted',
        'initial_waste_mass' => 'getInitialWasteMass',
        'is_waste_receive' => 'getIsWasteReceive',
        'is_waste_collecting' => 'getIsWasteCollecting',
        'is_salvage' => 'getIsSalvage',
        'is_neutralization' => 'getIsNeutralization',
        'can_be_edited' => 'getCanBeEdited',
        'waste_code_extended' => 'getWasteCodeExtended',
        'waste_code_extended_description' => 'getWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'getHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'getHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keok_id'] = isset($data['keok_id']) ? $data['keok_id'] : null;
        $this->container['eup_id'] = isset($data['eup_id']) ? $data['eup_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['waste_code_id'] = isset($data['waste_code_id']) ? $data['waste_code_id'] : null;
        $this->container['waste_code'] = isset($data['waste_code']) ? $data['waste_code'] : null;
        $this->container['waste_code_name'] = isset($data['waste_code_name']) ? $data['waste_code_name'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['waste_origin_teryt_id'] = isset($data['waste_origin_teryt_id']) ? $data['waste_origin_teryt_id'] : null;
        $this->container['waste_origin_address_html'] = isset($data['waste_origin_address_html']) ? $data['waste_origin_address_html'] : null;
        $this->container['waste_origin_address_formatted'] = isset($data['waste_origin_address_formatted']) ? $data['waste_origin_address_formatted'] : null;
        $this->container['initial_waste_mass'] = isset($data['initial_waste_mass']) ? $data['initial_waste_mass'] : null;
        $this->container['is_waste_receive'] = isset($data['is_waste_receive']) ? $data['is_waste_receive'] : null;
        $this->container['is_waste_collecting'] = isset($data['is_waste_collecting']) ? $data['is_waste_collecting'] : null;
        $this->container['is_salvage'] = isset($data['is_salvage']) ? $data['is_salvage'] : null;
        $this->container['is_neutralization'] = isset($data['is_neutralization']) ? $data['is_neutralization'] : null;
        $this->container['can_be_edited'] = isset($data['can_be_edited']) ? $data['can_be_edited'] : null;
        $this->container['waste_code_extended'] = isset($data['waste_code_extended']) ? $data['waste_code_extended'] : null;
        $this->container['waste_code_extended_description'] = isset($data['waste_code_extended_description']) ? $data['waste_code_extended_description'] : null;
        $this->container['hazardous_waste_reclassification'] = isset($data['hazardous_waste_reclassification']) ? $data['hazardous_waste_reclassification'] : null;
        $this->container['hazardous_waste_reclassification_description'] = isset($data['hazardous_waste_reclassification_description']) ? $data['hazardous_waste_reclassification_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keok_id
     *
     * @return string
     */
    public function getKeokId()
    {
        return $this->container['keok_id'];
    }

    /**
     * Sets keok_id
     *
     * @param string $keok_id 
     *
     * @return $this
     */
    public function setKeokId($keok_id)
    {
        $this->container['keok_id'] = $keok_id;

        return $this;
    }

    /**
     * Gets eup_id
     *
     * @return string
     */
    public function getEupId()
    {
        return $this->container['eup_id'];
    }

    /**
     * Sets eup_id
     *
     * @param string $eup_id Id miejsca prowadzenia działalności
     *
     * @return $this
     */
    public function setEupId($eup_id)
    {
        $this->container['eup_id'] = $eup_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer karty
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets waste_code_id
     *
     * @return int
     */
    public function getWasteCodeId()
    {
        return $this->container['waste_code_id'];
    }

    /**
     * Sets waste_code_id
     *
     * @param int $waste_code_id Id kodu odpadu
     *
     * @return $this
     */
    public function setWasteCodeId($waste_code_id)
    {
        $this->container['waste_code_id'] = $waste_code_id;

        return $this;
    }

    /**
     * Gets waste_code
     *
     * @return string
     */
    public function getWasteCode()
    {
        return $this->container['waste_code'];
    }

    /**
     * Sets waste_code
     *
     * @param string $waste_code Kod odpadu
     *
     * @return $this
     */
    public function setWasteCode($waste_code)
    {
        $this->container['waste_code'] = $waste_code;

        return $this;
    }

    /**
     * Gets waste_code_name
     *
     * @return string
     */
    public function getWasteCodeName()
    {
        return $this->container['waste_code_name'];
    }

    /**
     * Sets waste_code_name
     *
     * @param string $waste_code_name 
     *
     * @return $this
     */
    public function setWasteCodeName($waste_code_name)
    {
        $this->container['waste_code_name'] = $waste_code_name;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year Rok kalendarzowy
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets waste_origin_teryt_id
     *
     * @return string
     */
    public function getWasteOriginTerytId()
    {
        return $this->container['waste_origin_teryt_id'];
    }

    /**
     * Sets waste_origin_teryt_id
     *
     * @param string $waste_origin_teryt_id 
     *
     * @return $this
     */
    public function setWasteOriginTerytId($waste_origin_teryt_id)
    {
        $this->container['waste_origin_teryt_id'] = $waste_origin_teryt_id;

        return $this;
    }

    /**
     * Gets waste_origin_address_html
     *
     * @return string
     */
    public function getWasteOriginAddressHtml()
    {
        return $this->container['waste_origin_address_html'];
    }

    /**
     * Sets waste_origin_address_html
     *
     * @param string $waste_origin_address_html 
     *
     * @return $this
     */
    public function setWasteOriginAddressHtml($waste_origin_address_html)
    {
        $this->container['waste_origin_address_html'] = $waste_origin_address_html;

        return $this;
    }

    /**
     * Gets waste_origin_address_formatted
     *
     * @return string
     */
    public function getWasteOriginAddressFormatted()
    {
        return $this->container['waste_origin_address_formatted'];
    }

    /**
     * Sets waste_origin_address_formatted
     *
     * @param string $waste_origin_address_formatted 
     *
     * @return $this
     */
    public function setWasteOriginAddressFormatted($waste_origin_address_formatted)
    {
        $this->container['waste_origin_address_formatted'] = $waste_origin_address_formatted;

        return $this;
    }

    /**
     * Gets initial_waste_mass
     *
     * @return double
     */
    public function getInitialWasteMass()
    {
        return $this->container['initial_waste_mass'];
    }

    /**
     * Sets initial_waste_mass
     *
     * @param double $initial_waste_mass 
     *
     * @return $this
     */
    public function setInitialWasteMass($initial_waste_mass)
    {
        $this->container['initial_waste_mass'] = $initial_waste_mass;

        return $this;
    }

    /**
     * Gets is_waste_receive
     *
     * @return bool
     */
    public function getIsWasteReceive()
    {
        return $this->container['is_waste_receive'];
    }

    /**
     * Sets is_waste_receive
     *
     * @param bool $is_waste_receive 
     *
     * @return $this
     */
    public function setIsWasteReceive($is_waste_receive)
    {
        $this->container['is_waste_receive'] = $is_waste_receive;

        return $this;
    }

    /**
     * Gets is_waste_collecting
     *
     * @return bool
     */
    public function getIsWasteCollecting()
    {
        return $this->container['is_waste_collecting'];
    }

    /**
     * Sets is_waste_collecting
     *
     * @param bool $is_waste_collecting Zb - zbieranie odpadów
     *
     * @return $this
     */
    public function setIsWasteCollecting($is_waste_collecting)
    {
        $this->container['is_waste_collecting'] = $is_waste_collecting;

        return $this;
    }

    /**
     * Gets is_salvage
     *
     * @return bool
     */
    public function getIsSalvage()
    {
        return $this->container['is_salvage'];
    }

    /**
     * Sets is_salvage
     *
     * @param bool $is_salvage Od - odzysk
     *
     * @return $this
     */
    public function setIsSalvage($is_salvage)
    {
        $this->container['is_salvage'] = $is_salvage;

        return $this;
    }

    /**
     * Gets is_neutralization
     *
     * @return bool
     */
    public function getIsNeutralization()
    {
        return $this->container['is_neutralization'];
    }

    /**
     * Sets is_neutralization
     *
     * @param bool $is_neutralization Un - unieszkodliwianie
     *
     * @return $this
     */
    public function setIsNeutralization($is_neutralization)
    {
        $this->container['is_neutralization'] = $is_neutralization;

        return $this;
    }

    /**
     * Gets can_be_edited
     *
     * @return bool
     */
    public function getCanBeEdited()
    {
        return $this->container['can_be_edited'];
    }

    /**
     * Sets can_be_edited
     *
     * @param bool $can_be_edited 
     *
     * @return $this
     */
    public function setCanBeEdited($can_be_edited)
    {
        $this->container['can_be_edited'] = $can_be_edited;

        return $this;
    }

    /**
     * Gets waste_code_extended
     *
     * @return bool
     */
    public function getWasteCodeExtended()
    {
        return $this->container['waste_code_extended'];
    }

    /**
     * Sets waste_code_extended
     *
     * @param bool $waste_code_extended Kod ex
     *
     * @return $this
     */
    public function setWasteCodeExtended($waste_code_extended)
    {
        $this->container['waste_code_extended'] = $waste_code_extended;

        return $this;
    }

    /**
     * Gets waste_code_extended_description
     *
     * @return string
     */
    public function getWasteCodeExtendedDescription()
    {
        return $this->container['waste_code_extended_description'];
    }

    /**
     * Sets waste_code_extended_description
     *
     * @param string $waste_code_extended_description Rodzaj odpadu ex
     *
     * @return $this
     */
    public function setWasteCodeExtendedDescription($waste_code_extended_description)
    {
        $this->container['waste_code_extended_description'] = $waste_code_extended_description;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification
     *
     * @return bool
     */
    public function getHazardousWasteReclassification()
    {
        return $this->container['hazardous_waste_reclassification'];
    }

    /**
     * Sets hazardous_waste_reclassification
     *
     * @param bool $hazardous_waste_reclassification Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
     *
     * @return $this
     */
    public function setHazardousWasteReclassification($hazardous_waste_reclassification)
    {
        $this->container['hazardous_waste_reclassification'] = $hazardous_waste_reclassification;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification_description
     *
     * @return string
     */
    public function getHazardousWasteReclassificationDescription()
    {
        return $this->container['hazardous_waste_reclassification_description'];
    }

    /**
     * Sets hazardous_waste_reclassification_description
     *
     * @param string $hazardous_waste_reclassification_description Rodzaj odpadu
     *
     * @return $this
     */
    public function setHazardousWasteReclassificationDescription($hazardous_waste_reclassification_description)
    {
        $this->container['hazardous_waste_reclassification_description'] = $hazardous_waste_reclassification_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


