<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MunicipalSewageSludgeCard.V1.KekosPrintingPageListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batch_number' => 'string',
        'created_user_full_name' => 'string',
        'date_of_sewage_sludge_creation' => '\DateTime',
        'is_fermentation' => 'bool',
        'is_drying' => 'bool',
        'is_dehydration' => 'bool',
        'is_composting' => 'bool',
        'is_hygienisation' => 'bool',
        'is_different_process' => 'bool',
        'different_process' => 'string',
        'sludge_mass_mg' => 'double',
        'sludge_mass_mg_sm' => 'double',
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'kpo_card_number' => 'string',
        'is_application_purpose_crops' => 'bool',
        'is_application_purpose_plants' => 'bool',
        'is_application_purpose_inedible_plants' => 'bool',
        'is_application_purpose_reclamation' => 'bool',
        'is_application_purpose_land_adjustment' => 'bool',
        'recording_user_full_name' => 'string',
        'sludge_application_date' => '\DateTime',
        'research_card_number' => 'string',
        'created_user_full_name_applied_sediment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batch_number' => null,
        'created_user_full_name' => null,
        'date_of_sewage_sludge_creation' => 'date-time',
        'is_fermentation' => null,
        'is_drying' => null,
        'is_dehydration' => null,
        'is_composting' => null,
        'is_hygienisation' => null,
        'is_different_process' => null,
        'different_process' => null,
        'sludge_mass_mg' => 'double',
        'sludge_mass_mg_sm' => 'double',
        'applied_sludge_mass' => 'double',
        'applied_sludge_dry_matter_mass' => 'double',
        'kpo_card_number' => null,
        'is_application_purpose_crops' => null,
        'is_application_purpose_plants' => null,
        'is_application_purpose_inedible_plants' => null,
        'is_application_purpose_reclamation' => null,
        'is_application_purpose_land_adjustment' => null,
        'recording_user_full_name' => null,
        'sludge_application_date' => 'date-time',
        'research_card_number' => null,
        'created_user_full_name_applied_sediment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_number' => 'batchNumber',
        'created_user_full_name' => 'createdUserFullName',
        'date_of_sewage_sludge_creation' => 'dateOfSewageSludgeCreation',
        'is_fermentation' => 'isFermentation',
        'is_drying' => 'isDrying',
        'is_dehydration' => 'isDehydration',
        'is_composting' => 'isComposting',
        'is_hygienisation' => 'isHygienisation',
        'is_different_process' => 'isDifferentProcess',
        'different_process' => 'differentProcess',
        'sludge_mass_mg' => 'sludgeMassMg',
        'sludge_mass_mg_sm' => 'sludgeMassMgSm',
        'applied_sludge_mass' => 'appliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'appliedSludgeDryMatterMass',
        'kpo_card_number' => 'kpoCardNumber',
        'is_application_purpose_crops' => 'isApplicationPurposeCrops',
        'is_application_purpose_plants' => 'isApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'isApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'isApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'isApplicationPurposeLandAdjustment',
        'recording_user_full_name' => 'recordingUserFullName',
        'sludge_application_date' => 'sludgeApplicationDate',
        'research_card_number' => 'researchCardNumber',
        'created_user_full_name_applied_sediment' => 'createdUserFullNameAppliedSediment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_number' => 'setBatchNumber',
        'created_user_full_name' => 'setCreatedUserFullName',
        'date_of_sewage_sludge_creation' => 'setDateOfSewageSludgeCreation',
        'is_fermentation' => 'setIsFermentation',
        'is_drying' => 'setIsDrying',
        'is_dehydration' => 'setIsDehydration',
        'is_composting' => 'setIsComposting',
        'is_hygienisation' => 'setIsHygienisation',
        'is_different_process' => 'setIsDifferentProcess',
        'different_process' => 'setDifferentProcess',
        'sludge_mass_mg' => 'setSludgeMassMg',
        'sludge_mass_mg_sm' => 'setSludgeMassMgSm',
        'applied_sludge_mass' => 'setAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'setAppliedSludgeDryMatterMass',
        'kpo_card_number' => 'setKpoCardNumber',
        'is_application_purpose_crops' => 'setIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'setIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'setIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'setIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'setIsApplicationPurposeLandAdjustment',
        'recording_user_full_name' => 'setRecordingUserFullName',
        'sludge_application_date' => 'setSludgeApplicationDate',
        'research_card_number' => 'setResearchCardNumber',
        'created_user_full_name_applied_sediment' => 'setCreatedUserFullNameAppliedSediment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_number' => 'getBatchNumber',
        'created_user_full_name' => 'getCreatedUserFullName',
        'date_of_sewage_sludge_creation' => 'getDateOfSewageSludgeCreation',
        'is_fermentation' => 'getIsFermentation',
        'is_drying' => 'getIsDrying',
        'is_dehydration' => 'getIsDehydration',
        'is_composting' => 'getIsComposting',
        'is_hygienisation' => 'getIsHygienisation',
        'is_different_process' => 'getIsDifferentProcess',
        'different_process' => 'getDifferentProcess',
        'sludge_mass_mg' => 'getSludgeMassMg',
        'sludge_mass_mg_sm' => 'getSludgeMassMgSm',
        'applied_sludge_mass' => 'getAppliedSludgeMass',
        'applied_sludge_dry_matter_mass' => 'getAppliedSludgeDryMatterMass',
        'kpo_card_number' => 'getKpoCardNumber',
        'is_application_purpose_crops' => 'getIsApplicationPurposeCrops',
        'is_application_purpose_plants' => 'getIsApplicationPurposePlants',
        'is_application_purpose_inedible_plants' => 'getIsApplicationPurposeInediblePlants',
        'is_application_purpose_reclamation' => 'getIsApplicationPurposeReclamation',
        'is_application_purpose_land_adjustment' => 'getIsApplicationPurposeLandAdjustment',
        'recording_user_full_name' => 'getRecordingUserFullName',
        'sludge_application_date' => 'getSludgeApplicationDate',
        'research_card_number' => 'getResearchCardNumber',
        'created_user_full_name_applied_sediment' => 'getCreatedUserFullNameAppliedSediment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['created_user_full_name'] = isset($data['created_user_full_name']) ? $data['created_user_full_name'] : null;
        $this->container['date_of_sewage_sludge_creation'] = isset($data['date_of_sewage_sludge_creation']) ? $data['date_of_sewage_sludge_creation'] : null;
        $this->container['is_fermentation'] = isset($data['is_fermentation']) ? $data['is_fermentation'] : null;
        $this->container['is_drying'] = isset($data['is_drying']) ? $data['is_drying'] : null;
        $this->container['is_dehydration'] = isset($data['is_dehydration']) ? $data['is_dehydration'] : null;
        $this->container['is_composting'] = isset($data['is_composting']) ? $data['is_composting'] : null;
        $this->container['is_hygienisation'] = isset($data['is_hygienisation']) ? $data['is_hygienisation'] : null;
        $this->container['is_different_process'] = isset($data['is_different_process']) ? $data['is_different_process'] : null;
        $this->container['different_process'] = isset($data['different_process']) ? $data['different_process'] : null;
        $this->container['sludge_mass_mg'] = isset($data['sludge_mass_mg']) ? $data['sludge_mass_mg'] : null;
        $this->container['sludge_mass_mg_sm'] = isset($data['sludge_mass_mg_sm']) ? $data['sludge_mass_mg_sm'] : null;
        $this->container['applied_sludge_mass'] = isset($data['applied_sludge_mass']) ? $data['applied_sludge_mass'] : null;
        $this->container['applied_sludge_dry_matter_mass'] = isset($data['applied_sludge_dry_matter_mass']) ? $data['applied_sludge_dry_matter_mass'] : null;
        $this->container['kpo_card_number'] = isset($data['kpo_card_number']) ? $data['kpo_card_number'] : null;
        $this->container['is_application_purpose_crops'] = isset($data['is_application_purpose_crops']) ? $data['is_application_purpose_crops'] : null;
        $this->container['is_application_purpose_plants'] = isset($data['is_application_purpose_plants']) ? $data['is_application_purpose_plants'] : null;
        $this->container['is_application_purpose_inedible_plants'] = isset($data['is_application_purpose_inedible_plants']) ? $data['is_application_purpose_inedible_plants'] : null;
        $this->container['is_application_purpose_reclamation'] = isset($data['is_application_purpose_reclamation']) ? $data['is_application_purpose_reclamation'] : null;
        $this->container['is_application_purpose_land_adjustment'] = isset($data['is_application_purpose_land_adjustment']) ? $data['is_application_purpose_land_adjustment'] : null;
        $this->container['recording_user_full_name'] = isset($data['recording_user_full_name']) ? $data['recording_user_full_name'] : null;
        $this->container['sludge_application_date'] = isset($data['sludge_application_date']) ? $data['sludge_application_date'] : null;
        $this->container['research_card_number'] = isset($data['research_card_number']) ? $data['research_card_number'] : null;
        $this->container['created_user_full_name_applied_sediment'] = isset($data['created_user_full_name_applied_sediment']) ? $data['created_user_full_name_applied_sediment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch_number
     *
     * @return string
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string $batch_number 
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets created_user_full_name
     *
     * @return string
     */
    public function getCreatedUserFullName()
    {
        return $this->container['created_user_full_name'];
    }

    /**
     * Sets created_user_full_name
     *
     * @param string $created_user_full_name 
     *
     * @return $this
     */
    public function setCreatedUserFullName($created_user_full_name)
    {
        $this->container['created_user_full_name'] = $created_user_full_name;

        return $this;
    }

    /**
     * Gets date_of_sewage_sludge_creation
     *
     * @return \DateTime
     */
    public function getDateOfSewageSludgeCreation()
    {
        return $this->container['date_of_sewage_sludge_creation'];
    }

    /**
     * Sets date_of_sewage_sludge_creation
     *
     * @param \DateTime $date_of_sewage_sludge_creation Data wytworzenia komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setDateOfSewageSludgeCreation($date_of_sewage_sludge_creation)
    {
        $this->container['date_of_sewage_sludge_creation'] = $date_of_sewage_sludge_creation;

        return $this;
    }

    /**
     * Gets is_fermentation
     *
     * @return bool
     */
    public function getIsFermentation()
    {
        return $this->container['is_fermentation'];
    }

    /**
     * Sets is_fermentation
     *
     * @param bool $is_fermentation Rodzaj obróbki: fermentacja
     *
     * @return $this
     */
    public function setIsFermentation($is_fermentation)
    {
        $this->container['is_fermentation'] = $is_fermentation;

        return $this;
    }

    /**
     * Gets is_drying
     *
     * @return bool
     */
    public function getIsDrying()
    {
        return $this->container['is_drying'];
    }

    /**
     * Sets is_drying
     *
     * @param bool $is_drying Rodzaj obróbki: suszenie
     *
     * @return $this
     */
    public function setIsDrying($is_drying)
    {
        $this->container['is_drying'] = $is_drying;

        return $this;
    }

    /**
     * Gets is_dehydration
     *
     * @return bool
     */
    public function getIsDehydration()
    {
        return $this->container['is_dehydration'];
    }

    /**
     * Sets is_dehydration
     *
     * @param bool $is_dehydration Rodzaj obróbki: odwodnienie
     *
     * @return $this
     */
    public function setIsDehydration($is_dehydration)
    {
        $this->container['is_dehydration'] = $is_dehydration;

        return $this;
    }

    /**
     * Gets is_composting
     *
     * @return bool
     */
    public function getIsComposting()
    {
        return $this->container['is_composting'];
    }

    /**
     * Sets is_composting
     *
     * @param bool $is_composting Rodzaj obróbki: kompostowanie
     *
     * @return $this
     */
    public function setIsComposting($is_composting)
    {
        $this->container['is_composting'] = $is_composting;

        return $this;
    }

    /**
     * Gets is_hygienisation
     *
     * @return bool
     */
    public function getIsHygienisation()
    {
        return $this->container['is_hygienisation'];
    }

    /**
     * Sets is_hygienisation
     *
     * @param bool $is_hygienisation Rodzaj obróbki: higienizacja
     *
     * @return $this
     */
    public function setIsHygienisation($is_hygienisation)
    {
        $this->container['is_hygienisation'] = $is_hygienisation;

        return $this;
    }

    /**
     * Gets is_different_process
     *
     * @return bool
     */
    public function getIsDifferentProcess()
    {
        return $this->container['is_different_process'];
    }

    /**
     * Sets is_different_process
     *
     * @param bool $is_different_process Rodzaj obróbki: inny
     *
     * @return $this
     */
    public function setIsDifferentProcess($is_different_process)
    {
        $this->container['is_different_process'] = $is_different_process;

        return $this;
    }

    /**
     * Gets different_process
     *
     * @return string
     */
    public function getDifferentProcess()
    {
        return $this->container['different_process'];
    }

    /**
     * Sets different_process
     *
     * @param string $different_process Inny proces
     *
     * @return $this
     */
    public function setDifferentProcess($different_process)
    {
        $this->container['different_process'] = $different_process;

        return $this;
    }

    /**
     * Gets sludge_mass_mg
     *
     * @return double
     */
    public function getSludgeMassMg()
    {
        return $this->container['sludge_mass_mg'];
    }

    /**
     * Sets sludge_mass_mg
     *
     * @param double $sludge_mass_mg Masa wytworzonych komunalnych osadów ściekowych [Mg]
     *
     * @return $this
     */
    public function setSludgeMassMg($sludge_mass_mg)
    {
        $this->container['sludge_mass_mg'] = $sludge_mass_mg;

        return $this;
    }

    /**
     * Gets sludge_mass_mg_sm
     *
     * @return double
     */
    public function getSludgeMassMgSm()
    {
        return $this->container['sludge_mass_mg_sm'];
    }

    /**
     * Sets sludge_mass_mg_sm
     *
     * @param double $sludge_mass_mg_sm Sucha masa wytworzonych komunalnych osadów ściekowych [Mg s.m.]
     *
     * @return $this
     */
    public function setSludgeMassMgSm($sludge_mass_mg_sm)
    {
        $this->container['sludge_mass_mg_sm'] = $sludge_mass_mg_sm;

        return $this;
    }

    /**
     * Gets applied_sludge_mass
     *
     * @return double
     */
    public function getAppliedSludgeMass()
    {
        return $this->container['applied_sludge_mass'];
    }

    /**
     * Sets applied_sludge_mass
     *
     * @param double $applied_sludge_mass Masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeMass($applied_sludge_mass)
    {
        $this->container['applied_sludge_mass'] = $applied_sludge_mass;

        return $this;
    }

    /**
     * Gets applied_sludge_dry_matter_mass
     *
     * @return double
     */
    public function getAppliedSludgeDryMatterMass()
    {
        return $this->container['applied_sludge_dry_matter_mass'];
    }

    /**
     * Sets applied_sludge_dry_matter_mass
     *
     * @param double $applied_sludge_dry_matter_mass Sucha masa zastosowanych komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setAppliedSludgeDryMatterMass($applied_sludge_dry_matter_mass)
    {
        $this->container['applied_sludge_dry_matter_mass'] = $applied_sludge_dry_matter_mass;

        return $this;
    }

    /**
     * Gets kpo_card_number
     *
     * @return string
     */
    public function getKpoCardNumber()
    {
        return $this->container['kpo_card_number'];
    }

    /**
     * Sets kpo_card_number
     *
     * @param string $kpo_card_number Numer karty kpo
     *
     * @return $this
     */
    public function setKpoCardNumber($kpo_card_number)
    {
        $this->container['kpo_card_number'] = $kpo_card_number;

        return $this;
    }

    /**
     * Gets is_application_purpose_crops
     *
     * @return bool
     */
    public function getIsApplicationPurposeCrops()
    {
        return $this->container['is_application_purpose_crops'];
    }

    /**
     * Sets is_application_purpose_crops
     *
     * @param bool $is_application_purpose_crops Cel: w rolnictwie
     *
     * @return $this
     */
    public function setIsApplicationPurposeCrops($is_application_purpose_crops)
    {
        $this->container['is_application_purpose_crops'] = $is_application_purpose_crops;

        return $this;
    }

    /**
     * Gets is_application_purpose_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposePlants()
    {
        return $this->container['is_application_purpose_plants'];
    }

    /**
     * Sets is_application_purpose_plants
     *
     * @param bool $is_application_purpose_plants Cel: do uprawy roślin przeznaczonych do produkcji kompostu
     *
     * @return $this
     */
    public function setIsApplicationPurposePlants($is_application_purpose_plants)
    {
        $this->container['is_application_purpose_plants'] = $is_application_purpose_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_inedible_plants
     *
     * @return bool
     */
    public function getIsApplicationPurposeInediblePlants()
    {
        return $this->container['is_application_purpose_inedible_plants'];
    }

    /**
     * Sets is_application_purpose_inedible_plants
     *
     * @param bool $is_application_purpose_inedible_plants Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz
     *
     * @return $this
     */
    public function setIsApplicationPurposeInediblePlants($is_application_purpose_inedible_plants)
    {
        $this->container['is_application_purpose_inedible_plants'] = $is_application_purpose_inedible_plants;

        return $this;
    }

    /**
     * Gets is_application_purpose_reclamation
     *
     * @return bool
     */
    public function getIsApplicationPurposeReclamation()
    {
        return $this->container['is_application_purpose_reclamation'];
    }

    /**
     * Sets is_application_purpose_reclamation
     *
     * @param bool $is_application_purpose_reclamation Cel: do rekultywacji terenów w tym gruntów na cele rolne
     *
     * @return $this
     */
    public function setIsApplicationPurposeReclamation($is_application_purpose_reclamation)
    {
        $this->container['is_application_purpose_reclamation'] = $is_application_purpose_reclamation;

        return $this;
    }

    /**
     * Gets is_application_purpose_land_adjustment
     *
     * @return bool
     */
    public function getIsApplicationPurposeLandAdjustment()
    {
        return $this->container['is_application_purpose_land_adjustment'];
    }

    /**
     * Sets is_application_purpose_land_adjustment
     *
     * @param bool $is_application_purpose_land_adjustment Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..)
     *
     * @return $this
     */
    public function setIsApplicationPurposeLandAdjustment($is_application_purpose_land_adjustment)
    {
        $this->container['is_application_purpose_land_adjustment'] = $is_application_purpose_land_adjustment;

        return $this;
    }

    /**
     * Gets recording_user_full_name
     *
     * @return string
     */
    public function getRecordingUserFullName()
    {
        return $this->container['recording_user_full_name'];
    }

    /**
     * Sets recording_user_full_name
     *
     * @param string $recording_user_full_name 
     *
     * @return $this
     */
    public function setRecordingUserFullName($recording_user_full_name)
    {
        $this->container['recording_user_full_name'] = $recording_user_full_name;

        return $this;
    }

    /**
     * Gets sludge_application_date
     *
     * @return \DateTime
     */
    public function getSludgeApplicationDate()
    {
        return $this->container['sludge_application_date'];
    }

    /**
     * Sets sludge_application_date
     *
     * @param \DateTime $sludge_application_date Data zastosowania komunalnych osadów ściekowych
     *
     * @return $this
     */
    public function setSludgeApplicationDate($sludge_application_date)
    {
        $this->container['sludge_application_date'] = $sludge_application_date;

        return $this;
    }

    /**
     * Gets research_card_number
     *
     * @return string
     */
    public function getResearchCardNumber()
    {
        return $this->container['research_card_number'];
    }

    /**
     * Sets research_card_number
     *
     * @param string $research_card_number 
     *
     * @return $this
     */
    public function setResearchCardNumber($research_card_number)
    {
        $this->container['research_card_number'] = $research_card_number;

        return $this;
    }

    /**
     * Gets created_user_full_name_applied_sediment
     *
     * @return string
     */
    public function getCreatedUserFullNameAppliedSediment()
    {
        return $this->container['created_user_full_name_applied_sediment'];
    }

    /**
     * Sets created_user_full_name_applied_sediment
     *
     * @param string $created_user_full_name_applied_sediment created_user_full_name_applied_sediment
     *
     * @return $this
     */
    public function setCreatedUserFullNameAppliedSediment($created_user_full_name_applied_sediment)
    {
        $this->container['created_user_full_name_applied_sediment'] = $created_user_full_name_applied_sediment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


