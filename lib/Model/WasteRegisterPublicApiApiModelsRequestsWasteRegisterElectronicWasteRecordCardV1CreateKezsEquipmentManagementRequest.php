<?php
/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Requests.WasteRegister.ElectronicWasteRecordCard.V1.CreateKezsEquipmentManagementRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kezs_equipment_group_card_id' => 'string',
        'is_handed_over' => 'bool',
        'is_used' => 'bool',
        'is_recycled' => 'bool',
        'kpo_id' => 'string',
        'kpok_id' => 'string',
        'is_entry_based_on_kpo' => 'bool',
        'is_entry_based_on_kpok' => 'bool',
        'kpo_handover_date' => '\DateTime',
        'handed_over_equipment_mass' => 'double',
        'recycled_equipment_mass' => 'double',
        'used_equipment_mass' => 'double',
        'additional_information' => 'string',
        'installation_name' => 'string',
        'waste_process_id' => 'int',
        'is_recycling' => 'bool',
        'is_recycled_parts' => 'bool',
        'recycled_parts_equipment_mass' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kezs_equipment_group_card_id' => 'uuid',
        'is_handed_over' => null,
        'is_used' => null,
        'is_recycled' => null,
        'kpo_id' => 'uuid',
        'kpok_id' => 'uuid',
        'is_entry_based_on_kpo' => null,
        'is_entry_based_on_kpok' => null,
        'kpo_handover_date' => 'date-time',
        'handed_over_equipment_mass' => 'double',
        'recycled_equipment_mass' => 'double',
        'used_equipment_mass' => 'double',
        'additional_information' => null,
        'installation_name' => null,
        'waste_process_id' => 'int32',
        'is_recycling' => null,
        'is_recycled_parts' => null,
        'recycled_parts_equipment_mass' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kezs_equipment_group_card_id' => 'kezsEquipmentGroupCardId',
        'is_handed_over' => 'isHandedOver',
        'is_used' => 'isUsed',
        'is_recycled' => 'isRecycled',
        'kpo_id' => 'kpoId',
        'kpok_id' => 'kpokId',
        'is_entry_based_on_kpo' => 'isEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'isEntryBasedOnKpok',
        'kpo_handover_date' => 'kpoHandoverDate',
        'handed_over_equipment_mass' => 'handedOverEquipmentMass',
        'recycled_equipment_mass' => 'recycledEquipmentMass',
        'used_equipment_mass' => 'usedEquipmentMass',
        'additional_information' => 'additionalInformation',
        'installation_name' => 'installationName',
        'waste_process_id' => 'wasteProcessId',
        'is_recycling' => 'isRecycling',
        'is_recycled_parts' => 'isRecycledParts',
        'recycled_parts_equipment_mass' => 'recycledPartsEquipmentMass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kezs_equipment_group_card_id' => 'setKezsEquipmentGroupCardId',
        'is_handed_over' => 'setIsHandedOver',
        'is_used' => 'setIsUsed',
        'is_recycled' => 'setIsRecycled',
        'kpo_id' => 'setKpoId',
        'kpok_id' => 'setKpokId',
        'is_entry_based_on_kpo' => 'setIsEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'setIsEntryBasedOnKpok',
        'kpo_handover_date' => 'setKpoHandoverDate',
        'handed_over_equipment_mass' => 'setHandedOverEquipmentMass',
        'recycled_equipment_mass' => 'setRecycledEquipmentMass',
        'used_equipment_mass' => 'setUsedEquipmentMass',
        'additional_information' => 'setAdditionalInformation',
        'installation_name' => 'setInstallationName',
        'waste_process_id' => 'setWasteProcessId',
        'is_recycling' => 'setIsRecycling',
        'is_recycled_parts' => 'setIsRecycledParts',
        'recycled_parts_equipment_mass' => 'setRecycledPartsEquipmentMass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kezs_equipment_group_card_id' => 'getKezsEquipmentGroupCardId',
        'is_handed_over' => 'getIsHandedOver',
        'is_used' => 'getIsUsed',
        'is_recycled' => 'getIsRecycled',
        'kpo_id' => 'getKpoId',
        'kpok_id' => 'getKpokId',
        'is_entry_based_on_kpo' => 'getIsEntryBasedOnKpo',
        'is_entry_based_on_kpok' => 'getIsEntryBasedOnKpok',
        'kpo_handover_date' => 'getKpoHandoverDate',
        'handed_over_equipment_mass' => 'getHandedOverEquipmentMass',
        'recycled_equipment_mass' => 'getRecycledEquipmentMass',
        'used_equipment_mass' => 'getUsedEquipmentMass',
        'additional_information' => 'getAdditionalInformation',
        'installation_name' => 'getInstallationName',
        'waste_process_id' => 'getWasteProcessId',
        'is_recycling' => 'getIsRecycling',
        'is_recycled_parts' => 'getIsRecycledParts',
        'recycled_parts_equipment_mass' => 'getRecycledPartsEquipmentMass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kezs_equipment_group_card_id'] = isset($data['kezs_equipment_group_card_id']) ? $data['kezs_equipment_group_card_id'] : null;
        $this->container['is_handed_over'] = isset($data['is_handed_over']) ? $data['is_handed_over'] : null;
        $this->container['is_used'] = isset($data['is_used']) ? $data['is_used'] : null;
        $this->container['is_recycled'] = isset($data['is_recycled']) ? $data['is_recycled'] : null;
        $this->container['kpo_id'] = isset($data['kpo_id']) ? $data['kpo_id'] : null;
        $this->container['kpok_id'] = isset($data['kpok_id']) ? $data['kpok_id'] : null;
        $this->container['is_entry_based_on_kpo'] = isset($data['is_entry_based_on_kpo']) ? $data['is_entry_based_on_kpo'] : null;
        $this->container['is_entry_based_on_kpok'] = isset($data['is_entry_based_on_kpok']) ? $data['is_entry_based_on_kpok'] : null;
        $this->container['kpo_handover_date'] = isset($data['kpo_handover_date']) ? $data['kpo_handover_date'] : null;
        $this->container['handed_over_equipment_mass'] = isset($data['handed_over_equipment_mass']) ? $data['handed_over_equipment_mass'] : null;
        $this->container['recycled_equipment_mass'] = isset($data['recycled_equipment_mass']) ? $data['recycled_equipment_mass'] : null;
        $this->container['used_equipment_mass'] = isset($data['used_equipment_mass']) ? $data['used_equipment_mass'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['installation_name'] = isset($data['installation_name']) ? $data['installation_name'] : null;
        $this->container['waste_process_id'] = isset($data['waste_process_id']) ? $data['waste_process_id'] : null;
        $this->container['is_recycling'] = isset($data['is_recycling']) ? $data['is_recycling'] : null;
        $this->container['is_recycled_parts'] = isset($data['is_recycled_parts']) ? $data['is_recycled_parts'] : null;
        $this->container['recycled_parts_equipment_mass'] = isset($data['recycled_parts_equipment_mass']) ? $data['recycled_parts_equipment_mass'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kezs_equipment_group_card_id
     *
     * @return string
     */
    public function getKezsEquipmentGroupCardId()
    {
        return $this->container['kezs_equipment_group_card_id'];
    }

    /**
     * Sets kezs_equipment_group_card_id
     *
     * @param string $kezs_equipment_group_card_id Id grupy zebranego sprzętu
     *
     * @return $this
     */
    public function setKezsEquipmentGroupCardId($kezs_equipment_group_card_id)
    {
        $this->container['kezs_equipment_group_card_id'] = $kezs_equipment_group_card_id;

        return $this;
    }

    /**
     * Gets is_handed_over
     *
     * @return bool
     */
    public function getIsHandedOver()
    {
        return $this->container['is_handed_over'];
    }

    /**
     * Sets is_handed_over
     *
     * @param bool $is_handed_over Przekazane do innego zakładu przetwarzania
     *
     * @return $this
     */
    public function setIsHandedOver($is_handed_over)
    {
        $this->container['is_handed_over'] = $is_handed_over;

        return $this;
    }

    /**
     * Gets is_used
     *
     * @return bool
     */
    public function getIsUsed()
    {
        return $this->container['is_used'];
    }

    /**
     * Sets is_used
     *
     * @param bool $is_used Przetwarzanie sprzętu we własnym zakeresie
     *
     * @return $this
     */
    public function setIsUsed($is_used)
    {
        $this->container['is_used'] = $is_used;

        return $this;
    }

    /**
     * Gets is_recycled
     *
     * @return bool
     */
    public function getIsRecycled()
    {
        return $this->container['is_recycled'];
    }

    /**
     * Sets is_recycled
     *
     * @param bool $is_recycled Zużyty sprzet przeznaczony do ponownego użycia
     *
     * @return $this
     */
    public function setIsRecycled($is_recycled)
    {
        $this->container['is_recycled'] = $is_recycled;

        return $this;
    }

    /**
     * Gets kpo_id
     *
     * @return string
     */
    public function getKpoId()
    {
        return $this->container['kpo_id'];
    }

    /**
     * Sets kpo_id
     *
     * @param string $kpo_id Id karty przekazania odpadów
     *
     * @return $this
     */
    public function setKpoId($kpo_id)
    {
        $this->container['kpo_id'] = $kpo_id;

        return $this;
    }

    /**
     * Gets kpok_id
     *
     * @return string
     */
    public function getKpokId()
    {
        return $this->container['kpok_id'];
    }

    /**
     * Sets kpok_id
     *
     * @param string $kpok_id Id Karty Przekazania Odpadów Komunalnych
     *
     * @return $this
     */
    public function setKpokId($kpok_id)
    {
        $this->container['kpok_id'] = $kpok_id;

        return $this;
    }

    /**
     * Gets is_entry_based_on_kpo
     *
     * @return bool
     */
    public function getIsEntryBasedOnKpo()
    {
        return $this->container['is_entry_based_on_kpo'];
    }

    /**
     * Sets is_entry_based_on_kpo
     *
     * @param bool $is_entry_based_on_kpo Wpis dokonywany na podstawie karty przekazania odpadów
     *
     * @return $this
     */
    public function setIsEntryBasedOnKpo($is_entry_based_on_kpo)
    {
        $this->container['is_entry_based_on_kpo'] = $is_entry_based_on_kpo;

        return $this;
    }

    /**
     * Gets is_entry_based_on_kpok
     *
     * @return bool
     */
    public function getIsEntryBasedOnKpok()
    {
        return $this->container['is_entry_based_on_kpok'];
    }

    /**
     * Sets is_entry_based_on_kpok
     *
     * @param bool $is_entry_based_on_kpok Wpis dokonywany na podstawie karty przekazania odpadów komunalnych
     *
     * @return $this
     */
    public function setIsEntryBasedOnKpok($is_entry_based_on_kpok)
    {
        $this->container['is_entry_based_on_kpok'] = $is_entry_based_on_kpok;

        return $this;
    }

    /**
     * Gets kpo_handover_date
     *
     * @return \DateTime
     */
    public function getKpoHandoverDate()
    {
        return $this->container['kpo_handover_date'];
    }

    /**
     * Sets kpo_handover_date
     *
     * @param \DateTime $kpo_handover_date Data przekazania do innego zakładu przetwarzania
     *
     * @return $this
     */
    public function setKpoHandoverDate($kpo_handover_date)
    {
        $this->container['kpo_handover_date'] = $kpo_handover_date;

        return $this;
    }

    /**
     * Gets handed_over_equipment_mass
     *
     * @return double
     */
    public function getHandedOverEquipmentMass()
    {
        return $this->container['handed_over_equipment_mass'];
    }

    /**
     * Sets handed_over_equipment_mass
     *
     * @param double $handed_over_equipment_mass Masa przekazanych odpadów
     *
     * @return $this
     */
    public function setHandedOverEquipmentMass($handed_over_equipment_mass)
    {
        $this->container['handed_over_equipment_mass'] = $handed_over_equipment_mass;

        return $this;
    }

    /**
     * Gets recycled_equipment_mass
     *
     * @return double
     */
    public function getRecycledEquipmentMass()
    {
        return $this->container['recycled_equipment_mass'];
    }

    /**
     * Sets recycled_equipment_mass
     *
     * @param double $recycled_equipment_mass Masa sprzętu przeznaczonego do ponownego użycia
     *
     * @return $this
     */
    public function setRecycledEquipmentMass($recycled_equipment_mass)
    {
        $this->container['recycled_equipment_mass'] = $recycled_equipment_mass;

        return $this;
    }

    /**
     * Gets used_equipment_mass
     *
     * @return double
     */
    public function getUsedEquipmentMass()
    {
        return $this->container['used_equipment_mass'];
    }

    /**
     * Sets used_equipment_mass
     *
     * @param double $used_equipment_mass Masa przetwarzanego sprzętu
     *
     * @return $this
     */
    public function setUsedEquipmentMass($used_equipment_mass)
    {
        $this->container['used_equipment_mass'] = $used_equipment_mass;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string $additional_information Informacje dodatkowe
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets installation_name
     *
     * @return string
     */
    public function getInstallationName()
    {
        return $this->container['installation_name'];
    }

    /**
     * Sets installation_name
     *
     * @param string $installation_name Nazwa instalacji
     *
     * @return $this
     */
    public function setInstallationName($installation_name)
    {
        $this->container['installation_name'] = $installation_name;

        return $this;
    }

    /**
     * Gets waste_process_id
     *
     * @return int
     */
    public function getWasteProcessId()
    {
        return $this->container['waste_process_id'];
    }

    /**
     * Sets waste_process_id
     *
     * @param int $waste_process_id Id procesu przetwarzania odpadów
     *
     * @return $this
     */
    public function setWasteProcessId($waste_process_id)
    {
        $this->container['waste_process_id'] = $waste_process_id;

        return $this;
    }

    /**
     * Gets is_recycling
     *
     * @return bool
     */
    public function getIsRecycling()
    {
        return $this->container['is_recycling'];
    }

    /**
     * Sets is_recycling
     *
     * @param bool $is_recycling Recykling
     *
     * @return $this
     */
    public function setIsRecycling($is_recycling)
    {
        $this->container['is_recycling'] = $is_recycling;

        return $this;
    }

    /**
     * Gets is_recycled_parts
     *
     * @return bool
     */
    public function getIsRecycledParts()
    {
        return $this->container['is_recycled_parts'];
    }

    /**
     * Sets is_recycled_parts
     *
     * @param bool $is_recycled_parts Części składowe - recykling
     *
     * @return $this
     */
    public function setIsRecycledParts($is_recycled_parts)
    {
        $this->container['is_recycled_parts'] = $is_recycled_parts;

        return $this;
    }

    /**
     * Gets recycled_parts_equipment_mass
     *
     * @return double
     */
    public function getRecycledPartsEquipmentMass()
    {
        return $this->container['recycled_parts_equipment_mass'];
    }

    /**
     * Sets recycled_parts_equipment_mass
     *
     * @param double $recycled_parts_equipment_mass Masa zużytego sprzętu przeznaczonego do ponownego użycia
     *
     * @return $this
     */
    public function setRecycledPartsEquipmentMass($recycled_parts_equipment_mass)
    {
        $this->container['recycled_parts_equipment_mass'] = $recycled_parts_equipment_mass;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


