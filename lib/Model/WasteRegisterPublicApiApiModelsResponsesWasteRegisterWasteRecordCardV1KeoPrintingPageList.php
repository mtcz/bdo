<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.WasteRecordCard.V1.KeoPrintingPageList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'created_by_user' => 'string',
        'generated_waste_mass_installation' => 'double',
        'generated_waste_mass_excluding_installation' => 'double',
        'generated_waste_mass_installation_from_services' => 'double',
        'generated_waste_mass_excluding_installation_from_services' => 'double',
        'waste_from_services' => 'bool',
        'excavated_waste_mass' => 'double',
        'collected_waste_mass' => 'double',
        'kpo_collected_card_number' => 'string',
        'is_treated_recycle' => 'bool',
        'is_treated_filling_up_disadvantaged_areas' => 'bool',
        'is_treated_preparation_for_re_use' => 'bool',
        'is_treated_another_recovery_process' => 'bool',
        'is_treated_neutralization' => 'bool',
        'treated_process_r' => 'bool',
        'treated_process_d' => 'bool',
        'treated_process' => 'string',
        'treated_waste_mass' => 'double',
        'treated_pcb_content' => 'double',
        'forwarded_country_waste_mass' => 'double',
        'forwarded_abroad_waste_mass' => 'double',
        'kpo_forwarded_card_number' => 'string',
        'based_on_kpo' => 'bool',
        'transfer_to_poland' => 'bool',
        'transfer_to_natural_persons' => 'bool',
        'collected_additional_info' => 'string',
        'collected_is_equipment_owner_exempt_from_record' => 'bool',
        'forwarded_owner_exempt_from_records' => 'bool',
        'forwarded_transfer_abroad' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date-time',
        'created_by_user' => null,
        'generated_waste_mass_installation' => 'double',
        'generated_waste_mass_excluding_installation' => 'double',
        'generated_waste_mass_installation_from_services' => 'double',
        'generated_waste_mass_excluding_installation_from_services' => 'double',
        'waste_from_services' => null,
        'excavated_waste_mass' => 'double',
        'collected_waste_mass' => 'double',
        'kpo_collected_card_number' => null,
        'is_treated_recycle' => null,
        'is_treated_filling_up_disadvantaged_areas' => null,
        'is_treated_preparation_for_re_use' => null,
        'is_treated_another_recovery_process' => null,
        'is_treated_neutralization' => null,
        'treated_process_r' => null,
        'treated_process_d' => null,
        'treated_process' => null,
        'treated_waste_mass' => 'double',
        'treated_pcb_content' => 'double',
        'forwarded_country_waste_mass' => 'double',
        'forwarded_abroad_waste_mass' => 'double',
        'kpo_forwarded_card_number' => null,
        'based_on_kpo' => null,
        'transfer_to_poland' => null,
        'transfer_to_natural_persons' => null,
        'collected_additional_info' => null,
        'collected_is_equipment_owner_exempt_from_record' => null,
        'forwarded_owner_exempt_from_records' => null,
        'forwarded_transfer_abroad' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'created_by_user' => 'createdByUser',
        'generated_waste_mass_installation' => 'generatedWasteMassInstallation',
        'generated_waste_mass_excluding_installation' => 'generatedWasteMassExcludingInstallation',
        'generated_waste_mass_installation_from_services' => 'generatedWasteMassInstallationFromServices',
        'generated_waste_mass_excluding_installation_from_services' => 'generatedWasteMassExcludingInstallationFromServices',
        'waste_from_services' => 'wasteFromServices',
        'excavated_waste_mass' => 'excavatedWasteMass',
        'collected_waste_mass' => 'collectedWasteMass',
        'kpo_collected_card_number' => 'kpoCollectedCardNumber',
        'is_treated_recycle' => 'isTreatedRecycle',
        'is_treated_filling_up_disadvantaged_areas' => 'isTreatedFillingUpDisadvantagedAreas',
        'is_treated_preparation_for_re_use' => 'isTreatedPreparationForReUse',
        'is_treated_another_recovery_process' => 'isTreatedAnotherRecoveryProcess',
        'is_treated_neutralization' => 'isTreatedNeutralization',
        'treated_process_r' => 'treatedProcessR',
        'treated_process_d' => 'treatedProcessD',
        'treated_process' => 'treatedProcess',
        'treated_waste_mass' => 'treatedWasteMass',
        'treated_pcb_content' => 'treatedPcbContent',
        'forwarded_country_waste_mass' => 'forwardedCountryWasteMass',
        'forwarded_abroad_waste_mass' => 'forwardedAbroadWasteMass',
        'kpo_forwarded_card_number' => 'kpoForwardedCardNumber',
        'based_on_kpo' => 'basedOnKpo',
        'transfer_to_poland' => 'transferToPoland',
        'transfer_to_natural_persons' => 'transferToNaturalPersons',
        'collected_additional_info' => 'collectedAdditionalInfo',
        'collected_is_equipment_owner_exempt_from_record' => 'collectedIsEquipmentOwnerExemptFromRecord',
        'forwarded_owner_exempt_from_records' => 'forwardedOwnerExemptFromRecords',
        'forwarded_transfer_abroad' => 'forwardedTransferAbroad'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'created_by_user' => 'setCreatedByUser',
        'generated_waste_mass_installation' => 'setGeneratedWasteMassInstallation',
        'generated_waste_mass_excluding_installation' => 'setGeneratedWasteMassExcludingInstallation',
        'generated_waste_mass_installation_from_services' => 'setGeneratedWasteMassInstallationFromServices',
        'generated_waste_mass_excluding_installation_from_services' => 'setGeneratedWasteMassExcludingInstallationFromServices',
        'waste_from_services' => 'setWasteFromServices',
        'excavated_waste_mass' => 'setExcavatedWasteMass',
        'collected_waste_mass' => 'setCollectedWasteMass',
        'kpo_collected_card_number' => 'setKpoCollectedCardNumber',
        'is_treated_recycle' => 'setIsTreatedRecycle',
        'is_treated_filling_up_disadvantaged_areas' => 'setIsTreatedFillingUpDisadvantagedAreas',
        'is_treated_preparation_for_re_use' => 'setIsTreatedPreparationForReUse',
        'is_treated_another_recovery_process' => 'setIsTreatedAnotherRecoveryProcess',
        'is_treated_neutralization' => 'setIsTreatedNeutralization',
        'treated_process_r' => 'setTreatedProcessR',
        'treated_process_d' => 'setTreatedProcessD',
        'treated_process' => 'setTreatedProcess',
        'treated_waste_mass' => 'setTreatedWasteMass',
        'treated_pcb_content' => 'setTreatedPcbContent',
        'forwarded_country_waste_mass' => 'setForwardedCountryWasteMass',
        'forwarded_abroad_waste_mass' => 'setForwardedAbroadWasteMass',
        'kpo_forwarded_card_number' => 'setKpoForwardedCardNumber',
        'based_on_kpo' => 'setBasedOnKpo',
        'transfer_to_poland' => 'setTransferToPoland',
        'transfer_to_natural_persons' => 'setTransferToNaturalPersons',
        'collected_additional_info' => 'setCollectedAdditionalInfo',
        'collected_is_equipment_owner_exempt_from_record' => 'setCollectedIsEquipmentOwnerExemptFromRecord',
        'forwarded_owner_exempt_from_records' => 'setForwardedOwnerExemptFromRecords',
        'forwarded_transfer_abroad' => 'setForwardedTransferAbroad'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'created_by_user' => 'getCreatedByUser',
        'generated_waste_mass_installation' => 'getGeneratedWasteMassInstallation',
        'generated_waste_mass_excluding_installation' => 'getGeneratedWasteMassExcludingInstallation',
        'generated_waste_mass_installation_from_services' => 'getGeneratedWasteMassInstallationFromServices',
        'generated_waste_mass_excluding_installation_from_services' => 'getGeneratedWasteMassExcludingInstallationFromServices',
        'waste_from_services' => 'getWasteFromServices',
        'excavated_waste_mass' => 'getExcavatedWasteMass',
        'collected_waste_mass' => 'getCollectedWasteMass',
        'kpo_collected_card_number' => 'getKpoCollectedCardNumber',
        'is_treated_recycle' => 'getIsTreatedRecycle',
        'is_treated_filling_up_disadvantaged_areas' => 'getIsTreatedFillingUpDisadvantagedAreas',
        'is_treated_preparation_for_re_use' => 'getIsTreatedPreparationForReUse',
        'is_treated_another_recovery_process' => 'getIsTreatedAnotherRecoveryProcess',
        'is_treated_neutralization' => 'getIsTreatedNeutralization',
        'treated_process_r' => 'getTreatedProcessR',
        'treated_process_d' => 'getTreatedProcessD',
        'treated_process' => 'getTreatedProcess',
        'treated_waste_mass' => 'getTreatedWasteMass',
        'treated_pcb_content' => 'getTreatedPcbContent',
        'forwarded_country_waste_mass' => 'getForwardedCountryWasteMass',
        'forwarded_abroad_waste_mass' => 'getForwardedAbroadWasteMass',
        'kpo_forwarded_card_number' => 'getKpoForwardedCardNumber',
        'based_on_kpo' => 'getBasedOnKpo',
        'transfer_to_poland' => 'getTransferToPoland',
        'transfer_to_natural_persons' => 'getTransferToNaturalPersons',
        'collected_additional_info' => 'getCollectedAdditionalInfo',
        'collected_is_equipment_owner_exempt_from_record' => 'getCollectedIsEquipmentOwnerExemptFromRecord',
        'forwarded_owner_exempt_from_records' => 'getForwardedOwnerExemptFromRecords',
        'forwarded_transfer_abroad' => 'getForwardedTransferAbroad'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['created_by_user'] = isset($data['created_by_user']) ? $data['created_by_user'] : null;
        $this->container['generated_waste_mass_installation'] = isset($data['generated_waste_mass_installation']) ? $data['generated_waste_mass_installation'] : null;
        $this->container['generated_waste_mass_excluding_installation'] = isset($data['generated_waste_mass_excluding_installation']) ? $data['generated_waste_mass_excluding_installation'] : null;
        $this->container['generated_waste_mass_installation_from_services'] = isset($data['generated_waste_mass_installation_from_services']) ? $data['generated_waste_mass_installation_from_services'] : null;
        $this->container['generated_waste_mass_excluding_installation_from_services'] = isset($data['generated_waste_mass_excluding_installation_from_services']) ? $data['generated_waste_mass_excluding_installation_from_services'] : null;
        $this->container['waste_from_services'] = isset($data['waste_from_services']) ? $data['waste_from_services'] : null;
        $this->container['excavated_waste_mass'] = isset($data['excavated_waste_mass']) ? $data['excavated_waste_mass'] : null;
        $this->container['collected_waste_mass'] = isset($data['collected_waste_mass']) ? $data['collected_waste_mass'] : null;
        $this->container['kpo_collected_card_number'] = isset($data['kpo_collected_card_number']) ? $data['kpo_collected_card_number'] : null;
        $this->container['is_treated_recycle'] = isset($data['is_treated_recycle']) ? $data['is_treated_recycle'] : null;
        $this->container['is_treated_filling_up_disadvantaged_areas'] = isset($data['is_treated_filling_up_disadvantaged_areas']) ? $data['is_treated_filling_up_disadvantaged_areas'] : null;
        $this->container['is_treated_preparation_for_re_use'] = isset($data['is_treated_preparation_for_re_use']) ? $data['is_treated_preparation_for_re_use'] : null;
        $this->container['is_treated_another_recovery_process'] = isset($data['is_treated_another_recovery_process']) ? $data['is_treated_another_recovery_process'] : null;
        $this->container['is_treated_neutralization'] = isset($data['is_treated_neutralization']) ? $data['is_treated_neutralization'] : null;
        $this->container['treated_process_r'] = isset($data['treated_process_r']) ? $data['treated_process_r'] : null;
        $this->container['treated_process_d'] = isset($data['treated_process_d']) ? $data['treated_process_d'] : null;
        $this->container['treated_process'] = isset($data['treated_process']) ? $data['treated_process'] : null;
        $this->container['treated_waste_mass'] = isset($data['treated_waste_mass']) ? $data['treated_waste_mass'] : null;
        $this->container['treated_pcb_content'] = isset($data['treated_pcb_content']) ? $data['treated_pcb_content'] : null;
        $this->container['forwarded_country_waste_mass'] = isset($data['forwarded_country_waste_mass']) ? $data['forwarded_country_waste_mass'] : null;
        $this->container['forwarded_abroad_waste_mass'] = isset($data['forwarded_abroad_waste_mass']) ? $data['forwarded_abroad_waste_mass'] : null;
        $this->container['kpo_forwarded_card_number'] = isset($data['kpo_forwarded_card_number']) ? $data['kpo_forwarded_card_number'] : null;
        $this->container['based_on_kpo'] = isset($data['based_on_kpo']) ? $data['based_on_kpo'] : null;
        $this->container['transfer_to_poland'] = isset($data['transfer_to_poland']) ? $data['transfer_to_poland'] : null;
        $this->container['transfer_to_natural_persons'] = isset($data['transfer_to_natural_persons']) ? $data['transfer_to_natural_persons'] : null;
        $this->container['collected_additional_info'] = isset($data['collected_additional_info']) ? $data['collected_additional_info'] : null;
        $this->container['collected_is_equipment_owner_exempt_from_record'] = isset($data['collected_is_equipment_owner_exempt_from_record']) ? $data['collected_is_equipment_owner_exempt_from_record'] : null;
        $this->container['forwarded_owner_exempt_from_records'] = isset($data['forwarded_owner_exempt_from_records']) ? $data['forwarded_owner_exempt_from_records'] : null;
        $this->container['forwarded_transfer_abroad'] = isset($data['forwarded_transfer_abroad']) ? $data['forwarded_transfer_abroad'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Data
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string $created_by_user Utworzone przez użytkownika
     *
     * @return $this
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets generated_waste_mass_installation
     *
     * @return double
     */
    public function getGeneratedWasteMassInstallation()
    {
        return $this->container['generated_waste_mass_installation'];
    }

    /**
     * Sets generated_waste_mass_installation
     *
     * @param double $generated_waste_mass_installation Masa wytworzonych odpadów w związku z eksploatacją
     *
     * @return $this
     */
    public function setGeneratedWasteMassInstallation($generated_waste_mass_installation)
    {
        $this->container['generated_waste_mass_installation'] = $generated_waste_mass_installation;

        return $this;
    }

    /**
     * Gets generated_waste_mass_excluding_installation
     *
     * @return double
     */
    public function getGeneratedWasteMassExcludingInstallation()
    {
        return $this->container['generated_waste_mass_excluding_installation'];
    }

    /**
     * Sets generated_waste_mass_excluding_installation
     *
     * @param double $generated_waste_mass_excluding_installation Masa wytworzonych odpadów poza instalacją
     *
     * @return $this
     */
    public function setGeneratedWasteMassExcludingInstallation($generated_waste_mass_excluding_installation)
    {
        $this->container['generated_waste_mass_excluding_installation'] = $generated_waste_mass_excluding_installation;

        return $this;
    }

    /**
     * Gets generated_waste_mass_installation_from_services
     *
     * @return double
     */
    public function getGeneratedWasteMassInstallationFromServices()
    {
        return $this->container['generated_waste_mass_installation_from_services'];
    }

    /**
     * Sets generated_waste_mass_installation_from_services
     *
     * @param double $generated_waste_mass_installation_from_services Masa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych
     *
     * @return $this
     */
    public function setGeneratedWasteMassInstallationFromServices($generated_waste_mass_installation_from_services)
    {
        $this->container['generated_waste_mass_installation_from_services'] = $generated_waste_mass_installation_from_services;

        return $this;
    }

    /**
     * Gets generated_waste_mass_excluding_installation_from_services
     *
     * @return double
     */
    public function getGeneratedWasteMassExcludingInstallationFromServices()
    {
        return $this->container['generated_waste_mass_excluding_installation_from_services'];
    }

    /**
     * Sets generated_waste_mass_excluding_installation_from_services
     *
     * @param double $generated_waste_mass_excluding_installation_from_services Masa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych poza instalacją
     *
     * @return $this
     */
    public function setGeneratedWasteMassExcludingInstallationFromServices($generated_waste_mass_excluding_installation_from_services)
    {
        $this->container['generated_waste_mass_excluding_installation_from_services'] = $generated_waste_mass_excluding_installation_from_services;

        return $this;
    }

    /**
     * Gets waste_from_services
     *
     * @return bool
     */
    public function getWasteFromServices()
    {
        return $this->container['waste_from_services'];
    }

    /**
     * Sets waste_from_services
     *
     * @param bool $waste_from_services wytwarzanie odpadów - w wyniku świadczenia usług (w rozumieniu art. 3 ust. 1 pkt 32 ustawy o odpadach) i/lub działalności w zakresie obiektów liniowych (w rozumieniu art. 3 pkt 3a ustawy - Prawo budowlane)
     *
     * @return $this
     */
    public function setWasteFromServices($waste_from_services)
    {
        $this->container['waste_from_services'] = $waste_from_services;

        return $this;
    }

    /**
     * Gets excavated_waste_mass
     *
     * @return double
     */
    public function getExcavatedWasteMass()
    {
        return $this->container['excavated_waste_mass'];
    }

    /**
     * Sets excavated_waste_mass
     *
     * @param double $excavated_waste_mass Masa odpadów wydobytych ze składowiska
     *
     * @return $this
     */
    public function setExcavatedWasteMass($excavated_waste_mass)
    {
        $this->container['excavated_waste_mass'] = $excavated_waste_mass;

        return $this;
    }

    /**
     * Gets collected_waste_mass
     *
     * @return double
     */
    public function getCollectedWasteMass()
    {
        return $this->container['collected_waste_mass'];
    }

    /**
     * Sets collected_waste_mass
     *
     * @param double $collected_waste_mass Odpady przyjęte przez posiadacza odpadów
     *
     * @return $this
     */
    public function setCollectedWasteMass($collected_waste_mass)
    {
        $this->container['collected_waste_mass'] = $collected_waste_mass;

        return $this;
    }

    /**
     * Gets kpo_collected_card_number
     *
     * @return string
     */
    public function getKpoCollectedCardNumber()
    {
        return $this->container['kpo_collected_card_number'];
    }

    /**
     * Sets kpo_collected_card_number
     *
     * @param string $kpo_collected_card_number Przyjęte - numer katy kpo
     *
     * @return $this
     */
    public function setKpoCollectedCardNumber($kpo_collected_card_number)
    {
        $this->container['kpo_collected_card_number'] = $kpo_collected_card_number;

        return $this;
    }

    /**
     * Gets is_treated_recycle
     *
     * @return bool
     */
    public function getIsTreatedRecycle()
    {
        return $this->container['is_treated_recycle'];
    }

    /**
     * Sets is_treated_recycle
     *
     * @param bool $is_treated_recycle Przetwarzanie - Recykling
     *
     * @return $this
     */
    public function setIsTreatedRecycle($is_treated_recycle)
    {
        $this->container['is_treated_recycle'] = $is_treated_recycle;

        return $this;
    }

    /**
     * Gets is_treated_filling_up_disadvantaged_areas
     *
     * @return bool
     */
    public function getIsTreatedFillingUpDisadvantagedAreas()
    {
        return $this->container['is_treated_filling_up_disadvantaged_areas'];
    }

    /**
     * Sets is_treated_filling_up_disadvantaged_areas
     *
     * @param bool $is_treated_filling_up_disadvantaged_areas Przetwarzanie - wypełnianie terenów niekorzystnie przekształconych
     *
     * @return $this
     */
    public function setIsTreatedFillingUpDisadvantagedAreas($is_treated_filling_up_disadvantaged_areas)
    {
        $this->container['is_treated_filling_up_disadvantaged_areas'] = $is_treated_filling_up_disadvantaged_areas;

        return $this;
    }

    /**
     * Gets is_treated_preparation_for_re_use
     *
     * @return bool
     */
    public function getIsTreatedPreparationForReUse()
    {
        return $this->container['is_treated_preparation_for_re_use'];
    }

    /**
     * Sets is_treated_preparation_for_re_use
     *
     * @param bool $is_treated_preparation_for_re_use Przetwarzanie - przygotowanie do ponownego uzycia
     *
     * @return $this
     */
    public function setIsTreatedPreparationForReUse($is_treated_preparation_for_re_use)
    {
        $this->container['is_treated_preparation_for_re_use'] = $is_treated_preparation_for_re_use;

        return $this;
    }

    /**
     * Gets is_treated_another_recovery_process
     *
     * @return bool
     */
    public function getIsTreatedAnotherRecoveryProcess()
    {
        return $this->container['is_treated_another_recovery_process'];
    }

    /**
     * Sets is_treated_another_recovery_process
     *
     * @param bool $is_treated_another_recovery_process Przetwarzanie - inny proces odzysku
     *
     * @return $this
     */
    public function setIsTreatedAnotherRecoveryProcess($is_treated_another_recovery_process)
    {
        $this->container['is_treated_another_recovery_process'] = $is_treated_another_recovery_process;

        return $this;
    }

    /**
     * Gets is_treated_neutralization
     *
     * @return bool
     */
    public function getIsTreatedNeutralization()
    {
        return $this->container['is_treated_neutralization'];
    }

    /**
     * Sets is_treated_neutralization
     *
     * @param bool $is_treated_neutralization Przetwarzanie - unieszkodliwianie
     *
     * @return $this
     */
    public function setIsTreatedNeutralization($is_treated_neutralization)
    {
        $this->container['is_treated_neutralization'] = $is_treated_neutralization;

        return $this;
    }

    /**
     * Gets treated_process_r
     *
     * @return bool
     */
    public function getTreatedProcessR()
    {
        return $this->container['treated_process_r'];
    }

    /**
     * Sets treated_process_r
     *
     * @param bool $treated_process_r Przetwarzanie - Odpady objęte procesem: R - odzysku
     *
     * @return $this
     */
    public function setTreatedProcessR($treated_process_r)
    {
        $this->container['treated_process_r'] = $treated_process_r;

        return $this;
    }

    /**
     * Gets treated_process_d
     *
     * @return bool
     */
    public function getTreatedProcessD()
    {
        return $this->container['treated_process_d'];
    }

    /**
     * Sets treated_process_d
     *
     * @param bool $treated_process_d Przetwarzanie - Odpady objęte procesem: D - unieszkodliwiania
     *
     * @return $this
     */
    public function setTreatedProcessD($treated_process_d)
    {
        $this->container['treated_process_d'] = $treated_process_d;

        return $this;
    }

    /**
     * Gets treated_process
     *
     * @return string
     */
    public function getTreatedProcess()
    {
        return $this->container['treated_process'];
    }

    /**
     * Sets treated_process
     *
     * @param string $treated_process Przetwarzanie - Proces przetwarzania
     *
     * @return $this
     */
    public function setTreatedProcess($treated_process)
    {
        $this->container['treated_process'] = $treated_process;

        return $this;
    }

    /**
     * Gets treated_waste_mass
     *
     * @return double
     */
    public function getTreatedWasteMass()
    {
        return $this->container['treated_waste_mass'];
    }

    /**
     * Sets treated_waste_mass
     *
     * @param double $treated_waste_mass Masa przetworzonych odpadów
     *
     * @return $this
     */
    public function setTreatedWasteMass($treated_waste_mass)
    {
        $this->container['treated_waste_mass'] = $treated_waste_mass;

        return $this;
    }

    /**
     * Gets treated_pcb_content
     *
     * @return double
     */
    public function getTreatedPcbContent()
    {
        return $this->container['treated_pcb_content'];
    }

    /**
     * Sets treated_pcb_content
     *
     * @param double $treated_pcb_content Przetwarzanie - Zawartość PCB w odpadzie [%]
     *
     * @return $this
     */
    public function setTreatedPcbContent($treated_pcb_content)
    {
        $this->container['treated_pcb_content'] = $treated_pcb_content;

        return $this;
    }

    /**
     * Gets forwarded_country_waste_mass
     *
     * @return double
     */
    public function getForwardedCountryWasteMass()
    {
        return $this->container['forwarded_country_waste_mass'];
    }

    /**
     * Sets forwarded_country_waste_mass
     *
     * @param double $forwarded_country_waste_mass Masa przekazanych odpadów w kraju
     *
     * @return $this
     */
    public function setForwardedCountryWasteMass($forwarded_country_waste_mass)
    {
        $this->container['forwarded_country_waste_mass'] = $forwarded_country_waste_mass;

        return $this;
    }

    /**
     * Gets forwarded_abroad_waste_mass
     *
     * @return double
     */
    public function getForwardedAbroadWasteMass()
    {
        return $this->container['forwarded_abroad_waste_mass'];
    }

    /**
     * Sets forwarded_abroad_waste_mass
     *
     * @param double $forwarded_abroad_waste_mass Masa przekazanych odpadów w kraju
     *
     * @return $this
     */
    public function setForwardedAbroadWasteMass($forwarded_abroad_waste_mass)
    {
        $this->container['forwarded_abroad_waste_mass'] = $forwarded_abroad_waste_mass;

        return $this;
    }

    /**
     * Gets kpo_forwarded_card_number
     *
     * @return string
     */
    public function getKpoForwardedCardNumber()
    {
        return $this->container['kpo_forwarded_card_number'];
    }

    /**
     * Sets kpo_forwarded_card_number
     *
     * @param string $kpo_forwarded_card_number Przekazane - numer karty kpo
     *
     * @return $this
     */
    public function setKpoForwardedCardNumber($kpo_forwarded_card_number)
    {
        $this->container['kpo_forwarded_card_number'] = $kpo_forwarded_card_number;

        return $this;
    }

    /**
     * Gets based_on_kpo
     *
     * @return bool
     */
    public function getBasedOnKpo()
    {
        return $this->container['based_on_kpo'];
    }

    /**
     * Sets based_on_kpo
     *
     * @param bool $based_on_kpo Wpis dokonywany na podstawie karty przekazania odpadów
     *
     * @return $this
     */
    public function setBasedOnKpo($based_on_kpo)
    {
        $this->container['based_on_kpo'] = $based_on_kpo;

        return $this;
    }

    /**
     * Gets transfer_to_poland
     *
     * @return bool
     */
    public function getTransferToPoland()
    {
        return $this->container['transfer_to_poland'];
    }

    /**
     * Sets transfer_to_poland
     *
     * @param bool $transfer_to_poland Przywóz do RP
     *
     * @return $this
     */
    public function setTransferToPoland($transfer_to_poland)
    {
        $this->container['transfer_to_poland'] = $transfer_to_poland;

        return $this;
    }

    /**
     * Gets transfer_to_natural_persons
     *
     * @return bool
     */
    public function getTransferToNaturalPersons()
    {
        return $this->container['transfer_to_natural_persons'];
    }

    /**
     * Sets transfer_to_natural_persons
     *
     * @param bool $transfer_to_natural_persons Przekazane osobom fizycznym lub innym jednostkom organizacyjnym niebędącym przedsiębiorcami
     *
     * @return $this
     */
    public function setTransferToNaturalPersons($transfer_to_natural_persons)
    {
        $this->container['transfer_to_natural_persons'] = $transfer_to_natural_persons;

        return $this;
    }

    /**
     * Gets collected_additional_info
     *
     * @return string
     */
    public function getCollectedAdditionalInfo()
    {
        return $this->container['collected_additional_info'];
    }

    /**
     * Sets collected_additional_info
     *
     * @param string $collected_additional_info collected_additional_info
     *
     * @return $this
     */
    public function setCollectedAdditionalInfo($collected_additional_info)
    {
        $this->container['collected_additional_info'] = $collected_additional_info;

        return $this;
    }

    /**
     * Gets collected_is_equipment_owner_exempt_from_record
     *
     * @return bool
     */
    public function getCollectedIsEquipmentOwnerExemptFromRecord()
    {
        return $this->container['collected_is_equipment_owner_exempt_from_record'];
    }

    /**
     * Sets collected_is_equipment_owner_exempt_from_record
     *
     * @param bool $collected_is_equipment_owner_exempt_from_record collected_is_equipment_owner_exempt_from_record
     *
     * @return $this
     */
    public function setCollectedIsEquipmentOwnerExemptFromRecord($collected_is_equipment_owner_exempt_from_record)
    {
        $this->container['collected_is_equipment_owner_exempt_from_record'] = $collected_is_equipment_owner_exempt_from_record;

        return $this;
    }

    /**
     * Gets forwarded_owner_exempt_from_records
     *
     * @return bool
     */
    public function getForwardedOwnerExemptFromRecords()
    {
        return $this->container['forwarded_owner_exempt_from_records'];
    }

    /**
     * Sets forwarded_owner_exempt_from_records
     *
     * @param bool $forwarded_owner_exempt_from_records forwarded_owner_exempt_from_records
     *
     * @return $this
     */
    public function setForwardedOwnerExemptFromRecords($forwarded_owner_exempt_from_records)
    {
        $this->container['forwarded_owner_exempt_from_records'] = $forwarded_owner_exempt_from_records;

        return $this;
    }

    /**
     * Gets forwarded_transfer_abroad
     *
     * @return bool
     */
    public function getForwardedTransferAbroad()
    {
        return $this->container['forwarded_transfer_abroad'];
    }

    /**
     * Sets forwarded_transfer_abroad
     *
     * @param bool $forwarded_transfer_abroad forwarded_transfer_abroad
     *
     * @return $this
     */
    public function setForwardedTransferAbroad($forwarded_transfer_abroad)
    {
        $this->container['forwarded_transfer_abroad'] = $forwarded_transfer_abroad;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


