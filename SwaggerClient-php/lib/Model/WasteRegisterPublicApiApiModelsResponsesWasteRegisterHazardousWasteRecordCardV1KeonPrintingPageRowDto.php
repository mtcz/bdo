<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonPrintingPageRowDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonPrintingPageRowDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonPrintingPageRowDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.HazardousWasteRecordCard.V1.KeonPrintingPageRowDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'no' => 'string',
        'created_at' => 'string',
        'waste_mass' => 'string',
        'waste_sender_company_name' => 'string',
        'waste_sender_identification_number' => 'string',
        'waste_receiver_company_name' => 'string',
        'waste_receiver_identification_number' => 'string',
        'receive_date' => 'string',
        'document_number' => 'string',
        'created_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'no' => null,
        'created_at' => null,
        'waste_mass' => null,
        'waste_sender_company_name' => null,
        'waste_sender_identification_number' => null,
        'waste_receiver_company_name' => null,
        'waste_receiver_identification_number' => null,
        'receive_date' => null,
        'document_number' => null,
        'created_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no' => 'no',
        'created_at' => 'createdAt',
        'waste_mass' => 'wasteMass',
        'waste_sender_company_name' => 'wasteSenderCompanyName',
        'waste_sender_identification_number' => 'wasteSenderIdentificationNumber',
        'waste_receiver_company_name' => 'wasteReceiverCompanyName',
        'waste_receiver_identification_number' => 'wasteReceiverIdentificationNumber',
        'receive_date' => 'receiveDate',
        'document_number' => 'documentNumber',
        'created_by_user' => 'createdByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no' => 'setNo',
        'created_at' => 'setCreatedAt',
        'waste_mass' => 'setWasteMass',
        'waste_sender_company_name' => 'setWasteSenderCompanyName',
        'waste_sender_identification_number' => 'setWasteSenderIdentificationNumber',
        'waste_receiver_company_name' => 'setWasteReceiverCompanyName',
        'waste_receiver_identification_number' => 'setWasteReceiverIdentificationNumber',
        'receive_date' => 'setReceiveDate',
        'document_number' => 'setDocumentNumber',
        'created_by_user' => 'setCreatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no' => 'getNo',
        'created_at' => 'getCreatedAt',
        'waste_mass' => 'getWasteMass',
        'waste_sender_company_name' => 'getWasteSenderCompanyName',
        'waste_sender_identification_number' => 'getWasteSenderIdentificationNumber',
        'waste_receiver_company_name' => 'getWasteReceiverCompanyName',
        'waste_receiver_identification_number' => 'getWasteReceiverIdentificationNumber',
        'receive_date' => 'getReceiveDate',
        'document_number' => 'getDocumentNumber',
        'created_by_user' => 'getCreatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['no'] = isset($data['no']) ? $data['no'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['waste_mass'] = isset($data['waste_mass']) ? $data['waste_mass'] : null;
        $this->container['waste_sender_company_name'] = isset($data['waste_sender_company_name']) ? $data['waste_sender_company_name'] : null;
        $this->container['waste_sender_identification_number'] = isset($data['waste_sender_identification_number']) ? $data['waste_sender_identification_number'] : null;
        $this->container['waste_receiver_company_name'] = isset($data['waste_receiver_company_name']) ? $data['waste_receiver_company_name'] : null;
        $this->container['waste_receiver_identification_number'] = isset($data['waste_receiver_identification_number']) ? $data['waste_receiver_identification_number'] : null;
        $this->container['receive_date'] = isset($data['receive_date']) ? $data['receive_date'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['created_by_user'] = isset($data['created_by_user']) ? $data['created_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no
     *
     * @return string
     */
    public function getNo()
    {
        return $this->container['no'];
    }

    /**
     * Sets no
     *
     * @param string $no 
     *
     * @return $this
     */
    public function setNo($no)
    {
        $this->container['no'] = $no;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Data utworzenia
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets waste_mass
     *
     * @return string
     */
    public function getWasteMass()
    {
        return $this->container['waste_mass'];
    }

    /**
     * Sets waste_mass
     *
     * @param string $waste_mass Masa odpadÃ³w
     *
     * @return $this
     */
    public function setWasteMass($waste_mass)
    {
        $this->container['waste_mass'] = $waste_mass;

        return $this;
    }

    /**
     * Gets waste_sender_company_name
     *
     * @return string
     */
    public function getWasteSenderCompanyName()
    {
        return $this->container['waste_sender_company_name'];
    }

    /**
     * Sets waste_sender_company_name
     *
     * @param string $waste_sender_company_name 
     *
     * @return $this
     */
    public function setWasteSenderCompanyName($waste_sender_company_name)
    {
        $this->container['waste_sender_company_name'] = $waste_sender_company_name;

        return $this;
    }

    /**
     * Gets waste_sender_identification_number
     *
     * @return string
     */
    public function getWasteSenderIdentificationNumber()
    {
        return $this->container['waste_sender_identification_number'];
    }

    /**
     * Sets waste_sender_identification_number
     *
     * @param string $waste_sender_identification_number 
     *
     * @return $this
     */
    public function setWasteSenderIdentificationNumber($waste_sender_identification_number)
    {
        $this->container['waste_sender_identification_number'] = $waste_sender_identification_number;

        return $this;
    }

    /**
     * Gets waste_receiver_company_name
     *
     * @return string
     */
    public function getWasteReceiverCompanyName()
    {
        return $this->container['waste_receiver_company_name'];
    }

    /**
     * Sets waste_receiver_company_name
     *
     * @param string $waste_receiver_company_name 
     *
     * @return $this
     */
    public function setWasteReceiverCompanyName($waste_receiver_company_name)
    {
        $this->container['waste_receiver_company_name'] = $waste_receiver_company_name;

        return $this;
    }

    /**
     * Gets waste_receiver_identification_number
     *
     * @return string
     */
    public function getWasteReceiverIdentificationNumber()
    {
        return $this->container['waste_receiver_identification_number'];
    }

    /**
     * Sets waste_receiver_identification_number
     *
     * @param string $waste_receiver_identification_number 
     *
     * @return $this
     */
    public function setWasteReceiverIdentificationNumber($waste_receiver_identification_number)
    {
        $this->container['waste_receiver_identification_number'] = $waste_receiver_identification_number;

        return $this;
    }

    /**
     * Gets receive_date
     *
     * @return string
     */
    public function getReceiveDate()
    {
        return $this->container['receive_date'];
    }

    /**
     * Sets receive_date
     *
     * @param string $receive_date Data przyjÄcia
     *
     * @return $this
     */
    public function setReceiveDate($receive_date)
    {
        $this->container['receive_date'] = $receive_date;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number Numer dokumentu
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string $created_by_user Utworzone przez uÅ¼ytkownika
     *
     * @return $this
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


