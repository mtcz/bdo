<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.WreckWasteRecordCard.V1.GetDismantleTransferredWasteResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kepw_dismantle_transferred_waste_id' => 'string',
        'kepw_id' => 'string',
        'waste_code_id' => 'int',
        'waste_code' => 'string',
        'kpo_id' => 'string',
        'kpo_card_number' => 'string',
        'recycled_waste_mass' => 'double',
        'energy_recovery_waste_mass' => 'double',
        'other_than_recycled_waste_mass' => 'double',
        'shredded_waste_mass' => 'double',
        'disposed_waste_mass' => 'double',
        'additional_info' => 'string',
        'transferred_abroad' => 'bool',
        'transferred_abroad_recycled' => 'bool',
        'transferred_abroad_waste_mass' => 'double',
        'transferred_abroad_transfer_date' => '\DateTime',
        'transferred_abroad_waste_process_id' => 'int',
        'transferred_abroad_waste_process_name' => 'string',
        'transferred_abroad_type_of_transport_id' => 'int',
        'country_id' => 'int',
        'country_name' => 'string',
        'locality' => 'string',
        'street' => 'string',
        'building_number' => 'string',
        'local_number' => 'string',
        'postal_code' => 'string',
        'is_road_transport' => 'bool',
        'is_railway_transport' => 'bool',
        'is_maritime_transport' => 'bool',
        'is_air_transport' => 'bool',
        'is_inland_water_transport' => 'bool',
        'waste_mass_from_kpo' => 'double',
        'receive_confirmation_time_from_kpo' => '\DateTime',
        'waste_code_extended' => 'bool',
        'waste_code_extended_description' => 'string',
        'hazardous_waste_reclassification' => 'bool',
        'hazardous_waste_reclassification_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kepw_dismantle_transferred_waste_id' => 'uuid',
        'kepw_id' => 'uuid',
        'waste_code_id' => 'int32',
        'waste_code' => null,
        'kpo_id' => 'uuid',
        'kpo_card_number' => null,
        'recycled_waste_mass' => 'double',
        'energy_recovery_waste_mass' => 'double',
        'other_than_recycled_waste_mass' => 'double',
        'shredded_waste_mass' => 'double',
        'disposed_waste_mass' => 'double',
        'additional_info' => null,
        'transferred_abroad' => null,
        'transferred_abroad_recycled' => null,
        'transferred_abroad_waste_mass' => 'double',
        'transferred_abroad_transfer_date' => 'date-time',
        'transferred_abroad_waste_process_id' => 'int32',
        'transferred_abroad_waste_process_name' => null,
        'transferred_abroad_type_of_transport_id' => 'int32',
        'country_id' => 'int32',
        'country_name' => null,
        'locality' => null,
        'street' => null,
        'building_number' => null,
        'local_number' => null,
        'postal_code' => null,
        'is_road_transport' => null,
        'is_railway_transport' => null,
        'is_maritime_transport' => null,
        'is_air_transport' => null,
        'is_inland_water_transport' => null,
        'waste_mass_from_kpo' => 'double',
        'receive_confirmation_time_from_kpo' => 'date-time',
        'waste_code_extended' => null,
        'waste_code_extended_description' => null,
        'hazardous_waste_reclassification' => null,
        'hazardous_waste_reclassification_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kepw_dismantle_transferred_waste_id' => 'kepwDismantleTransferredWasteId',
        'kepw_id' => 'kepwId',
        'waste_code_id' => 'wasteCodeId',
        'waste_code' => 'wasteCode',
        'kpo_id' => 'kpoId',
        'kpo_card_number' => 'kpoCardNumber',
        'recycled_waste_mass' => 'recycledWasteMass',
        'energy_recovery_waste_mass' => 'energyRecoveryWasteMass',
        'other_than_recycled_waste_mass' => 'otherThanRecycledWasteMass',
        'shredded_waste_mass' => 'shreddedWasteMass',
        'disposed_waste_mass' => 'disposedWasteMass',
        'additional_info' => 'additionalInfo',
        'transferred_abroad' => 'transferredAbroad',
        'transferred_abroad_recycled' => 'transferredAbroadRecycled',
        'transferred_abroad_waste_mass' => 'transferredAbroadWasteMass',
        'transferred_abroad_transfer_date' => 'transferredAbroadTransferDate',
        'transferred_abroad_waste_process_id' => 'transferredAbroadWasteProcessId',
        'transferred_abroad_waste_process_name' => 'transferredAbroadWasteProcessName',
        'transferred_abroad_type_of_transport_id' => 'transferredAbroadTypeOfTransportId',
        'country_id' => 'countryId',
        'country_name' => 'countryName',
        'locality' => 'locality',
        'street' => 'street',
        'building_number' => 'buildingNumber',
        'local_number' => 'localNumber',
        'postal_code' => 'postalCode',
        'is_road_transport' => 'isRoadTransport',
        'is_railway_transport' => 'isRailwayTransport',
        'is_maritime_transport' => 'isMaritimeTransport',
        'is_air_transport' => 'isAirTransport',
        'is_inland_water_transport' => 'isInlandWaterTransport',
        'waste_mass_from_kpo' => 'wasteMassFromKpo',
        'receive_confirmation_time_from_kpo' => 'receiveConfirmationTimeFromKpo',
        'waste_code_extended' => 'wasteCodeExtended',
        'waste_code_extended_description' => 'wasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'hazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'hazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kepw_dismantle_transferred_waste_id' => 'setKepwDismantleTransferredWasteId',
        'kepw_id' => 'setKepwId',
        'waste_code_id' => 'setWasteCodeId',
        'waste_code' => 'setWasteCode',
        'kpo_id' => 'setKpoId',
        'kpo_card_number' => 'setKpoCardNumber',
        'recycled_waste_mass' => 'setRecycledWasteMass',
        'energy_recovery_waste_mass' => 'setEnergyRecoveryWasteMass',
        'other_than_recycled_waste_mass' => 'setOtherThanRecycledWasteMass',
        'shredded_waste_mass' => 'setShreddedWasteMass',
        'disposed_waste_mass' => 'setDisposedWasteMass',
        'additional_info' => 'setAdditionalInfo',
        'transferred_abroad' => 'setTransferredAbroad',
        'transferred_abroad_recycled' => 'setTransferredAbroadRecycled',
        'transferred_abroad_waste_mass' => 'setTransferredAbroadWasteMass',
        'transferred_abroad_transfer_date' => 'setTransferredAbroadTransferDate',
        'transferred_abroad_waste_process_id' => 'setTransferredAbroadWasteProcessId',
        'transferred_abroad_waste_process_name' => 'setTransferredAbroadWasteProcessName',
        'transferred_abroad_type_of_transport_id' => 'setTransferredAbroadTypeOfTransportId',
        'country_id' => 'setCountryId',
        'country_name' => 'setCountryName',
        'locality' => 'setLocality',
        'street' => 'setStreet',
        'building_number' => 'setBuildingNumber',
        'local_number' => 'setLocalNumber',
        'postal_code' => 'setPostalCode',
        'is_road_transport' => 'setIsRoadTransport',
        'is_railway_transport' => 'setIsRailwayTransport',
        'is_maritime_transport' => 'setIsMaritimeTransport',
        'is_air_transport' => 'setIsAirTransport',
        'is_inland_water_transport' => 'setIsInlandWaterTransport',
        'waste_mass_from_kpo' => 'setWasteMassFromKpo',
        'receive_confirmation_time_from_kpo' => 'setReceiveConfirmationTimeFromKpo',
        'waste_code_extended' => 'setWasteCodeExtended',
        'waste_code_extended_description' => 'setWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'setHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'setHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kepw_dismantle_transferred_waste_id' => 'getKepwDismantleTransferredWasteId',
        'kepw_id' => 'getKepwId',
        'waste_code_id' => 'getWasteCodeId',
        'waste_code' => 'getWasteCode',
        'kpo_id' => 'getKpoId',
        'kpo_card_number' => 'getKpoCardNumber',
        'recycled_waste_mass' => 'getRecycledWasteMass',
        'energy_recovery_waste_mass' => 'getEnergyRecoveryWasteMass',
        'other_than_recycled_waste_mass' => 'getOtherThanRecycledWasteMass',
        'shredded_waste_mass' => 'getShreddedWasteMass',
        'disposed_waste_mass' => 'getDisposedWasteMass',
        'additional_info' => 'getAdditionalInfo',
        'transferred_abroad' => 'getTransferredAbroad',
        'transferred_abroad_recycled' => 'getTransferredAbroadRecycled',
        'transferred_abroad_waste_mass' => 'getTransferredAbroadWasteMass',
        'transferred_abroad_transfer_date' => 'getTransferredAbroadTransferDate',
        'transferred_abroad_waste_process_id' => 'getTransferredAbroadWasteProcessId',
        'transferred_abroad_waste_process_name' => 'getTransferredAbroadWasteProcessName',
        'transferred_abroad_type_of_transport_id' => 'getTransferredAbroadTypeOfTransportId',
        'country_id' => 'getCountryId',
        'country_name' => 'getCountryName',
        'locality' => 'getLocality',
        'street' => 'getStreet',
        'building_number' => 'getBuildingNumber',
        'local_number' => 'getLocalNumber',
        'postal_code' => 'getPostalCode',
        'is_road_transport' => 'getIsRoadTransport',
        'is_railway_transport' => 'getIsRailwayTransport',
        'is_maritime_transport' => 'getIsMaritimeTransport',
        'is_air_transport' => 'getIsAirTransport',
        'is_inland_water_transport' => 'getIsInlandWaterTransport',
        'waste_mass_from_kpo' => 'getWasteMassFromKpo',
        'receive_confirmation_time_from_kpo' => 'getReceiveConfirmationTimeFromKpo',
        'waste_code_extended' => 'getWasteCodeExtended',
        'waste_code_extended_description' => 'getWasteCodeExtendedDescription',
        'hazardous_waste_reclassification' => 'getHazardousWasteReclassification',
        'hazardous_waste_reclassification_description' => 'getHazardousWasteReclassificationDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kepw_dismantle_transferred_waste_id'] = isset($data['kepw_dismantle_transferred_waste_id']) ? $data['kepw_dismantle_transferred_waste_id'] : null;
        $this->container['kepw_id'] = isset($data['kepw_id']) ? $data['kepw_id'] : null;
        $this->container['waste_code_id'] = isset($data['waste_code_id']) ? $data['waste_code_id'] : null;
        $this->container['waste_code'] = isset($data['waste_code']) ? $data['waste_code'] : null;
        $this->container['kpo_id'] = isset($data['kpo_id']) ? $data['kpo_id'] : null;
        $this->container['kpo_card_number'] = isset($data['kpo_card_number']) ? $data['kpo_card_number'] : null;
        $this->container['recycled_waste_mass'] = isset($data['recycled_waste_mass']) ? $data['recycled_waste_mass'] : null;
        $this->container['energy_recovery_waste_mass'] = isset($data['energy_recovery_waste_mass']) ? $data['energy_recovery_waste_mass'] : null;
        $this->container['other_than_recycled_waste_mass'] = isset($data['other_than_recycled_waste_mass']) ? $data['other_than_recycled_waste_mass'] : null;
        $this->container['shredded_waste_mass'] = isset($data['shredded_waste_mass']) ? $data['shredded_waste_mass'] : null;
        $this->container['disposed_waste_mass'] = isset($data['disposed_waste_mass']) ? $data['disposed_waste_mass'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['transferred_abroad'] = isset($data['transferred_abroad']) ? $data['transferred_abroad'] : null;
        $this->container['transferred_abroad_recycled'] = isset($data['transferred_abroad_recycled']) ? $data['transferred_abroad_recycled'] : null;
        $this->container['transferred_abroad_waste_mass'] = isset($data['transferred_abroad_waste_mass']) ? $data['transferred_abroad_waste_mass'] : null;
        $this->container['transferred_abroad_transfer_date'] = isset($data['transferred_abroad_transfer_date']) ? $data['transferred_abroad_transfer_date'] : null;
        $this->container['transferred_abroad_waste_process_id'] = isset($data['transferred_abroad_waste_process_id']) ? $data['transferred_abroad_waste_process_id'] : null;
        $this->container['transferred_abroad_waste_process_name'] = isset($data['transferred_abroad_waste_process_name']) ? $data['transferred_abroad_waste_process_name'] : null;
        $this->container['transferred_abroad_type_of_transport_id'] = isset($data['transferred_abroad_type_of_transport_id']) ? $data['transferred_abroad_type_of_transport_id'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['building_number'] = isset($data['building_number']) ? $data['building_number'] : null;
        $this->container['local_number'] = isset($data['local_number']) ? $data['local_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['is_road_transport'] = isset($data['is_road_transport']) ? $data['is_road_transport'] : null;
        $this->container['is_railway_transport'] = isset($data['is_railway_transport']) ? $data['is_railway_transport'] : null;
        $this->container['is_maritime_transport'] = isset($data['is_maritime_transport']) ? $data['is_maritime_transport'] : null;
        $this->container['is_air_transport'] = isset($data['is_air_transport']) ? $data['is_air_transport'] : null;
        $this->container['is_inland_water_transport'] = isset($data['is_inland_water_transport']) ? $data['is_inland_water_transport'] : null;
        $this->container['waste_mass_from_kpo'] = isset($data['waste_mass_from_kpo']) ? $data['waste_mass_from_kpo'] : null;
        $this->container['receive_confirmation_time_from_kpo'] = isset($data['receive_confirmation_time_from_kpo']) ? $data['receive_confirmation_time_from_kpo'] : null;
        $this->container['waste_code_extended'] = isset($data['waste_code_extended']) ? $data['waste_code_extended'] : null;
        $this->container['waste_code_extended_description'] = isset($data['waste_code_extended_description']) ? $data['waste_code_extended_description'] : null;
        $this->container['hazardous_waste_reclassification'] = isset($data['hazardous_waste_reclassification']) ? $data['hazardous_waste_reclassification'] : null;
        $this->container['hazardous_waste_reclassification_description'] = isset($data['hazardous_waste_reclassification_description']) ? $data['hazardous_waste_reclassification_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kepw_dismantle_transferred_waste_id
     *
     * @return string
     */
    public function getKepwDismantleTransferredWasteId()
    {
        return $this->container['kepw_dismantle_transferred_waste_id'];
    }

    /**
     * Sets kepw_dismantle_transferred_waste_id
     *
     * @param string $kepw_dismantle_transferred_waste_id Id karty KEPW - Prowadzący stację demontażu
     *
     * @return $this
     */
    public function setKepwDismantleTransferredWasteId($kepw_dismantle_transferred_waste_id)
    {
        $this->container['kepw_dismantle_transferred_waste_id'] = $kepw_dismantle_transferred_waste_id;

        return $this;
    }

    /**
     * Gets kepw_id
     *
     * @return string
     */
    public function getKepwId()
    {
        return $this->container['kepw_id'];
    }

    /**
     * Sets kepw_id
     *
     * @param string $kepw_id Id karty ewidencji pojazdów wycofanych z eksploatacji
     *
     * @return $this
     */
    public function setKepwId($kepw_id)
    {
        $this->container['kepw_id'] = $kepw_id;

        return $this;
    }

    /**
     * Gets waste_code_id
     *
     * @return int
     */
    public function getWasteCodeId()
    {
        return $this->container['waste_code_id'];
    }

    /**
     * Sets waste_code_id
     *
     * @param int $waste_code_id Id kodu odpadu
     *
     * @return $this
     */
    public function setWasteCodeId($waste_code_id)
    {
        $this->container['waste_code_id'] = $waste_code_id;

        return $this;
    }

    /**
     * Gets waste_code
     *
     * @return string
     */
    public function getWasteCode()
    {
        return $this->container['waste_code'];
    }

    /**
     * Sets waste_code
     *
     * @param string $waste_code Kod odpadu
     *
     * @return $this
     */
    public function setWasteCode($waste_code)
    {
        $this->container['waste_code'] = $waste_code;

        return $this;
    }

    /**
     * Gets kpo_id
     *
     * @return string
     */
    public function getKpoId()
    {
        return $this->container['kpo_id'];
    }

    /**
     * Sets kpo_id
     *
     * @param string $kpo_id Id karty przekazania odpadów
     *
     * @return $this
     */
    public function setKpoId($kpo_id)
    {
        $this->container['kpo_id'] = $kpo_id;

        return $this;
    }

    /**
     * Gets kpo_card_number
     *
     * @return string
     */
    public function getKpoCardNumber()
    {
        return $this->container['kpo_card_number'];
    }

    /**
     * Sets kpo_card_number
     *
     * @param string $kpo_card_number Numer karty kpo
     *
     * @return $this
     */
    public function setKpoCardNumber($kpo_card_number)
    {
        $this->container['kpo_card_number'] = $kpo_card_number;

        return $this;
    }

    /**
     * Gets recycled_waste_mass
     *
     * @return double
     */
    public function getRecycledWasteMass()
    {
        return $this->container['recycled_waste_mass'];
    }

    /**
     * Sets recycled_waste_mass
     *
     * @param double $recycled_waste_mass Masa odpadów poddanych recyklingowi [Mg]
     *
     * @return $this
     */
    public function setRecycledWasteMass($recycled_waste_mass)
    {
        $this->container['recycled_waste_mass'] = $recycled_waste_mass;

        return $this;
    }

    /**
     * Gets energy_recovery_waste_mass
     *
     * @return double
     */
    public function getEnergyRecoveryWasteMass()
    {
        return $this->container['energy_recovery_waste_mass'];
    }

    /**
     * Sets energy_recovery_waste_mass
     *
     * @param double $energy_recovery_waste_mass Masa odpadów poddanych odzyskowi energii [Mg]
     *
     * @return $this
     */
    public function setEnergyRecoveryWasteMass($energy_recovery_waste_mass)
    {
        $this->container['energy_recovery_waste_mass'] = $energy_recovery_waste_mass;

        return $this;
    }

    /**
     * Gets other_than_recycled_waste_mass
     *
     * @return double
     */
    public function getOtherThanRecycledWasteMass()
    {
        return $this->container['other_than_recycled_waste_mass'];
    }

    /**
     * Sets other_than_recycled_waste_mass
     *
     * @param double $other_than_recycled_waste_mass Masa odpadów przekazanych w kraju innemu procesowi odzysku [Mg]
     *
     * @return $this
     */
    public function setOtherThanRecycledWasteMass($other_than_recycled_waste_mass)
    {
        $this->container['other_than_recycled_waste_mass'] = $other_than_recycled_waste_mass;

        return $this;
    }

    /**
     * Gets shredded_waste_mass
     *
     * @return double
     */
    public function getShreddedWasteMass()
    {
        return $this->container['shredded_waste_mass'];
    }

    /**
     * Sets shredded_waste_mass
     *
     * @param double $shredded_waste_mass Masa odpadów przekazanych w kraju do rozdrobnienia w strzępiarce [Mg]
     *
     * @return $this
     */
    public function setShreddedWasteMass($shredded_waste_mass)
    {
        $this->container['shredded_waste_mass'] = $shredded_waste_mass;

        return $this;
    }

    /**
     * Gets disposed_waste_mass
     *
     * @return double
     */
    public function getDisposedWasteMass()
    {
        return $this->container['disposed_waste_mass'];
    }

    /**
     * Sets disposed_waste_mass
     *
     * @param double $disposed_waste_mass Masa odpadów przekazanych w kraju do unieszkodliwienia [Mg]
     *
     * @return $this
     */
    public function setDisposedWasteMass($disposed_waste_mass)
    {
        $this->container['disposed_waste_mass'] = $disposed_waste_mass;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string $additional_info Informacje dodatkowe
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets transferred_abroad
     *
     * @return bool
     */
    public function getTransferredAbroad()
    {
        return $this->container['transferred_abroad'];
    }

    /**
     * Sets transferred_abroad
     *
     * @param bool $transferred_abroad Odpady przekazane do innego kraju
     *
     * @return $this
     */
    public function setTransferredAbroad($transferred_abroad)
    {
        $this->container['transferred_abroad'] = $transferred_abroad;

        return $this;
    }

    /**
     * Gets transferred_abroad_recycled
     *
     * @return bool
     */
    public function getTransferredAbroadRecycled()
    {
        return $this->container['transferred_abroad_recycled'];
    }

    /**
     * Sets transferred_abroad_recycled
     *
     * @param bool $transferred_abroad_recycled Recykling
     *
     * @return $this
     */
    public function setTransferredAbroadRecycled($transferred_abroad_recycled)
    {
        $this->container['transferred_abroad_recycled'] = $transferred_abroad_recycled;

        return $this;
    }

    /**
     * Gets transferred_abroad_waste_mass
     *
     * @return double
     */
    public function getTransferredAbroadWasteMass()
    {
        return $this->container['transferred_abroad_waste_mass'];
    }

    /**
     * Sets transferred_abroad_waste_mass
     *
     * @param double $transferred_abroad_waste_mass Masa odpadów przekazanych do innego kraju [Mg]
     *
     * @return $this
     */
    public function setTransferredAbroadWasteMass($transferred_abroad_waste_mass)
    {
        $this->container['transferred_abroad_waste_mass'] = $transferred_abroad_waste_mass;

        return $this;
    }

    /**
     * Gets transferred_abroad_transfer_date
     *
     * @return \DateTime
     */
    public function getTransferredAbroadTransferDate()
    {
        return $this->container['transferred_abroad_transfer_date'];
    }

    /**
     * Sets transferred_abroad_transfer_date
     *
     * @param \DateTime $transferred_abroad_transfer_date Data rozpoczęcia transportu
     *
     * @return $this
     */
    public function setTransferredAbroadTransferDate($transferred_abroad_transfer_date)
    {
        $this->container['transferred_abroad_transfer_date'] = $transferred_abroad_transfer_date;

        return $this;
    }

    /**
     * Gets transferred_abroad_waste_process_id
     *
     * @return int
     */
    public function getTransferredAbroadWasteProcessId()
    {
        return $this->container['transferred_abroad_waste_process_id'];
    }

    /**
     * Sets transferred_abroad_waste_process_id
     *
     * @param int $transferred_abroad_waste_process_id Id przewidywanej metody przetwarzania
     *
     * @return $this
     */
    public function setTransferredAbroadWasteProcessId($transferred_abroad_waste_process_id)
    {
        $this->container['transferred_abroad_waste_process_id'] = $transferred_abroad_waste_process_id;

        return $this;
    }

    /**
     * Gets transferred_abroad_waste_process_name
     *
     * @return string
     */
    public function getTransferredAbroadWasteProcessName()
    {
        return $this->container['transferred_abroad_waste_process_name'];
    }

    /**
     * Sets transferred_abroad_waste_process_name
     *
     * @param string $transferred_abroad_waste_process_name Nazwa przewidywanej metody przetwarzania
     *
     * @return $this
     */
    public function setTransferredAbroadWasteProcessName($transferred_abroad_waste_process_name)
    {
        $this->container['transferred_abroad_waste_process_name'] = $transferred_abroad_waste_process_name;

        return $this;
    }

    /**
     * Gets transferred_abroad_type_of_transport_id
     *
     * @return int
     */
    public function getTransferredAbroadTypeOfTransportId()
    {
        return $this->container['transferred_abroad_type_of_transport_id'];
    }

    /**
     * Sets transferred_abroad_type_of_transport_id
     *
     * @param int $transferred_abroad_type_of_transport_id Id rodzaju środka transportu
     *
     * @return $this
     */
    public function setTransferredAbroadTypeOfTransportId($transferred_abroad_type_of_transport_id)
    {
        $this->container['transferred_abroad_type_of_transport_id'] = $transferred_abroad_type_of_transport_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id Id kraju
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name Kraj
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality Miejscowość
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Ulica
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return string
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param string $building_number Numer budynku
     *
     * @return $this
     */
    public function setBuildingNumber($building_number)
    {
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets local_number
     *
     * @return string
     */
    public function getLocalNumber()
    {
        return $this->container['local_number'];
    }

    /**
     * Sets local_number
     *
     * @param string $local_number Numer lokalu
     *
     * @return $this
     */
    public function setLocalNumber($local_number)
    {
        $this->container['local_number'] = $local_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Kod pocztowy
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets is_road_transport
     *
     * @return bool
     */
    public function getIsRoadTransport()
    {
        return $this->container['is_road_transport'];
    }

    /**
     * Sets is_road_transport
     *
     * @param bool $is_road_transport Rodzaj środka transportu: drogowy
     *
     * @return $this
     */
    public function setIsRoadTransport($is_road_transport)
    {
        $this->container['is_road_transport'] = $is_road_transport;

        return $this;
    }

    /**
     * Gets is_railway_transport
     *
     * @return bool
     */
    public function getIsRailwayTransport()
    {
        return $this->container['is_railway_transport'];
    }

    /**
     * Sets is_railway_transport
     *
     * @param bool $is_railway_transport Rodzaj środka transportu: kolejowy
     *
     * @return $this
     */
    public function setIsRailwayTransport($is_railway_transport)
    {
        $this->container['is_railway_transport'] = $is_railway_transport;

        return $this;
    }

    /**
     * Gets is_maritime_transport
     *
     * @return bool
     */
    public function getIsMaritimeTransport()
    {
        return $this->container['is_maritime_transport'];
    }

    /**
     * Sets is_maritime_transport
     *
     * @param bool $is_maritime_transport Rodzaj środka transportu: morski
     *
     * @return $this
     */
    public function setIsMaritimeTransport($is_maritime_transport)
    {
        $this->container['is_maritime_transport'] = $is_maritime_transport;

        return $this;
    }

    /**
     * Gets is_air_transport
     *
     * @return bool
     */
    public function getIsAirTransport()
    {
        return $this->container['is_air_transport'];
    }

    /**
     * Sets is_air_transport
     *
     * @param bool $is_air_transport Rodzaj środka transportu: powietrzny
     *
     * @return $this
     */
    public function setIsAirTransport($is_air_transport)
    {
        $this->container['is_air_transport'] = $is_air_transport;

        return $this;
    }

    /**
     * Gets is_inland_water_transport
     *
     * @return bool
     */
    public function getIsInlandWaterTransport()
    {
        return $this->container['is_inland_water_transport'];
    }

    /**
     * Sets is_inland_water_transport
     *
     * @param bool $is_inland_water_transport Rodzaj środka transportu: wodny-śródlądowy
     *
     * @return $this
     */
    public function setIsInlandWaterTransport($is_inland_water_transport)
    {
        $this->container['is_inland_water_transport'] = $is_inland_water_transport;

        return $this;
    }

    /**
     * Gets waste_mass_from_kpo
     *
     * @return double
     */
    public function getWasteMassFromKpo()
    {
        return $this->container['waste_mass_from_kpo'];
    }

    /**
     * Sets waste_mass_from_kpo
     *
     * @param double $waste_mass_from_kpo 
     *
     * @return $this
     */
    public function setWasteMassFromKpo($waste_mass_from_kpo)
    {
        $this->container['waste_mass_from_kpo'] = $waste_mass_from_kpo;

        return $this;
    }

    /**
     * Gets receive_confirmation_time_from_kpo
     *
     * @return \DateTime
     */
    public function getReceiveConfirmationTimeFromKpo()
    {
        return $this->container['receive_confirmation_time_from_kpo'];
    }

    /**
     * Sets receive_confirmation_time_from_kpo
     *
     * @param \DateTime $receive_confirmation_time_from_kpo Data przekazania odpadów z karty kpo
     *
     * @return $this
     */
    public function setReceiveConfirmationTimeFromKpo($receive_confirmation_time_from_kpo)
    {
        $this->container['receive_confirmation_time_from_kpo'] = $receive_confirmation_time_from_kpo;

        return $this;
    }

    /**
     * Gets waste_code_extended
     *
     * @return bool
     */
    public function getWasteCodeExtended()
    {
        return $this->container['waste_code_extended'];
    }

    /**
     * Sets waste_code_extended
     *
     * @param bool $waste_code_extended Kod ex
     *
     * @return $this
     */
    public function setWasteCodeExtended($waste_code_extended)
    {
        $this->container['waste_code_extended'] = $waste_code_extended;

        return $this;
    }

    /**
     * Gets waste_code_extended_description
     *
     * @return string
     */
    public function getWasteCodeExtendedDescription()
    {
        return $this->container['waste_code_extended_description'];
    }

    /**
     * Sets waste_code_extended_description
     *
     * @param string $waste_code_extended_description Rodzaj odpadu ex
     *
     * @return $this
     */
    public function setWasteCodeExtendedDescription($waste_code_extended_description)
    {
        $this->container['waste_code_extended_description'] = $waste_code_extended_description;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification
     *
     * @return bool
     */
    public function getHazardousWasteReclassification()
    {
        return $this->container['hazardous_waste_reclassification'];
    }

    /**
     * Sets hazardous_waste_reclassification
     *
     * @param bool $hazardous_waste_reclassification Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
     *
     * @return $this
     */
    public function setHazardousWasteReclassification($hazardous_waste_reclassification)
    {
        $this->container['hazardous_waste_reclassification'] = $hazardous_waste_reclassification;

        return $this;
    }

    /**
     * Gets hazardous_waste_reclassification_description
     *
     * @return string
     */
    public function getHazardousWasteReclassificationDescription()
    {
        return $this->container['hazardous_waste_reclassification_description'];
    }

    /**
     * Sets hazardous_waste_reclassification_description
     *
     * @param string $hazardous_waste_reclassification_description Rodzaj odpadu
     *
     * @return $this
     */
    public function setHazardousWasteReclassificationDescription($hazardous_waste_reclassification_description)
    {
        $this->container['hazardous_waste_reclassification_description'] = $hazardous_waste_reclassification_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


