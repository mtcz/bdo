<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.MunicipalSewageSludgeCard.V1.GetBatchGeneratedSedimentsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'initial_mass' => 'double',
        'initial_dry_matter_mass' => 'double',
        'card_number' => 'string',
        'year' => 'int',
        'batch_generated_sediments' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1PaginatedPageBatchGeneratedSedimentDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'initial_mass' => 'double',
        'initial_dry_matter_mass' => 'double',
        'card_number' => null,
        'year' => 'int32',
        'batch_generated_sediments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'initial_mass' => 'initialMass',
        'initial_dry_matter_mass' => 'initialDryMatterMass',
        'card_number' => 'cardNumber',
        'year' => 'year',
        'batch_generated_sediments' => 'batchGeneratedSediments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'initial_mass' => 'setInitialMass',
        'initial_dry_matter_mass' => 'setInitialDryMatterMass',
        'card_number' => 'setCardNumber',
        'year' => 'setYear',
        'batch_generated_sediments' => 'setBatchGeneratedSediments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'initial_mass' => 'getInitialMass',
        'initial_dry_matter_mass' => 'getInitialDryMatterMass',
        'card_number' => 'getCardNumber',
        'year' => 'getYear',
        'batch_generated_sediments' => 'getBatchGeneratedSediments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['initial_mass'] = isset($data['initial_mass']) ? $data['initial_mass'] : null;
        $this->container['initial_dry_matter_mass'] = isset($data['initial_dry_matter_mass']) ? $data['initial_dry_matter_mass'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['batch_generated_sediments'] = isset($data['batch_generated_sediments']) ? $data['batch_generated_sediments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets initial_mass
     *
     * @return double
     */
    public function getInitialMass()
    {
        return $this->container['initial_mass'];
    }

    /**
     * Sets initial_mass
     *
     * @param double $initial_mass 
     *
     * @return $this
     */
    public function setInitialMass($initial_mass)
    {
        $this->container['initial_mass'] = $initial_mass;

        return $this;
    }

    /**
     * Gets initial_dry_matter_mass
     *
     * @return double
     */
    public function getInitialDryMatterMass()
    {
        return $this->container['initial_dry_matter_mass'];
    }

    /**
     * Sets initial_dry_matter_mass
     *
     * @param double $initial_dry_matter_mass 
     *
     * @return $this
     */
    public function setInitialDryMatterMass($initial_dry_matter_mass)
    {
        $this->container['initial_dry_matter_mass'] = $initial_dry_matter_mass;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer karty
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year Rok kalendarzowy
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets batch_generated_sediments
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1PaginatedPageBatchGeneratedSedimentDto
     */
    public function getBatchGeneratedSediments()
    {
        return $this->container['batch_generated_sediments'];
    }

    /**
     * Sets batch_generated_sediments
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1PaginatedPageBatchGeneratedSedimentDto $batch_generated_sediments 
     *
     * @return $this
     */
    public function setBatchGeneratedSediments($batch_generated_sediments)
    {
        $this->container['batch_generated_sediments'] = $batch_generated_sediments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


