<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoCollectedListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoCollectedListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoCollectedListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.WasteRecordCard.V1.KeoCollectedListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keo_collected_id' => 'string',
        'created_by_user' => 'string',
        'collected_date' => '\DateTime',
        'is_entry_based_on_kpo' => 'bool',
        'is_import_to_rp' => 'bool',
        'is_equipment_owner_exempt_from_record' => 'bool',
        'card_number' => 'string',
        'collected_mass' => 'double',
        'installation_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keo_collected_id' => 'uuid',
        'created_by_user' => null,
        'collected_date' => 'date-time',
        'is_entry_based_on_kpo' => null,
        'is_import_to_rp' => null,
        'is_equipment_owner_exempt_from_record' => null,
        'card_number' => null,
        'collected_mass' => 'double',
        'installation_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keo_collected_id' => 'keoCollectedId',
        'created_by_user' => 'createdByUser',
        'collected_date' => 'collectedDate',
        'is_entry_based_on_kpo' => 'isEntryBasedOnKpo',
        'is_import_to_rp' => 'isImportToRp',
        'is_equipment_owner_exempt_from_record' => 'isEquipmentOwnerExemptFromRecord',
        'card_number' => 'cardNumber',
        'collected_mass' => 'collectedMass',
        'installation_name' => 'installationName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keo_collected_id' => 'setKeoCollectedId',
        'created_by_user' => 'setCreatedByUser',
        'collected_date' => 'setCollectedDate',
        'is_entry_based_on_kpo' => 'setIsEntryBasedOnKpo',
        'is_import_to_rp' => 'setIsImportToRp',
        'is_equipment_owner_exempt_from_record' => 'setIsEquipmentOwnerExemptFromRecord',
        'card_number' => 'setCardNumber',
        'collected_mass' => 'setCollectedMass',
        'installation_name' => 'setInstallationName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keo_collected_id' => 'getKeoCollectedId',
        'created_by_user' => 'getCreatedByUser',
        'collected_date' => 'getCollectedDate',
        'is_entry_based_on_kpo' => 'getIsEntryBasedOnKpo',
        'is_import_to_rp' => 'getIsImportToRp',
        'is_equipment_owner_exempt_from_record' => 'getIsEquipmentOwnerExemptFromRecord',
        'card_number' => 'getCardNumber',
        'collected_mass' => 'getCollectedMass',
        'installation_name' => 'getInstallationName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keo_collected_id'] = isset($data['keo_collected_id']) ? $data['keo_collected_id'] : null;
        $this->container['created_by_user'] = isset($data['created_by_user']) ? $data['created_by_user'] : null;
        $this->container['collected_date'] = isset($data['collected_date']) ? $data['collected_date'] : null;
        $this->container['is_entry_based_on_kpo'] = isset($data['is_entry_based_on_kpo']) ? $data['is_entry_based_on_kpo'] : null;
        $this->container['is_import_to_rp'] = isset($data['is_import_to_rp']) ? $data['is_import_to_rp'] : null;
        $this->container['is_equipment_owner_exempt_from_record'] = isset($data['is_equipment_owner_exempt_from_record']) ? $data['is_equipment_owner_exempt_from_record'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['collected_mass'] = isset($data['collected_mass']) ? $data['collected_mass'] : null;
        $this->container['installation_name'] = isset($data['installation_name']) ? $data['installation_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keo_collected_id
     *
     * @return string
     */
    public function getKeoCollectedId()
    {
        return $this->container['keo_collected_id'];
    }

    /**
     * Sets keo_collected_id
     *
     * @param string $keo_collected_id Id wpisu Przyjęte odpady
     *
     * @return $this
     */
    public function setKeoCollectedId($keo_collected_id)
    {
        $this->container['keo_collected_id'] = $keo_collected_id;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string $created_by_user Utworzone przez użytkownika
     *
     * @return $this
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets collected_date
     *
     * @return \DateTime
     */
    public function getCollectedDate()
    {
        return $this->container['collected_date'];
    }

    /**
     * Sets collected_date
     *
     * @param \DateTime $collected_date Data przejęcia odpadów
     *
     * @return $this
     */
    public function setCollectedDate($collected_date)
    {
        $this->container['collected_date'] = $collected_date;

        return $this;
    }

    /**
     * Gets is_entry_based_on_kpo
     *
     * @return bool
     */
    public function getIsEntryBasedOnKpo()
    {
        return $this->container['is_entry_based_on_kpo'];
    }

    /**
     * Sets is_entry_based_on_kpo
     *
     * @param bool $is_entry_based_on_kpo Wpis dokonywany na podstawie karty przekazania odpadów
     *
     * @return $this
     */
    public function setIsEntryBasedOnKpo($is_entry_based_on_kpo)
    {
        $this->container['is_entry_based_on_kpo'] = $is_entry_based_on_kpo;

        return $this;
    }

    /**
     * Gets is_import_to_rp
     *
     * @return bool
     */
    public function getIsImportToRp()
    {
        return $this->container['is_import_to_rp'];
    }

    /**
     * Sets is_import_to_rp
     *
     * @param bool $is_import_to_rp Przywóz do RP
     *
     * @return $this
     */
    public function setIsImportToRp($is_import_to_rp)
    {
        $this->container['is_import_to_rp'] = $is_import_to_rp;

        return $this;
    }

    /**
     * Gets is_equipment_owner_exempt_from_record
     *
     * @return bool
     */
    public function getIsEquipmentOwnerExemptFromRecord()
    {
        return $this->container['is_equipment_owner_exempt_from_record'];
    }

    /**
     * Sets is_equipment_owner_exempt_from_record
     *
     * @param bool $is_equipment_owner_exempt_from_record Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
     *
     * @return $this
     */
    public function setIsEquipmentOwnerExemptFromRecord($is_equipment_owner_exempt_from_record)
    {
        $this->container['is_equipment_owner_exempt_from_record'] = $is_equipment_owner_exempt_from_record;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Numer karty
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets collected_mass
     *
     * @return double
     */
    public function getCollectedMass()
    {
        return $this->container['collected_mass'];
    }

    /**
     * Sets collected_mass
     *
     * @param double $collected_mass Masa przejętych odpadów [Mg]
     *
     * @return $this
     */
    public function setCollectedMass($collected_mass)
    {
        $this->container['collected_mass'] = $collected_mass;

        return $this;
    }

    /**
     * Gets installation_name
     *
     * @return string
     */
    public function getInstallationName()
    {
        return $this->container['installation_name'];
    }

    /**
     * Sets installation_name
     *
     * @param string $installation_name Nazwa instalacji
     *
     * @return $this
     */
    public function setInstallationName($installation_name)
    {
        $this->container['installation_name'] = $installation_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


