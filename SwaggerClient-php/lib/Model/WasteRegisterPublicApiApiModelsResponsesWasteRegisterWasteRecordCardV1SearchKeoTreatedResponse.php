<?php
/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WasteRegisterPublic.Api.ApiModels.Responses.WasteRegister.WasteRecordCard.V1.SearchKeoTreatedResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recycle_sum' => 'double',
        'preparation_for_re_use_sum' => 'double',
        'filling_up_disadvantaged_areas_sum' => 'double',
        'another_recovery_process_sum' => 'double',
        'neutralization_sum' => 'double',
        'keo_dto' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto',
        'treated_keos' => '\Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recycle_sum' => 'double',
        'preparation_for_re_use_sum' => 'double',
        'filling_up_disadvantaged_areas_sum' => 'double',
        'another_recovery_process_sum' => 'double',
        'neutralization_sum' => 'double',
        'keo_dto' => null,
        'treated_keos' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recycle_sum' => 'recycleSum',
        'preparation_for_re_use_sum' => 'preparationForReUseSum',
        'filling_up_disadvantaged_areas_sum' => 'fillingUpDisadvantagedAreasSum',
        'another_recovery_process_sum' => 'anotherRecoveryProcessSum',
        'neutralization_sum' => 'neutralizationSum',
        'keo_dto' => 'keoDto',
        'treated_keos' => 'treatedKeos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recycle_sum' => 'setRecycleSum',
        'preparation_for_re_use_sum' => 'setPreparationForReUseSum',
        'filling_up_disadvantaged_areas_sum' => 'setFillingUpDisadvantagedAreasSum',
        'another_recovery_process_sum' => 'setAnotherRecoveryProcessSum',
        'neutralization_sum' => 'setNeutralizationSum',
        'keo_dto' => 'setKeoDto',
        'treated_keos' => 'setTreatedKeos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recycle_sum' => 'getRecycleSum',
        'preparation_for_re_use_sum' => 'getPreparationForReUseSum',
        'filling_up_disadvantaged_areas_sum' => 'getFillingUpDisadvantagedAreasSum',
        'another_recovery_process_sum' => 'getAnotherRecoveryProcessSum',
        'neutralization_sum' => 'getNeutralizationSum',
        'keo_dto' => 'getKeoDto',
        'treated_keos' => 'getTreatedKeos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recycle_sum'] = isset($data['recycle_sum']) ? $data['recycle_sum'] : null;
        $this->container['preparation_for_re_use_sum'] = isset($data['preparation_for_re_use_sum']) ? $data['preparation_for_re_use_sum'] : null;
        $this->container['filling_up_disadvantaged_areas_sum'] = isset($data['filling_up_disadvantaged_areas_sum']) ? $data['filling_up_disadvantaged_areas_sum'] : null;
        $this->container['another_recovery_process_sum'] = isset($data['another_recovery_process_sum']) ? $data['another_recovery_process_sum'] : null;
        $this->container['neutralization_sum'] = isset($data['neutralization_sum']) ? $data['neutralization_sum'] : null;
        $this->container['keo_dto'] = isset($data['keo_dto']) ? $data['keo_dto'] : null;
        $this->container['treated_keos'] = isset($data['treated_keos']) ? $data['treated_keos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recycle_sum
     *
     * @return double
     */
    public function getRecycleSum()
    {
        return $this->container['recycle_sum'];
    }

    /**
     * Sets recycle_sum
     *
     * @param double $recycle_sum Łączna masa przetwarzanych odpadów - recykling [Mg]
     *
     * @return $this
     */
    public function setRecycleSum($recycle_sum)
    {
        $this->container['recycle_sum'] = $recycle_sum;

        return $this;
    }

    /**
     * Gets preparation_for_re_use_sum
     *
     * @return double
     */
    public function getPreparationForReUseSum()
    {
        return $this->container['preparation_for_re_use_sum'];
    }

    /**
     * Sets preparation_for_re_use_sum
     *
     * @param double $preparation_for_re_use_sum Łączna masa masa przetwarzanych odpadów - przygotowanie do ponownego użycia [Mg]
     *
     * @return $this
     */
    public function setPreparationForReUseSum($preparation_for_re_use_sum)
    {
        $this->container['preparation_for_re_use_sum'] = $preparation_for_re_use_sum;

        return $this;
    }

    /**
     * Gets filling_up_disadvantaged_areas_sum
     *
     * @return double
     */
    public function getFillingUpDisadvantagedAreasSum()
    {
        return $this->container['filling_up_disadvantaged_areas_sum'];
    }

    /**
     * Sets filling_up_disadvantaged_areas_sum
     *
     * @param double $filling_up_disadvantaged_areas_sum Łączna masa masa przetwarzanych odpadów - wypełnianie terenów niekorzystnie przekształconych [Mg]
     *
     * @return $this
     */
    public function setFillingUpDisadvantagedAreasSum($filling_up_disadvantaged_areas_sum)
    {
        $this->container['filling_up_disadvantaged_areas_sum'] = $filling_up_disadvantaged_areas_sum;

        return $this;
    }

    /**
     * Gets another_recovery_process_sum
     *
     * @return double
     */
    public function getAnotherRecoveryProcessSum()
    {
        return $this->container['another_recovery_process_sum'];
    }

    /**
     * Sets another_recovery_process_sum
     *
     * @param double $another_recovery_process_sum Łączna masa masa przetwarzanych odpadów - inny proces odzysku [Mg]
     *
     * @return $this
     */
    public function setAnotherRecoveryProcessSum($another_recovery_process_sum)
    {
        $this->container['another_recovery_process_sum'] = $another_recovery_process_sum;

        return $this;
    }

    /**
     * Gets neutralization_sum
     *
     * @return double
     */
    public function getNeutralizationSum()
    {
        return $this->container['neutralization_sum'];
    }

    /**
     * Sets neutralization_sum
     *
     * @param double $neutralization_sum Łączna masa masa przetwarzanych odpadów - unieszkodliwienie [Mg]
     *
     * @return $this
     */
    public function setNeutralizationSum($neutralization_sum)
    {
        $this->container['neutralization_sum'] = $neutralization_sum;

        return $this;
    }

    /**
     * Gets keo_dto
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto
     */
    public function getKeoDto()
    {
        return $this->container['keo_dto'];
    }

    /**
     * Sets keo_dto
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto $keo_dto Karta keo
     *
     * @return $this
     */
    public function setKeoDto($keo_dto)
    {
        $this->container['keo_dto'] = $keo_dto;

        return $this;
    }

    /**
     * Gets treated_keos
     *
     * @return \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem
     */
    public function getTreatedKeos()
    {
        return $this->container['treated_keos'];
    }

    /**
     * Sets treated_keos
     *
     * @param \Swagger\Client\Model\WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem $treated_keos 
     *
     * @return $this
     */
    public function setTreatedKeos($treated_keos)
    {
        $this->container['treated_keos'] = $treated_keos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


